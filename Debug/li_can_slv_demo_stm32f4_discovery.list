
li_can_slv_demo_stm32f4_discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007050  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007598  08007598  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a0  080075a0  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  080075a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  200001a8  08007750  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  08007750  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166b3  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035d9  00000000  00000000  0003688b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  00039e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0003ab00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024dbe  00000000  00000000  0003b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010740  00000000  00000000  000603ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccfd6  00000000  00000000  00070aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  0013db40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071c8 	.word	0x080071c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	080071c8 	.word	0x080071c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f001 f815 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f002 f906 	bl	80027b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f83b 	bl	800164e <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 fff5 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000008 	.word	0x20000008
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	20000708 	.word	0x20000708

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000708 	.word	0x20000708

08000654 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e0ed      	b.n	8000842 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d102      	bne.n	8000678 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f002 f8c6 	bl	8002804 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f022 0202 	bic.w	r2, r2, #2
 8000686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000688:	f7ff ffd8 	bl	800063c <HAL_GetTick>
 800068c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800068e:	e012      	b.n	80006b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000690:	f7ff ffd4 	bl	800063c <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	2b0a      	cmp	r3, #10
 800069c:	d90b      	bls.n	80006b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2205      	movs	r2, #5
 80006ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e0c5      	b.n	8000842 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1e5      	bne.n	8000690 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f042 0201 	orr.w	r2, r2, #1
 80006d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006d4:	f7ff ffb2 	bl	800063c <HAL_GetTick>
 80006d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006da:	e012      	b.n	8000702 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006dc:	f7ff ffae 	bl	800063c <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	2b0a      	cmp	r3, #10
 80006e8:	d90b      	bls.n	8000702 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2205      	movs	r2, #5
 80006fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e09f      	b.n	8000842 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0e5      	beq.n	80006dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7e1b      	ldrb	r3, [r3, #24]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d108      	bne.n	800072a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	e007      	b.n	800073a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000738:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7e5b      	ldrb	r3, [r3, #25]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d108      	bne.n	8000754 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	e007      	b.n	8000764 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000762:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7e9b      	ldrb	r3, [r3, #26]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d108      	bne.n	800077e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f042 0220 	orr.w	r2, r2, #32
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	e007      	b.n	800078e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0220 	bic.w	r2, r2, #32
 800078c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7edb      	ldrb	r3, [r3, #27]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d108      	bne.n	80007a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f022 0210 	bic.w	r2, r2, #16
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	e007      	b.n	80007b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0210 	orr.w	r2, r2, #16
 80007b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7f1b      	ldrb	r3, [r3, #28]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d108      	bne.n	80007d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f042 0208 	orr.w	r2, r2, #8
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e007      	b.n	80007e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0208 	bic.w	r2, r2, #8
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7f5b      	ldrb	r3, [r3, #29]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d108      	bne.n	80007fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f042 0204 	orr.w	r2, r2, #4
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	e007      	b.n	800080c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0204 	bic.w	r2, r2, #4
 800080a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	431a      	orrs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	ea42 0103 	orr.w	r1, r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	430a      	orrs	r2, r1
 8000830:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2201      	movs	r2, #1
 800083c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e015      	b.n	8000888 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f93b 	bl	8000ad8 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f002 f886 	bl	8002974 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000876:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000890:	b480      	push	{r7}
 8000892:	b087      	sub	sp, #28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80008a8:	7cfb      	ldrb	r3, [r7, #19]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d003      	beq.n	80008b6 <HAL_CAN_ConfigFilter+0x26>
 80008ae:	7cfb      	ldrb	r3, [r7, #19]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	f040 80be 	bne.w	8000a32 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80008b6:	4b65      	ldr	r3, [pc, #404]	; (8000a4c <HAL_CAN_ConfigFilter+0x1bc>)
 80008b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80008c0:	f043 0201 	orr.w	r2, r3, #1
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80008d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	431a      	orrs	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f003 031f 	and.w	r3, r3, #31
 80008f6:	2201      	movs	r2, #1
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	43db      	mvns	r3, r3
 8000908:	401a      	ands	r2, r3
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d123      	bne.n	8000960 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	43db      	mvns	r3, r3
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800093a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	3248      	adds	r2, #72	; 0x48
 8000940:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000954:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000956:	6979      	ldr	r1, [r7, #20]
 8000958:	3348      	adds	r3, #72	; 0x48
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	440b      	add	r3, r1
 800095e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d122      	bne.n	80009ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	431a      	orrs	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000988:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3248      	adds	r2, #72	; 0x48
 800098e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009a4:	6979      	ldr	r1, [r7, #20]
 80009a6:	3348      	adds	r3, #72	; 0x48
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	440b      	add	r3, r1
 80009ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d109      	bne.n	80009ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	43db      	mvns	r3, r3
 80009c0:	401a      	ands	r2, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80009c8:	e007      	b.n	80009da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	431a      	orrs	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d109      	bne.n	80009f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	401a      	ands	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009f4:	e007      	b.n	8000a06 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	431a      	orrs	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	6a1b      	ldr	r3, [r3, #32]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d107      	bne.n	8000a1e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	431a      	orrs	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a24:	f023 0201 	bic.w	r2, r3, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e006      	b.n	8000a40 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
  }
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	371c      	adds	r7, #28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	40006400 	.word	0x40006400

08000a50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d12e      	bne.n	8000ac2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2202      	movs	r2, #2
 8000a68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0201 	bic.w	r2, r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a7c:	f7ff fdde 	bl	800063c <HAL_GetTick>
 8000a80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a82:	e012      	b.n	8000aaa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a84:	f7ff fdda 	bl	800063c <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	2b0a      	cmp	r3, #10
 8000a90:	d90b      	bls.n	8000aaa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e012      	b.n	8000ad0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1e5      	bne.n	8000a84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e006      	b.n	8000ad0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
  }
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d133      	bne.n	8000b54 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0201 	orr.w	r2, r2, #1
 8000afa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000afc:	f7ff fd9e 	bl	800063c <HAL_GetTick>
 8000b00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b02:	e012      	b.n	8000b2a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b04:	f7ff fd9a 	bl	800063c <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d90b      	bls.n	8000b2a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2205      	movs	r2, #5
 8000b22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e01b      	b.n	8000b62 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0e5      	beq.n	8000b04 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0202 	bic.w	r2, r2, #2
 8000b46:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	e006      	b.n	8000b62 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
  }
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b089      	sub	sp, #36	; 0x24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b88:	7ffb      	ldrb	r3, [r7, #31]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d003      	beq.n	8000b96 <HAL_CAN_AddTxMessage+0x2c>
 8000b8e:	7ffb      	ldrb	r3, [r7, #31]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	f040 80b8 	bne.w	8000d06 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10a      	bne.n	8000bb6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d105      	bne.n	8000bb6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f000 80a0 	beq.w	8000cf6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	0e1b      	lsrs	r3, r3, #24
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d907      	bls.n	8000bd6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e09e      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10d      	bne.n	8000c04 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	6809      	ldr	r1, [r1, #0]
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	440b      	add	r3, r1
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	e00f      	b.n	8000c24 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c14:	68f9      	ldr	r1, [r7, #12]
 8000c16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	440b      	add	r3, r1
 8000c22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6819      	ldr	r1, [r3, #0]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3318      	adds	r3, #24
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	440b      	add	r3, r1
 8000c34:	3304      	adds	r3, #4
 8000c36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	7d1b      	ldrb	r3, [r3, #20]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d111      	bne.n	8000c64 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3318      	adds	r3, #24
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	6811      	ldr	r1, [r2, #0]
 8000c54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	440b      	add	r3, r1
 8000c60:	3304      	adds	r3, #4
 8000c62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3307      	adds	r3, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	061a      	lsls	r2, r3, #24
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3306      	adds	r3, #6
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	041b      	lsls	r3, r3, #16
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3305      	adds	r3, #5
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	3204      	adds	r2, #4
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	4610      	mov	r0, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6811      	ldr	r1, [r2, #0]
 8000c8c:	ea43 0200 	orr.w	r2, r3, r0
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	440b      	add	r3, r1
 8000c96:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	061a      	lsls	r2, r3, #24
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	ea43 0200 	orr.w	r2, r3, r0
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	440b      	add	r3, r1
 8000ccc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3318      	adds	r3, #24
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	4413      	add	r3, r2
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	6811      	ldr	r1, [r2, #0]
 8000ce4:	f043 0201 	orr.w	r2, r3, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3318      	adds	r3, #24
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	440b      	add	r3, r1
 8000cf0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e00e      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e006      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
  }
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3724      	adds	r7, #36	; 0x24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d003      	beq.n	8000d44 <HAL_CAN_GetRxMessage+0x24>
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	f040 80f4 	bne.w	8000f2c <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10e      	bne.n	8000d68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d116      	bne.n	8000d86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e0e8      	b.n	8000f3a <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d107      	bne.n	8000d86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e0d9      	b.n	8000f3a <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	331b      	adds	r3, #27
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	4413      	add	r3, r2
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0204 	and.w	r2, r3, #4
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10c      	bne.n	8000dbe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	331b      	adds	r3, #27
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4413      	add	r3, r2
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	0d5b      	lsrs	r3, r3, #21
 8000db4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e00b      	b.n	8000dd6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	331b      	adds	r3, #27
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	331b      	adds	r3, #27
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4413      	add	r3, r2
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	085b      	lsrs	r3, r3, #1
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	331b      	adds	r3, #27
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	4413      	add	r3, r2
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 020f 	and.w	r2, r3, #15
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	331b      	adds	r3, #27
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	4413      	add	r3, r2
 8000e12:	3304      	adds	r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	331b      	adds	r3, #27
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	4413      	add	r3, r2
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0c1b      	lsrs	r3, r3, #16
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	4413      	add	r3, r2
 8000e40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	4413      	add	r3, r2
 8000e56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	0a1a      	lsrs	r2, r3, #8
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	4413      	add	r3, r2
 8000e70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	0c1a      	lsrs	r2, r3, #16
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	4413      	add	r3, r2
 8000e8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0e1a      	lsrs	r2, r3, #24
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	3303      	adds	r3, #3
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3304      	adds	r3, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	4413      	add	r3, r2
 8000ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0a1a      	lsrs	r2, r3, #8
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	3305      	adds	r3, #5
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0c1a      	lsrs	r2, r3, #16
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	3306      	adds	r3, #6
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	4413      	add	r3, r2
 8000ef0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	0e1a      	lsrs	r2, r3, #24
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	3307      	adds	r3, #7
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d108      	bne.n	8000f18 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0220 	orr.w	r2, r2, #32
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	e007      	b.n	8000f28 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0220 	orr.w	r2, r2, #32
 8000f26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e006      	b.n	8000f3a <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
  }
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d002      	beq.n	8000f64 <HAL_CAN_ActivateNotification+0x1e>
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d109      	bne.n	8000f78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6959      	ldr	r1, [r3, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e006      	b.n	8000f86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
  }
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d002      	beq.n	8000fb0 <HAL_CAN_DeactivateNotification+0x1e>
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d10a      	bne.n	8000fc6 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6959      	ldr	r1, [r3, #20]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e006      	b.n	8000fd4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
  }
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d07c      	beq.n	8001120 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d023      	beq.n	8001078 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f002 fbba 	bl	80037bc <HAL_CAN_TxMailbox0CompleteCallback>
 8001048:	e016      	b.n	8001078 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	e00c      	b.n	8001078 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
 8001070:	e002      	b.n	8001078 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f965 	bl	8001342 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d024      	beq.n	80010cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f002 fc2a 	bl	80038f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800109c:	e016      	b.n	80010cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
 80010b0:	e00c      	b.n	80010cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	e002      	b.n	80010cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f945 	bl	8001356 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d024      	beq.n	8001120 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f002 fc94 	bl	8003a18 <HAL_CAN_TxMailbox2CompleteCallback>
 80010f0:	e016      	b.n	8001120 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	e00c      	b.n	8001120 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
 8001118:	e002      	b.n	8001120 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f925 	bl	800136a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00c      	beq.n	8001144 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0310 	and.w	r3, r3, #16
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2210      	movs	r2, #16
 8001142:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2208      	movs	r2, #8
 800115e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f90c 	bl	800137e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d009      	beq.n	8001184 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f002 fcde 	bl	8003b40 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00c      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2210      	movs	r2, #16
 80011a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00b      	beq.n	80011ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2208      	movs	r2, #8
 80011c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f8ee 	bl	80013a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d009      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f8d5 	bl	8001392 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2210      	movs	r2, #16
 8001202:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f8d8 	bl	80013ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00b      	beq.n	800122c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2208      	movs	r2, #8
 8001224:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f8d1 	bl	80013ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d075      	beq.n	8001322 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d06c      	beq.n	800131a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001262:	2b00      	cmp	r3, #0
 8001264:	d008      	beq.n	8001278 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800129a:	2b00      	cmp	r3, #0
 800129c:	d03d      	beq.n	800131a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d038      	beq.n	800131a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012ae:	2b30      	cmp	r3, #48	; 0x30
 80012b0:	d017      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x302>
 80012b2:	2b30      	cmp	r3, #48	; 0x30
 80012b4:	d804      	bhi.n	80012c0 <HAL_CAN_IRQHandler+0x2e0>
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d009      	beq.n	80012ce <HAL_CAN_IRQHandler+0x2ee>
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d00c      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012be:	e024      	b.n	800130a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80012c0:	2b50      	cmp	r3, #80	; 0x50
 80012c2:	d018      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x316>
 80012c4:	2b60      	cmp	r3, #96	; 0x60
 80012c6:	d01b      	beq.n	8001300 <HAL_CAN_IRQHandler+0x320>
 80012c8:	2b40      	cmp	r3, #64	; 0x40
 80012ca:	d00f      	beq.n	80012ec <HAL_CAN_IRQHandler+0x30c>
            break;
 80012cc:	e01d      	b.n	800130a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012d6:	e018      	b.n	800130a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012e0:	e013      	b.n	800130a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012ea:	e00e      	b.n	800130a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012f4:	e009      	b.n	800130a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012fe:	e004      	b.n	800130a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001308:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001318:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2204      	movs	r2, #4
 8001320:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f002 fcaf 	bl	8003c98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db10      	blt.n	80014b8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4909      	ldr	r1, [pc, #36]	; (80014c4 <__NVIC_DisableIRQ+0x40>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	3320      	adds	r3, #32
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff07 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff1c 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff0f 	bl	8001448 <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff1f 	bl	8001484 <__NVIC_DisableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff94 	bl	8001584 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	e16b      	b.n	800195c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 815a 	bne.w	8001956 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x4a>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b12      	cmp	r3, #18
 80016b0:	d123      	bne.n	80016fa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	69b9      	ldr	r1, [r7, #24]
 80016f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0203 	and.w	r2, r3, #3
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d00b      	beq.n	800174e <HAL_GPIO_Init+0xe6>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001742:	2b11      	cmp	r3, #17
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b12      	cmp	r3, #18
 800174c:	d130      	bne.n	80017b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80b4 	beq.w	8001956 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_GPIO_Init+0x308>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a5e      	ldr	r2, [pc, #376]	; (8001970 <HAL_GPIO_Init+0x308>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b5c      	ldr	r3, [pc, #368]	; (8001970 <HAL_GPIO_Init+0x308>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180a:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <HAL_GPIO_Init+0x30c>)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a51      	ldr	r2, [pc, #324]	; (8001978 <HAL_GPIO_Init+0x310>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d02b      	beq.n	800188e <HAL_GPIO_Init+0x226>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a50      	ldr	r2, [pc, #320]	; (800197c <HAL_GPIO_Init+0x314>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d025      	beq.n	800188a <HAL_GPIO_Init+0x222>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4f      	ldr	r2, [pc, #316]	; (8001980 <HAL_GPIO_Init+0x318>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01f      	beq.n	8001886 <HAL_GPIO_Init+0x21e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4e      	ldr	r2, [pc, #312]	; (8001984 <HAL_GPIO_Init+0x31c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d019      	beq.n	8001882 <HAL_GPIO_Init+0x21a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4d      	ldr	r2, [pc, #308]	; (8001988 <HAL_GPIO_Init+0x320>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0x216>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <HAL_GPIO_Init+0x324>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00d      	beq.n	800187a <HAL_GPIO_Init+0x212>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4b      	ldr	r2, [pc, #300]	; (8001990 <HAL_GPIO_Init+0x328>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <HAL_GPIO_Init+0x20e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <HAL_GPIO_Init+0x32c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_GPIO_Init+0x20a>
 800186e:	2307      	movs	r3, #7
 8001870:	e00e      	b.n	8001890 <HAL_GPIO_Init+0x228>
 8001872:	2308      	movs	r3, #8
 8001874:	e00c      	b.n	8001890 <HAL_GPIO_Init+0x228>
 8001876:	2306      	movs	r3, #6
 8001878:	e00a      	b.n	8001890 <HAL_GPIO_Init+0x228>
 800187a:	2305      	movs	r3, #5
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x228>
 800187e:	2304      	movs	r3, #4
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x228>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x228>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x228>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x228>
 800188e:	2300      	movs	r3, #0
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f002 0203 	and.w	r2, r2, #3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a0:	4934      	ldr	r1, [pc, #208]	; (8001974 <HAL_GPIO_Init+0x30c>)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_GPIO_Init+0x330>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d2:	4a31      	ldr	r2, [pc, #196]	; (8001998 <HAL_GPIO_Init+0x330>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_GPIO_Init+0x330>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fc:	4a26      	ldr	r2, [pc, #152]	; (8001998 <HAL_GPIO_Init+0x330>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_GPIO_Init+0x330>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001926:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <HAL_GPIO_Init+0x330>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_GPIO_Init+0x330>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_GPIO_Init+0x330>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	f67f ae90 	bls.w	8001684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001964:	bf00      	nop
 8001966:	3724      	adds	r7, #36	; 0x24
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40023800 	.word	0x40023800
 8001974:	40013800 	.word	0x40013800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400
 8001980:	40020800 	.word	0x40020800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40021000 	.word	0x40021000
 800198c:	40021400 	.word	0x40021400
 8001990:	40021800 	.word	0x40021800
 8001994:	40021c00 	.word	0x40021c00
 8001998:	40013c00 	.word	0x40013c00

0800199c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e0cd      	b.n	8001b54 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	f040 80bd 	bne.w	8001b4e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80019d4:	4a64      	ldr	r2, [pc, #400]	; (8001b68 <HAL_GPIO_DeInit+0x1cc>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	4013      	ands	r3, r2
 80019f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a5c      	ldr	r2, [pc, #368]	; (8001b6c <HAL_GPIO_DeInit+0x1d0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d02b      	beq.n	8001a56 <HAL_GPIO_DeInit+0xba>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a5b      	ldr	r2, [pc, #364]	; (8001b70 <HAL_GPIO_DeInit+0x1d4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_DeInit+0xb6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a5a      	ldr	r2, [pc, #360]	; (8001b74 <HAL_GPIO_DeInit+0x1d8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_DeInit+0xb2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a59      	ldr	r2, [pc, #356]	; (8001b78 <HAL_GPIO_DeInit+0x1dc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_DeInit+0xae>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_GPIO_DeInit+0x1e0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_DeInit+0xaa>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a57      	ldr	r2, [pc, #348]	; (8001b80 <HAL_GPIO_DeInit+0x1e4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_DeInit+0xa6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <HAL_GPIO_DeInit+0x1e8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_DeInit+0xa2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a55      	ldr	r2, [pc, #340]	; (8001b88 <HAL_GPIO_DeInit+0x1ec>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_DeInit+0x9e>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e00e      	b.n	8001a58 <HAL_GPIO_DeInit+0xbc>
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	e00c      	b.n	8001a58 <HAL_GPIO_DeInit+0xbc>
 8001a3e:	2306      	movs	r3, #6
 8001a40:	e00a      	b.n	8001a58 <HAL_GPIO_DeInit+0xbc>
 8001a42:	2305      	movs	r3, #5
 8001a44:	e008      	b.n	8001a58 <HAL_GPIO_DeInit+0xbc>
 8001a46:	2304      	movs	r3, #4
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_DeInit+0xbc>
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e004      	b.n	8001a58 <HAL_GPIO_DeInit+0xbc>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_DeInit+0xbc>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_DeInit+0xbc>
 8001a56:	2300      	movs	r3, #0
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	f002 0203 	and.w	r2, r2, #3
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	4093      	lsls	r3, r2
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d132      	bne.n	8001ace <HAL_GPIO_DeInit+0x132>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a78:	4a3b      	ldr	r2, [pc, #236]	; (8001b68 <HAL_GPIO_DeInit+0x1cc>)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	43da      	mvns	r2, r3
 8001a88:	4837      	ldr	r0, [pc, #220]	; (8001b68 <HAL_GPIO_DeInit+0x1cc>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	400a      	ands	r2, r1
 8001a90:	3302      	adds	r3, #2
 8001a92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_GPIO_DeInit+0x1f0>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	493b      	ldr	r1, [pc, #236]	; (8001b8c <HAL_GPIO_DeInit+0x1f0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001aa4:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_GPIO_DeInit+0x1f0>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4937      	ldr	r1, [pc, #220]	; (8001b8c <HAL_GPIO_DeInit+0x1f0>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_GPIO_DeInit+0x1f0>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4934      	ldr	r1, [pc, #208]	; (8001b8c <HAL_GPIO_DeInit+0x1f0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_GPIO_DeInit+0x1f0>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	4930      	ldr	r1, [pc, #192]	; (8001b8c <HAL_GPIO_DeInit+0x1f0>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2103      	movs	r1, #3
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	08d2      	lsrs	r2, r2, #3
 8001b04:	4019      	ands	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2103      	movs	r1, #3
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2103      	movs	r1, #3
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f af2e 	bls.w	80019b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40021400 	.word	0x40021400
 8001b84:	40021800 	.word	0x40021800
 8001b88:	40021c00 	.word	0x40021c00
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e22d      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d075      	beq.n	8001cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be2:	4ba3      	ldr	r3, [pc, #652]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d00c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	4ba0      	ldr	r3, [pc, #640]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d112      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b9d      	ldr	r3, [pc, #628]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c06:	d10b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4b99      	ldr	r3, [pc, #612]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d05b      	beq.n	8001ccc <HAL_RCC_OscConfig+0x108>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d157      	bne.n	8001ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e208      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d106      	bne.n	8001c38 <HAL_RCC_OscConfig+0x74>
 8001c2a:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a90      	ldr	r2, [pc, #576]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a8a      	ldr	r2, [pc, #552]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a87      	ldr	r2, [pc, #540]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c5c:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a83      	ldr	r2, [pc, #524]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b81      	ldr	r3, [pc, #516]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a80      	ldr	r2, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7fe fcde 	bl	800063c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7fe fcda 	bl	800063c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1cd      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xc0>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fcca 	bl	800063c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cac:	f7fe fcc6 	bl	800063c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1b9      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0xe8>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b62      	ldr	r3, [pc, #392]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e18d      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4952      	ldr	r1, [pc, #328]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_RCC_OscConfig+0x2b0>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fc7f 	bl	800063c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7fe fc7b 	bl	800063c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e16e      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4940      	ldr	r1, [pc, #256]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_RCC_OscConfig+0x2b0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7fe fc5e 	bl	800063c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d84:	f7fe fc5a 	bl	800063c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e14d      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d030      	beq.n	8001e10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_RCC_OscConfig+0x2b4>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7fe fc3e 	bl	800063c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7fe fc3a 	bl	800063c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e12d      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x200>
 8001de2:	e015      	b.n	8001e10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_OscConfig+0x2b4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7fe fc27 	bl	800063c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7fe fc23 	bl	800063c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e116      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a0 	beq.w	8001f5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x2b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d121      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x2b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_RCC_OscConfig+0x2b8>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7fe fbe9 	bl	800063c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	e011      	b.n	8001e92 <HAL_RCC_OscConfig+0x2ce>
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	42470000 	.word	0x42470000
 8001e78:	42470e80 	.word	0x42470e80
 8001e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e80:	f7fe fbdc 	bl	800063c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0cf      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x478>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
 8001ea6:	4b66      	ldr	r3, [pc, #408]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eaa:	4a65      	ldr	r2, [pc, #404]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb2:	e01c      	b.n	8001eee <HAL_RCC_OscConfig+0x32a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x312>
 8001ebc:	4b60      	ldr	r3, [pc, #384]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec8:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	4a5c      	ldr	r2, [pc, #368]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed4:	e00b      	b.n	8001eee <HAL_RCC_OscConfig+0x32a>
 8001ed6:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	4a59      	ldr	r2, [pc, #356]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a56      	ldr	r2, [pc, #344]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d015      	beq.n	8001f22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fba1 	bl	800063c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fb9d 	bl	800063c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e08e      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCC_OscConfig+0x33a>
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7fe fb8b 	bl	800063c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fb87 	bl	800063c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e078      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d064      	beq.n	8002030 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f66:	4b36      	ldr	r3, [pc, #216]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d05c      	beq.n	800202c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d141      	bne.n	8001ffe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_RCC_OscConfig+0x480>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fb5c 	bl	800063c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe fb58 	bl	800063c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e04b      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	491d      	ldr	r1, [pc, #116]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <HAL_RCC_OscConfig+0x480>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fb31 	bl	800063c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7fe fb2d 	bl	800063c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e020      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x41a>
 8001ffc:	e018      	b.n	8002030 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_OscConfig+0x480>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe fb1a 	bl	800063c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200c:	f7fe fb16 	bl	800063c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e009      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_RCC_OscConfig+0x47c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x448>
 800202a:	e001      	b.n	8002030 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000
 8002040:	40023800 	.word	0x40023800
 8002044:	42470060 	.word	0x42470060

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0ca      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d90c      	bls.n	8002084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b64      	ldr	r3, [pc, #400]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b62      	ldr	r3, [pc, #392]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b6      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b58      	ldr	r3, [pc, #352]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b52      	ldr	r3, [pc, #328]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a51      	ldr	r2, [pc, #324]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80020ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b4f      	ldr	r3, [pc, #316]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494c      	ldr	r1, [pc, #304]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d044      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07d      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06d      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e065      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4933      	ldr	r1, [pc, #204]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7fe fa80 	bl	800063c <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7fe fa7c 	bl	800063c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04d      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20c      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e030      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4915      	ldr	r1, [pc, #84]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490d      	ldr	r1, [pc, #52]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f81d 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021d2:	4601      	mov	r1, r0
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	fa21 f303 	lsr.w	r3, r1, r3
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7fe f9e2 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023c00 	.word	0x40023c00
 8002200:	40023800 	.word	0x40023800
 8002204:	08007220 	.word	0x08007220
 8002208:	20000008 	.word	0x20000008

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	2300      	movs	r3, #0
 800221c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d007      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x32>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d008      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x38>
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 80b4 	bne.w	80023a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b5e      	ldr	r3, [pc, #376]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800223a:	60bb      	str	r3, [r7, #8]
       break;
 800223c:	e0b3      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223e:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002240:	60bb      	str	r3, [r7, #8]
      break;
 8002242:	e0b0      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002244:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800224c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224e:	4b58      	ldr	r3, [pc, #352]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04a      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225a:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	f04f 0400 	mov.w	r4, #0
 8002264:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	ea03 0501 	and.w	r5, r3, r1
 8002270:	ea04 0602 	and.w	r6, r4, r2
 8002274:	4629      	mov	r1, r5
 8002276:	4632      	mov	r2, r6
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	0154      	lsls	r4, r2, #5
 8002282:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002286:	014b      	lsls	r3, r1, #5
 8002288:	4619      	mov	r1, r3
 800228a:	4622      	mov	r2, r4
 800228c:	1b49      	subs	r1, r1, r5
 800228e:	eb62 0206 	sbc.w	r2, r2, r6
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f04f 0400 	mov.w	r4, #0
 800229a:	0194      	lsls	r4, r2, #6
 800229c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022a0:	018b      	lsls	r3, r1, #6
 80022a2:	1a5b      	subs	r3, r3, r1
 80022a4:	eb64 0402 	sbc.w	r4, r4, r2
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	00e2      	lsls	r2, r4, #3
 80022b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022b6:	00d9      	lsls	r1, r3, #3
 80022b8:	460b      	mov	r3, r1
 80022ba:	4614      	mov	r4, r2
 80022bc:	195b      	adds	r3, r3, r5
 80022be:	eb44 0406 	adc.w	r4, r4, r6
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	0262      	lsls	r2, r4, #9
 80022cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80022d0:	0259      	lsls	r1, r3, #9
 80022d2:	460b      	mov	r3, r1
 80022d4:	4614      	mov	r4, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	4621      	mov	r1, r4
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f04f 0400 	mov.w	r4, #0
 80022e0:	461a      	mov	r2, r3
 80022e2:	4623      	mov	r3, r4
 80022e4:	f7fd ffc4 	bl	8000270 <__aeabi_uldivmod>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e049      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	f04f 0400 	mov.w	r4, #0
 80022fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	ea03 0501 	and.w	r5, r3, r1
 8002306:	ea04 0602 	and.w	r6, r4, r2
 800230a:	4629      	mov	r1, r5
 800230c:	4632      	mov	r2, r6
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	f04f 0400 	mov.w	r4, #0
 8002316:	0154      	lsls	r4, r2, #5
 8002318:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800231c:	014b      	lsls	r3, r1, #5
 800231e:	4619      	mov	r1, r3
 8002320:	4622      	mov	r2, r4
 8002322:	1b49      	subs	r1, r1, r5
 8002324:	eb62 0206 	sbc.w	r2, r2, r6
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	f04f 0400 	mov.w	r4, #0
 8002330:	0194      	lsls	r4, r2, #6
 8002332:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002336:	018b      	lsls	r3, r1, #6
 8002338:	1a5b      	subs	r3, r3, r1
 800233a:	eb64 0402 	sbc.w	r4, r4, r2
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	00e2      	lsls	r2, r4, #3
 8002348:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800234c:	00d9      	lsls	r1, r3, #3
 800234e:	460b      	mov	r3, r1
 8002350:	4614      	mov	r4, r2
 8002352:	195b      	adds	r3, r3, r5
 8002354:	eb44 0406 	adc.w	r4, r4, r6
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	02a2      	lsls	r2, r4, #10
 8002362:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002366:	0299      	lsls	r1, r3, #10
 8002368:	460b      	mov	r3, r1
 800236a:	4614      	mov	r4, r2
 800236c:	4618      	mov	r0, r3
 800236e:	4621      	mov	r1, r4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	461a      	mov	r2, r3
 8002378:	4623      	mov	r3, r4
 800237a:	f7fd ff79 	bl	8000270 <__aeabi_uldivmod>
 800237e:	4603      	mov	r3, r0
 8002380:	460c      	mov	r4, r1
 8002382:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	3301      	adds	r3, #1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	60bb      	str	r3, [r7, #8]
      break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023a2:	60bb      	str	r3, [r7, #8]
      break;
 80023a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a6:	68bb      	ldr	r3, [r7, #8]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000008 	.word	0x20000008

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4601      	mov	r1, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4a03      	ldr	r2, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08007230 	.word	0x08007230

080023fc <app_main>:

/*--------------------------------------------------------------------------*/
/* function definition (public/exported)                                    */
/*--------------------------------------------------------------------------*/
void app_main(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
	lcsa_errorcode_t err = LCSA_ERROR_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	80fb      	strh	r3, [r7, #6]

	err = app_init();
 8002406:	f000 f81d 	bl	8002444 <app_init>
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
	printf("\napp init: %04X", err);
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	4619      	mov	r1, r3
 8002412:	480a      	ldr	r0, [pc, #40]	; (800243c <app_main+0x40>)
 8002414:	f003 ffcc 	bl	80063b0 <iprintf>

	if (err == LCSA_ERROR_OK)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d108      	bne.n	8002430 <app_main+0x34>
	{
		err = app_start();
 800241e:	f000 f839 	bl	8002494 <app_start>
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
		printf("\napp start: %04X", err);
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	4619      	mov	r1, r3
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <app_main+0x44>)
 800242c:	f003 ffc0 	bl	80063b0 <iprintf>
	}

	(void) lcsa_start();
 8002430:	f001 fc6a 	bl	8003d08 <lcsa_start>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	080071e0 	.word	0x080071e0
 8002440:	080071f0 	.word	0x080071f0

08002444 <app_init>:

lcsa_errorcode_t app_init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
	lcsa_bdr_t baudrate;
	lcsa_errorcode_t err = LCSA_ERROR_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	80fb      	strh	r3, [r7, #6]
	lcsa_errorcode_t err2 = LCSA_ERROR_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	80bb      	strh	r3, [r7, #4]
#ifdef LI_CAN_SLV_RECONNECT_STARTUP_CHANGE_BAUDRATE_CBK
	lcsa_reconnect_set_startup_change_baudrate_start_cbk(reconnect_startup_change_baudrate_start);
	lcsa_reconnect_set_startup_change_baudrate_stop_cbk(reconnect_startup_change_baudrate_stop);
#endif

	(void)lcsa_sync_set_first_process_request_cbk(first_process_req_callback);
 8002452:	480d      	ldr	r0, [pc, #52]	; (8002488 <app_init+0x44>)
 8002454:	f003 fa0a 	bl	800586c <can_sync_set_first_process_request_call_fnc>
	(void)lcsa_sync_set_whole_process_image_valid_cbk(process_req_whole_image_ok_callback);
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <app_init+0x48>)
 800245a:	f003 f9f7 	bl	800584c <can_sync_set_pr_call_fnc>
#endif

	/* read baudrate, and module numbers from eeprom, flash or file_sytem or use fixed values */

	// baudrate = LCSA_BAUD_RATE_125K;
	baudrate = LCSA_BAUD_RATE_250K;
 800245e:	23fa      	movs	r3, #250	; 0xfa
 8002460:	807b      	strh	r3, [r7, #2]
	// baudrate = LCSA_BAUD_RATE_1M;
#ifdef APP_MA_W
	module_number = APP_MA_W_MODULE_NR_DEF;
#endif

	err = lcsa_init(baudrate);
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fc3d 	bl	8003ce4 <lcsa_init>
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
	if (err != LCSA_ERROR_OK)
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <app_init+0x3a>
	{
		printf("\nlcsa_init err:%08x", err);
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	4619      	mov	r1, r3
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <app_init+0x4c>)
 800247a:	f003 ff99 	bl	80063b0 <iprintf>
#endif
			}
		}
	}
#endif // #ifdef APP_MA_W
	return LCSA_ERROR_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	080024a5 	.word	0x080024a5
 800248c:	080024b3 	.word	0x080024b3
 8002490:	08007204 	.word	0x08007204

08002494 <app_start>:

lcsa_errorcode_t app_start(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
	return LCSA_ERROR_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <first_process_req_callback>:
#endif
}
#endif /* #ifdef LI_CAN_SLV_RECONNECT_STARTUP_CHANGE_BAUDRATE_CBK */

static void first_process_req_callback(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
#ifdef APP_DEBUG
	printf("\nfirst_process_req");
#endif
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <process_req_whole_image_ok_callback>:

static void process_req_whole_image_ok_callback(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
#ifdef APP_DEBUG
	printf("\nprocess req whole image okay");
#endif
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c4:	f7fe f854 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c8:	f000 f80a 	bl	80024e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024cc:	f000 f8da 	bl	8002684 <MX_GPIO_Init>
  MX_CAN1_Init();
 80024d0:	f000 f870 	bl	80025b4 <MX_CAN1_Init>
  MX_CAN2_Init();
 80024d4:	f000 f8a2 	bl	800261c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 80024d8:	f7ff ff90 	bl	80023fc <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <main+0x1c>
	...

080024e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b094      	sub	sp, #80	; 0x50
 80024e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e6:	f107 0320 	add.w	r3, r7, #32
 80024ea:	2230      	movs	r2, #48	; 0x30
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 ff55 	bl	800639e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <SystemClock_Config+0xcc>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <SystemClock_Config+0xcc>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	; 0x40
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <SystemClock_Config+0xcc>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <SystemClock_Config+0xd0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <SystemClock_Config+0xd0>)
 800252a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <SystemClock_Config+0xd0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800253c:	2301      	movs	r3, #1
 800253e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002546:	2302      	movs	r3, #2
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800254a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002550:	2308      	movs	r3, #8
 8002552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002554:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002558:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800255a:	2302      	movs	r3, #2
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800255e:	2307      	movs	r3, #7
 8002560:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002562:	f107 0320 	add.w	r3, r7, #32
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fb2c 	bl	8001bc4 <HAL_RCC_OscConfig>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002572:	f000 f917 	bl	80027a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002576:	230f      	movs	r3, #15
 8002578:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800257a:	2302      	movs	r3, #2
 800257c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002582:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	2105      	movs	r1, #5
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fd57 	bl	8002048 <HAL_RCC_ClockConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025a0:	f000 f900 	bl	80027a4 <Error_Handler>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3750      	adds	r7, #80	; 0x50
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40007000 	.word	0x40007000

080025b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <MX_CAN1_Init+0x60>)
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <MX_CAN1_Init+0x64>)
 80025bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MX_CAN1_Init+0x60>)
 80025c0:	2210      	movs	r2, #16
 80025c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <MX_CAN1_Init+0x60>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_CAN1_Init+0x60>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <MX_CAN1_Init+0x60>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_CAN1_Init+0x60>)
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <MX_CAN1_Init+0x60>)
 80025de:	2200      	movs	r2, #0
 80025e0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_CAN1_Init+0x60>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MX_CAN1_Init+0x60>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_CAN1_Init+0x60>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_CAN1_Init+0x60>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_CAN1_Init+0x60>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_CAN1_Init+0x60>)
 8002602:	f7fe f827 	bl	8000654 <HAL_CAN_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800260c:	f000 f8ca 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000734 	.word	0x20000734
 8002618:	40006400 	.word	0x40006400

0800261c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <MX_CAN2_Init+0x60>)
 8002622:	4a17      	ldr	r2, [pc, #92]	; (8002680 <MX_CAN2_Init+0x64>)
 8002624:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <MX_CAN2_Init+0x60>)
 8002628:	2210      	movs	r2, #16
 800262a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <MX_CAN2_Init+0x60>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <MX_CAN2_Init+0x60>)
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <MX_CAN2_Init+0x60>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <MX_CAN2_Init+0x60>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <MX_CAN2_Init+0x60>)
 8002646:	2200      	movs	r2, #0
 8002648:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_CAN2_Init+0x60>)
 800264c:	2200      	movs	r2, #0
 800264e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <MX_CAN2_Init+0x60>)
 8002652:	2200      	movs	r2, #0
 8002654:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_CAN2_Init+0x60>)
 8002658:	2200      	movs	r2, #0
 800265a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <MX_CAN2_Init+0x60>)
 800265e:	2200      	movs	r2, #0
 8002660:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_CAN2_Init+0x60>)
 8002664:	2200      	movs	r2, #0
 8002666:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002668:	4804      	ldr	r0, [pc, #16]	; (800267c <MX_CAN2_Init+0x60>)
 800266a:	f7fd fff3 	bl	8000654 <HAL_CAN_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8002674:	f000 f896 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000070c 	.word	0x2000070c
 8002680:	40006800 	.word	0x40006800

08002684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a3b      	ldr	r2, [pc, #236]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b35      	ldr	r3, [pc, #212]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a34      	ldr	r2, [pc, #208]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b27      	ldr	r3, [pc, #156]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a26      	ldr	r2, [pc, #152]	; (8002790 <MX_GPIO_Init+0x10c>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <MX_GPIO_Init+0x10c>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <MX_GPIO_Init+0x10c>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <MX_GPIO_Init+0x10c>)
 8002714:	f043 0308 	orr.w	r3, r3, #8
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <MX_GPIO_Init+0x10c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800272c:	4819      	ldr	r0, [pc, #100]	; (8002794 <MX_GPIO_Init+0x110>)
 800272e:	f7ff fa2f 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <MX_GPIO_Init+0x114>)
 8002738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	4815      	ldr	r0, [pc, #84]	; (800279c <MX_GPIO_Init+0x118>)
 8002746:	f7fe ff8f 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800274a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	480c      	ldr	r0, [pc, #48]	; (8002794 <MX_GPIO_Init+0x110>)
 8002764:	f7fe ff80 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002768:	23c0      	movs	r3, #192	; 0xc0
 800276a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002778:	2308      	movs	r3, #8
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	4807      	ldr	r0, [pc, #28]	; (80027a0 <MX_GPIO_Init+0x11c>)
 8002784:	f7fe ff70 	bl	8001668 <HAL_GPIO_Init>

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	40020c00 	.word	0x40020c00
 8002798:	10120000 	.word	0x10120000
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020800 	.word	0x40020800

080027a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_MspInit+0x4c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <HAL_MspInit+0x4c>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_MspInit+0x4c>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_MspInit+0x4c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_MspInit+0x4c>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_MspInit+0x4c>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027f2:	2007      	movs	r0, #7
 80027f4:	f7fe fee8 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800

08002804 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a4e      	ldr	r2, [pc, #312]	; (800295c <HAL_CAN_MspInit+0x158>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d14d      	bne.n	80028c2 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002826:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <HAL_CAN_MspInit+0x15c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a4c      	ldr	r2, [pc, #304]	; (8002960 <HAL_CAN_MspInit+0x15c>)
 800282e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002830:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_CAN_MspInit+0x15c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10d      	bne.n	8002854 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	4b49      	ldr	r3, [pc, #292]	; (8002964 <HAL_CAN_MspInit+0x160>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a48      	ldr	r2, [pc, #288]	; (8002964 <HAL_CAN_MspInit+0x160>)
 8002842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_CAN_MspInit+0x160>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_CAN_MspInit+0x160>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a41      	ldr	r2, [pc, #260]	; (8002964 <HAL_CAN_MspInit+0x160>)
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_CAN_MspInit+0x160>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002870:	2303      	movs	r3, #3
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002880:	2309      	movs	r3, #9
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	4837      	ldr	r0, [pc, #220]	; (8002968 <HAL_CAN_MspInit+0x164>)
 800288c:	f7fe feec 	bl	8001668 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2100      	movs	r1, #0
 8002894:	2013      	movs	r0, #19
 8002896:	f7fe fea2 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800289a:	2013      	movs	r0, #19
 800289c:	f7fe febb 	bl	8001616 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	2014      	movs	r0, #20
 80028a6:	f7fe fe9a 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80028aa:	2014      	movs	r0, #20
 80028ac:	f7fe feb3 	bl	8001616 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	2015      	movs	r0, #21
 80028b6:	f7fe fe92 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80028ba:	2015      	movs	r0, #21
 80028bc:	f7fe feab 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80028c0:	e048      	b.n	8002954 <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a29      	ldr	r2, [pc, #164]	; (800296c <HAL_CAN_MspInit+0x168>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d143      	bne.n	8002954 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <HAL_CAN_MspInit+0x160>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	4a23      	ldr	r2, [pc, #140]	; (8002964 <HAL_CAN_MspInit+0x160>)
 80028d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028da:	6413      	str	r3, [r2, #64]	; 0x40
 80028dc:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_CAN_MspInit+0x160>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_CAN_MspInit+0x15c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <HAL_CAN_MspInit+0x15c>)
 80028f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_CAN_MspInit+0x15c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d10d      	bne.n	8002916 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_CAN_MspInit+0x160>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_CAN_MspInit+0x160>)
 8002904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_CAN_MspInit+0x160>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_CAN_MspInit+0x160>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_CAN_MspInit+0x160>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_CAN_MspInit+0x160>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002932:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002944:	2309      	movs	r3, #9
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4808      	ldr	r0, [pc, #32]	; (8002970 <HAL_CAN_MspInit+0x16c>)
 8002950:	f7fe fe8a 	bl	8001668 <HAL_GPIO_Init>
}
 8002954:	bf00      	nop
 8002956:	3730      	adds	r7, #48	; 0x30
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40006400 	.word	0x40006400
 8002960:	200001c4 	.word	0x200001c4
 8002964:	40023800 	.word	0x40023800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40006800 	.word	0x40006800
 8002970:	40020400 	.word	0x40020400

08002974 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <HAL_CAN_MspDeInit+0x94>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11c      	bne.n	80029c0 <HAL_CAN_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_CAN1_CLK_ENABLED--;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_CAN_MspDeInit+0x98>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3b01      	subs	r3, #1
 800298c:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <HAL_CAN_MspDeInit+0x98>)
 800298e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 8002990:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <HAL_CAN_MspDeInit+0x98>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_CAN_MspDeInit+0x30>
      __HAL_RCC_CAN1_CLK_DISABLE();
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_CAN_MspDeInit+0x9c>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <HAL_CAN_MspDeInit+0x9c>)
 800299e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 80029a4:	2103      	movs	r1, #3
 80029a6:	481b      	ldr	r0, [pc, #108]	; (8002a14 <HAL_CAN_MspDeInit+0xa0>)
 80029a8:	f7fe fff8 	bl	800199c <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 80029ac:	2013      	movs	r0, #19
 80029ae:	f7fe fe40 	bl	8001632 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 80029b2:	2014      	movs	r0, #20
 80029b4:	f7fe fe3d 	bl	8001632 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 80029b8:	2015      	movs	r0, #21
 80029ba:	f7fe fe3a 	bl	8001632 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN2_MspDeInit 1 */

  /* USER CODE END CAN2_MspDeInit 1 */
  }

}
 80029be:	e01e      	b.n	80029fe <HAL_CAN_MspDeInit+0x8a>
  else if(hcan->Instance==CAN2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <HAL_CAN_MspDeInit+0xa4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d119      	bne.n	80029fe <HAL_CAN_MspDeInit+0x8a>
    __HAL_RCC_CAN2_CLK_DISABLE();
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_CAN_MspDeInit+0x9c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_CAN_MspDeInit+0x9c>)
 80029d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED--;
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_CAN_MspDeInit+0x98>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3b01      	subs	r3, #1
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <HAL_CAN_MspDeInit+0x98>)
 80029de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_CAN_MspDeInit+0x98>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_CAN_MspDeInit+0x80>
      __HAL_RCC_CAN1_CLK_DISABLE();
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_CAN_MspDeInit+0x9c>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_CAN_MspDeInit+0x9c>)
 80029ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 80029f4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80029f8:	4808      	ldr	r0, [pc, #32]	; (8002a1c <HAL_CAN_MspDeInit+0xa8>)
 80029fa:	f7fe ffcf 	bl	800199c <HAL_GPIO_DeInit>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40006400 	.word	0x40006400
 8002a0c:	200001c4 	.word	0x200001c4
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40006800 	.word	0x40006800
 8002a1c:	40020400 	.word	0x40020400

08002a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a32:	e7fe      	b.n	8002a32 <HardFault_Handler+0x4>

08002a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <MemManage_Handler+0x4>

08002a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <BusFault_Handler+0x4>

08002a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <UsageFault_Handler+0x4>

08002a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a74:	f7fd fdce 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <CAN1_TX_IRQHandler+0x10>)
 8002a82:	f7fe faad 	bl	8000fe0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000734 	.word	0x20000734

08002a90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <CAN1_RX0_IRQHandler+0x10>)
 8002a96:	f7fe faa3 	bl	8000fe0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000734 	.word	0x20000734

08002aa4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <CAN1_RX1_IRQHandler+0x10>)
 8002aaa:	f7fe fa99 	bl	8000fe0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000734 	.word	0x20000734

08002ab8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	e00a      	b.n	8002ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aca:	f3af 8000 	nop.w
 8002ace:	4601      	mov	r1, r0
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	60ba      	str	r2, [r7, #8]
 8002ad6:	b2ca      	uxtb	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	dbf0      	blt.n	8002aca <_read+0x12>
	}

return len;
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e009      	b.n	8002b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	60ba      	str	r2, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	dbf1      	blt.n	8002b04 <_write+0x12>
	}
	return len;
 8002b20:	687b      	ldr	r3, [r7, #4]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_close>:

int _close(int file)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	return -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b52:	605a      	str	r2, [r3, #4]
	return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_isatty>:

int _isatty(int file)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
	return 1;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <_sbrk+0x50>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <_sbrk+0x16>
		heap_end = &end;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <_sbrk+0x50>)
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <_sbrk+0x54>)
 8002ba8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <_sbrk+0x50>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <_sbrk+0x50>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	466a      	mov	r2, sp
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d907      	bls.n	8002bce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bbe:	f003 fbb9 	bl	8006334 <__errno>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	e006      	b.n	8002bdc <_sbrk+0x48>
	}

	heap_end += incr;
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <_sbrk+0x50>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <_sbrk+0x50>)
 8002bd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200001c8 	.word	0x200001c8
 8002be8:	20000768 	.word	0x20000768

08002bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <SystemInit+0x60>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	4a15      	ldr	r2, [pc, #84]	; (8002c4c <SystemInit+0x60>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <SystemInit+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <SystemInit+0x64>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <SystemInit+0x64>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <SystemInit+0x64>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <SystemInit+0x64>)
 8002c18:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <SystemInit+0x64>)
 8002c24:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <SystemInit+0x68>)
 8002c26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <SystemInit+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <SystemInit+0x64>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <SystemInit+0x64>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <SystemInit+0x60>)
 8002c3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c40:	609a      	str	r2, [r3, #8]
#endif
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00
 8002c50:	40023800 	.word	0x40023800
 8002c54:	24003010 	.word	0x24003010

08002c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c5e:	e003      	b.n	8002c68 <LoopCopyDataInit>

08002c60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c66:	3104      	adds	r1, #4

08002c68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c68:	480b      	ldr	r0, [pc, #44]	; (8002c98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c70:	d3f6      	bcc.n	8002c60 <CopyDataInit>
  ldr  r2, =_sbss
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c74:	e002      	b.n	8002c7c <LoopFillZerobss>

08002c76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c78:	f842 3b04 	str.w	r3, [r2], #4

08002c7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c80:	d3f9      	bcc.n	8002c76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c82:	f7ff ffb3 	bl	8002bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c86:	f003 fb5b 	bl	8006340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c8a:	f7ff fc19 	bl	80024c0 <main>
  bx  lr    
 8002c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c90:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8002c94:	080075a8 	.word	0x080075a8
  ldr  r0, =_sdata
 8002c98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c9c:	200001a8 	.word	0x200001a8
  ldr  r2, =_sbss
 8002ca0:	200001a8 	.word	0x200001a8
  ldr  r3, = _ebss
 8002ca4:	20000764 	.word	0x20000764

08002ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca8:	e7fe      	b.n	8002ca8 <ADC_IRQHandler>

08002caa <CpFifoDataInPtr>:
//----------------------------------------------------------------------------//
// CpFifoDataInPtr()                                                          //
//                                                                            //
//----------------------------------------------------------------------------//
CPP_INLINE CpCanMsg_ts *CpFifoDataInPtr(CpFifo_ts *ptsFifoV)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
   //----------------------------------------------------------------
   // allow pointer arithmetic here, because index is limited
   // by element ulIndexMax
   //
   /*@ -ptrarith  -dependenttrans -usereleased -compdef           @*/
   return ((ptsFifoV->ptsCanMsg) + (ptsFifoV->ulIndexIn));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6919      	ldr	r1, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
   /*@ +ptrarith  +dependenttrans +usereleased +compdef           @*/

}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <CpFifoDataOutPtr>:
//----------------------------------------------------------------------------//
// CpFifoDataOutPtr()                                                         //
//                                                                            //
//----------------------------------------------------------------------------//
CPP_INLINE CpCanMsg_ts *CpFifoDataOutPtr(CpFifo_ts *ptsFifoV)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
   //----------------------------------------------------------------
   // allow pointer arithmetic here, because index is limited
   // by element ulIndexMax
   //
   /*@ -ptrarith  -dependenttrans -usereleased -compdef           @*/
   return ((ptsFifoV->ptsCanMsg) + (ptsFifoV->ulIndexOut));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6919      	ldr	r1, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
   /*@ +ptrarith  +dependenttrans +usereleased +compdef           @*/

}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <CpFifoIncIn>:
//----------------------------------------------------------------------------//
// CpFifoIncIn()                                                              //
//                                                                            //
//----------------------------------------------------------------------------//
CPP_INLINE void CpFifoIncIn(CpFifo_ts *ptsFifoV)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   ptsFifoV->ulIndexIn++;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	601a      	str	r2, [r3, #0]
   if ((ptsFifoV->ulIndexIn) >= (ptsFifoV->ulIndexMax))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <CpFifoIncIn+0x24>
   {
      ptsFifoV->ulIndexIn = 0;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
   }
   if (ptsFifoV->ulIndexIn == ptsFifoV->ulIndexOut)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d102      	bne.n	8002d2c <CpFifoIncIn+0x36>
   {
      // set state to full
      ptsFifoV->ulState = 0x02;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	60da      	str	r2, [r3, #12]
   }

   // clear empty state
   ptsFifoV->ulState &= ~0x01;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f023 0201 	bic.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <CpFifoIncOut>:
//----------------------------------------------------------------------------//
// CpFifoIncOut()                                                             //
//                                                                            //
//----------------------------------------------------------------------------//
CPP_INLINE void CpFifoIncOut(CpFifo_ts *ptsFifoV)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
   ptsFifoV->ulIndexOut++;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	605a      	str	r2, [r3, #4]
   if ((ptsFifoV->ulIndexOut) >= (ptsFifoV->ulIndexMax))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <CpFifoIncOut+0x24>
   {
      ptsFifoV->ulIndexOut = 0;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	605a      	str	r2, [r3, #4]
   }

   if (ptsFifoV->ulIndexIn == ptsFifoV->ulIndexOut)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d102      	bne.n	8002d7a <CpFifoIncOut+0x36>
   {
      // set empty state
      ptsFifoV->ulState = 0x01;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	60da      	str	r2, [r3, #12]
   }
   // clear full state
   ptsFifoV->ulState &= ~0x02;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f023 0202 	bic.w	r2, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60da      	str	r2, [r3, #12]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <CpFifoIsEmpty>:
//----------------------------------------------------------------------------//
// CpFifoIsEmpty()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
CPP_INLINE bool_t CpFifoIsEmpty(CpFifo_ts *ptsFifoV)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
   bool_t btResultT = false;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]

   if (ptsFifoV->ulState == 0x0001)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <CpFifoIsEmpty+0x18>
   {
      btResultT = true;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
   }

   return (btResultT);
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <CpFifoIsFull>:
//----------------------------------------------------------------------------//
// CpFifoIsFull()                                                             //
//                                                                            //
//----------------------------------------------------------------------------//
CPP_INLINE bool_t CpFifoIsFull(CpFifo_ts *ptsFifoV)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
   bool_t btResultT = false;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]

   if (ptsFifoV->ulState == 0x0002)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d101      	bne.n	8002dd0 <CpFifoIsFull+0x18>
   {
      btResultT = true;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
   }

   return (btResultT);
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]

}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <CheckParam>:
/*----------------------------------------------------------------------------*\
** Function implementation                                                    **
 **                                                                            **
 \*----------------------------------------------------------------------------*/
static CpStatus_tv CheckParam(const CpPort_ts * ptsPortV, const uint8_t ubBufferIdxV, const uint8_t unReqStateV)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
 8002dea:	4613      	mov	r3, r2
 8002dec:	70bb      	strb	r3, [r7, #2]
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 8002dee:	2328      	movs	r3, #40	; 0x28
 8002df0:	73fb      	strb	r3, [r7, #15]

	//----------------------------------------------------------------
	// test CAN port
	//
	if (ptsPortV != (CpPort_ts *) 0L)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <CheckParam+0x36>
	{
		tvStatusT = eCP_ERR_INIT_MISSING;
 8002df8:	2305      	movs	r3, #5
 8002dfa:	73fb      	strb	r3, [r7, #15]

		//--------------------------------------------------------
		// check for initialization
		//
		if (ptsPortV->ubDrvInfo >= unReqStateV)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	789b      	ldrb	r3, [r3, #2]
 8002e00:	78ba      	ldrb	r2, [r7, #2]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d806      	bhi.n	8002e14 <CheckParam+0x36>
		{
			tvStatusT = eCP_ERR_BUFFER;
 8002e06:	232b      	movs	r3, #43	; 0x2b
 8002e08:	73fb      	strb	r3, [r7, #15]

			//------------------------------------------------
			// check for valid buffer number
			//
			if (ubBufferIdxV < CP_BUFFER_MAX)
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	2b1f      	cmp	r3, #31
 8002e0e:	d801      	bhi.n	8002e14 <CheckParam+0x36>
			{
				tvStatusT = eCP_ERR_NONE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return (tvStatusT);
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <CpCoreBitrate>:
//----------------------------------------------------------------------------//
// CpCoreBitrate()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBitrate(CpPort_ts * ptsPortV, int32_t slNomBitRateV, int32_t slDatBitRateV)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
	uint32_t pclk;
	const struct hal_baudrate *p_hal_baudrate;
	const struct hal_baudrate *p_hal_end;
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 8002e30:	2328      	movs	r3, #40	; 0x28
 8002e32:	75fb      	strb	r3, [r7, #23]

	//----------------------------------------------------------------
	// test CAN port
	//
	if (ptsPortV != (CpPort_ts *) 0L)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d07f      	beq.n	8002f3a <CpCoreBitrate+0x116>
	{
		if (ptsPortV->ubDrvInfo > eDRV_INFO_OFF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	789b      	ldrb	r3, [r3, #2]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d079      	beq.n	8002f36 <CpCoreBitrate+0x112>
		{
			tvStatusT = eCP_ERR_NONE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	75fb      	strb	r3, [r7, #23]

			//-----------------------------------------------------
			// test bit-rate
			//
			if ((slNomBitRateV > eCP_BITRATE_1M) || (slNomBitRateV == eCP_BITRATE_NONE))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	dc03      	bgt.n	8002e54 <CpCoreBitrate+0x30>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d101      	bne.n	8002e58 <CpCoreBitrate+0x34>
			{
				tvStatusT = eCP_ERR_BITRATE;
 8002e54:	232a      	movs	r3, #42	; 0x2a
 8002e56:	75fb      	strb	r3, [r7, #23]
			}
			if ((slDatBitRateV != eCP_BITRATE_NONE) && (slNomBitRateV > slDatBitRateV))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d005      	beq.n	8002e6c <CpCoreBitrate+0x48>
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	dd01      	ble.n	8002e6c <CpCoreBitrate+0x48>
			{
				tvStatusT = eCP_ERR_BITRATE;
 8002e68:	232a      	movs	r3, #42	; 0x2a
 8002e6a:	75fb      	strb	r3, [r7, #23]
			}

			//-----------------------------------------------------
			// configure the btr register here
			//
			if (tvStatusT == eCP_ERR_NONE)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d163      	bne.n	8002f3a <CpCoreBitrate+0x116>
			{
				pclk = HAL_RCC_GetPCLK1Freq();
 8002e72:	f7ff faaf 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8002e76:	6138      	str	r0, [r7, #16]

				switch (pclk)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4a32      	ldr	r2, [pc, #200]	; (8002f44 <CpCoreBitrate+0x120>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d017      	beq.n	8002eb0 <CpCoreBitrate+0x8c>
 8002e80:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <CpCoreBitrate+0x120>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d806      	bhi.n	8002e94 <CpCoreBitrate+0x70>
 8002e86:	4a30      	ldr	r2, [pc, #192]	; (8002f48 <CpCoreBitrate+0x124>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00a      	beq.n	8002ea2 <CpCoreBitrate+0x7e>
 8002e8c:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <CpCoreBitrate+0x128>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <CpCoreBitrate+0x82>
 8002e92:	e01c      	b.n	8002ece <CpCoreBitrate+0xaa>
 8002e94:	4a2e      	ldr	r2, [pc, #184]	; (8002f50 <CpCoreBitrate+0x12c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00f      	beq.n	8002eba <CpCoreBitrate+0x96>
 8002e9a:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <CpCoreBitrate+0x130>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d011      	beq.n	8002ec4 <CpCoreBitrate+0xa0>
 8002ea0:	e015      	b.n	8002ece <CpCoreBitrate+0xaa>
				{
					case 21000000:
						return (eCP_ERR_NOT_SUPPORTED);
 8002ea2:	2332      	movs	r3, #50	; 0x32
 8002ea4:	e04a      	b.n	8002f3c <CpCoreBitrate+0x118>
						break;

					case 36000000:
						p_hal_baudrate = hal_baudrate_timing_36mhz;
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <CpCoreBitrate+0x134>)
 8002ea8:	61fb      	str	r3, [r7, #28]
						p_hal_end = hal_baudrate_timing_36mhz + sizeof(hal_baudrate_timing_36mhz) / sizeof(hal_baudrate_timing_36mhz[0]);
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <CpCoreBitrate+0x138>)
 8002eac:	61bb      	str	r3, [r7, #24]
						break;
 8002eae:	e010      	b.n	8002ed2 <CpCoreBitrate+0xae>

					case 40000000:
						p_hal_baudrate = hal_baudrate_timing_40mhz;
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <CpCoreBitrate+0x13c>)
 8002eb2:	61fb      	str	r3, [r7, #28]
						p_hal_end = hal_baudrate_timing_40mhz + sizeof(hal_baudrate_timing_40mhz) / sizeof(hal_baudrate_timing_40mhz[0]);
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <CpCoreBitrate+0x140>)
 8002eb6:	61bb      	str	r3, [r7, #24]
						break;
 8002eb8:	e00b      	b.n	8002ed2 <CpCoreBitrate+0xae>

					case 42000000:
						p_hal_baudrate = hal_baudrate_timing_42mhz;
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <CpCoreBitrate+0x144>)
 8002ebc:	61fb      	str	r3, [r7, #28]
						p_hal_end = hal_baudrate_timing_42mhz + sizeof(hal_baudrate_timing_42mhz) / sizeof(hal_baudrate_timing_42mhz[0]);
 8002ebe:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <CpCoreBitrate+0x148>)
 8002ec0:	61bb      	str	r3, [r7, #24]
						break;
 8002ec2:	e006      	b.n	8002ed2 <CpCoreBitrate+0xae>

					case 48000000:
						p_hal_baudrate = hal_baudrate_timing_48mhz;
 8002ec4:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <CpCoreBitrate+0x14c>)
 8002ec6:	61fb      	str	r3, [r7, #28]
						p_hal_end = hal_baudrate_timing_48mhz + sizeof(hal_baudrate_timing_48mhz) / sizeof(hal_baudrate_timing_48mhz[0]);
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <CpCoreBitrate+0x150>)
 8002eca:	61bb      	str	r3, [r7, #24]
						break;
 8002ecc:	e001      	b.n	8002ed2 <CpCoreBitrate+0xae>

					default:
						return (eCP_ERR_BITRATE);
 8002ece:	232a      	movs	r3, #42	; 0x2a
 8002ed0:	e034      	b.n	8002f3c <CpCoreBitrate+0x118>
						break;
				}

				while (p_hal_baudrate < p_hal_end)
 8002ed2:	e02b      	b.n	8002f2c <CpCoreBitrate+0x108>
				{
					if (p_hal_baudrate->bitrate == slNomBitRateV)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d121      	bne.n	8002f26 <CpCoreBitrate+0x102>
					{
						HCAN1.Init.Prescaler = p_hal_baudrate->prescaler;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <CpCoreBitrate+0x154>)
 8002ee8:	6053      	str	r3, [r2, #4]
						HCAN1.Init.SyncJumpWidth = p_hal_baudrate->sjw;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <CpCoreBitrate+0x154>)
 8002ef0:	60d3      	str	r3, [r2, #12]
						HCAN1.Init.TimeSeg1 = p_hal_baudrate->bs1;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <CpCoreBitrate+0x154>)
 8002ef8:	6113      	str	r3, [r2, #16]
						HCAN1.Init.TimeSeg2 = p_hal_baudrate->bs2;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <CpCoreBitrate+0x154>)
 8002f00:	6153      	str	r3, [r2, #20]

						if (HAL_CAN_DeInit(&HCAN1) != HAL_OK)
 8002f02:	481d      	ldr	r0, [pc, #116]	; (8002f78 <CpCoreBitrate+0x154>)
 8002f04:	f7fd fca1 	bl	800084a <HAL_CAN_DeInit>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <CpCoreBitrate+0xee>
						{
							return (eCP_ERR_BITRATE);
 8002f0e:	232a      	movs	r3, #42	; 0x2a
 8002f10:	e014      	b.n	8002f3c <CpCoreBitrate+0x118>
						}

						if (HAL_CAN_Init(&HCAN1) == HAL_OK)
 8002f12:	4819      	ldr	r0, [pc, #100]	; (8002f78 <CpCoreBitrate+0x154>)
 8002f14:	f7fd fb9e 	bl	8000654 <HAL_CAN_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <CpCoreBitrate+0xfe>
						{
							// Bitrate change works fine so return;
							return (eCP_ERR_NONE);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e00c      	b.n	8002f3c <CpCoreBitrate+0x118>
						}
						else
						{
							return (eCP_ERR_BITRATE);
 8002f22:	232a      	movs	r3, #42	; 0x2a
 8002f24:	e00a      	b.n	8002f3c <CpCoreBitrate+0x118>
						}
					}
					p_hal_baudrate++;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	61fb      	str	r3, [r7, #28]
				while (p_hal_baudrate < p_hal_end)
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d3cf      	bcc.n	8002ed4 <CpCoreBitrate+0xb0>
 8002f34:	e001      	b.n	8002f3a <CpCoreBitrate+0x116>
				}
			}
		}
		else
		{
			tvStatusT = eCP_ERR_INIT_MISSING;
 8002f36:	2305      	movs	r3, #5
 8002f38:	75fb      	strb	r3, [r7, #23]
		}
	}

	return (tvStatusT);
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	02625a00 	.word	0x02625a00
 8002f48:	01406f40 	.word	0x01406f40
 8002f4c:	02255100 	.word	0x02255100
 8002f50:	0280de80 	.word	0x0280de80
 8002f54:	02dc6c00 	.word	0x02dc6c00
 8002f58:	08007238 	.word	0x08007238
 8002f5c:	080072ec 	.word	0x080072ec
 8002f60:	080072ec 	.word	0x080072ec
 8002f64:	0800738c 	.word	0x0800738c
 8002f68:	0800738c 	.word	0x0800738c
 8002f6c:	0800742c 	.word	0x0800742c
 8002f70:	0800742c 	.word	0x0800742c
 8002f74:	080074e0 	.word	0x080074e0
 8002f78:	20000734 	.word	0x20000734

08002f7c <CpCoreBufferConfig>:
//----------------------------------------------------------------------------//
// CpCoreBufferConfig()                                                       //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferConfig(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV, uint32_t ulIdentifierV, uint32_t ulAcceptMaskV, uint8_t ubFormatV, uint8_t ubDirectionV)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4619      	mov	r1, r3
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7ff ff23 	bl	8002dde <CheckParam>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	75fb      	strb	r3, [r7, #23]
	if (tvStatusT == eCP_ERR_NONE)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d162      	bne.n	8003068 <CpCoreBufferConfig+0xec>
	{
		//--------------------------------------------------------
		// test message format and mask identifier
		//
		switch (ubFormatV & CP_MASK_MSG_FORMAT)
 8002fa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d81c      	bhi.n	8002fe8 <CpCoreBufferConfig+0x6c>
 8002fae:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <CpCoreBufferConfig+0x38>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08002fd7 	.word	0x08002fd7
 8002fbc:	08002fc5 	.word	0x08002fc5
 8002fc0:	08002fd7 	.word	0x08002fd7
		{
			case CP_MSG_FORMAT_CBFF:
			case CP_MSG_FORMAT_FBFF:
				ulIdentifierV = ulIdentifierV & CP_MASK_STD_FRAME;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fca:	607b      	str	r3, [r7, #4]
				ulAcceptMaskV = ulAcceptMaskV & CP_MASK_STD_FRAME;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fd2:	603b      	str	r3, [r7, #0]
				break;
 8002fd4:	e008      	b.n	8002fe8 <CpCoreBufferConfig+0x6c>

			case CP_MSG_FORMAT_CEFF:
			case CP_MSG_FORMAT_FEFF:
				ulIdentifierV = ulIdentifierV & CP_MASK_EXT_FRAME;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002fdc:	607b      	str	r3, [r7, #4]
				ulAcceptMaskV = ulAcceptMaskV & CP_MASK_EXT_FRAME;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002fe4:	603b      	str	r3, [r7, #0]
				break;
 8002fe6:	bf00      	nop
		}

		// save identifier
		atsCan1MsgS[ubBufferIdxV].ulIdentifier = ulIdentifierV;
 8002fe8:	7afa      	ldrb	r2, [r7, #11]
 8002fea:	4922      	ldr	r1, [pc, #136]	; (8003074 <CpCoreBufferConfig+0xf8>)
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	440b      	add	r3, r1
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	601a      	str	r2, [r3, #0]

		// save format in message control
		atsCan1MsgS[ubBufferIdxV].ubMsgCtrl = ubFormatV;
 8002ffa:	7afa      	ldrb	r2, [r7, #11]
 8002ffc:	491d      	ldr	r1, [pc, #116]	; (8003074 <CpCoreBufferConfig+0xf8>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	3311      	adds	r3, #17
 800300a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800300e:	701a      	strb	r2, [r3, #0]

		switch (ubDirectionV)
 8003010:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <CpCoreBufferConfig+0xa2>
 8003018:	2b01      	cmp	r3, #1
 800301a:	d019      	beq.n	8003050 <CpCoreBufferConfig+0xd4>
 800301c:	e024      	b.n	8003068 <CpCoreBufferConfig+0xec>
		{
			case eCP_BUFFER_DIR_RCV:
				atsCan1MsgS[ubBufferIdxV].ulMsgUser = CP_BUFFER_VAL | CP_BUFFER_RCV;
 800301e:	7afa      	ldrb	r2, [r7, #11]
 8003020:	4914      	ldr	r1, [pc, #80]	; (8003074 <CpCoreBufferConfig+0xf8>)
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	3314      	adds	r3, #20
 800302e:	2205      	movs	r2, #5
 8003030:	601a      	str	r2, [r3, #0]
				hal_status = can_filter_init(ubBufferIdxV, ulIdentifierV, ulAcceptMaskV, ubFormatV);
 8003032:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003036:	7af8      	ldrb	r0, [r7, #11]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	f000 fb7a 	bl	8003734 <can_filter_init>
 8003040:	4603      	mov	r3, r0
 8003042:	75bb      	strb	r3, [r7, #22]
				if (HAL_OK != hal_status)
 8003044:	7dbb      	ldrb	r3, [r7, #22]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <CpCoreBufferConfig+0xea>
				{
					tvStatusT = eCP_ERR_INIT_FAIL;
 800304a:	2303      	movs	r3, #3
 800304c:	75fb      	strb	r3, [r7, #23]
				}
				break;
 800304e:	e00a      	b.n	8003066 <CpCoreBufferConfig+0xea>

			case eCP_BUFFER_DIR_TRM:
				atsCan1MsgS[ubBufferIdxV].ulMsgUser = CP_BUFFER_VAL | CP_BUFFER_TRM;
 8003050:	7afa      	ldrb	r2, [r7, #11]
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <CpCoreBufferConfig+0xf8>)
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	3314      	adds	r3, #20
 8003060:	2203      	movs	r2, #3
 8003062:	601a      	str	r2, [r3, #0]
				break;
 8003064:	e000      	b.n	8003068 <CpCoreBufferConfig+0xec>
				break;
 8003066:	bf00      	nop
		}
	}

	return (tvStatusT);
 8003068:	7dfb      	ldrb	r3, [r7, #23]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200001f0 	.word	0x200001f0

08003078 <CpCoreBufferGetData>:
//----------------------------------------------------------------------------//
// CpCoreBufferGetData()                                                      //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferGetData(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV, uint8_t * pubDestDataV, uint8_t ubStartPosV, uint8_t ubSizeV)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	460b      	mov	r3, r1
 8003086:	72fb      	strb	r3, [r7, #11]
 8003088:	4613      	mov	r3, r2
 800308a:	72bb      	strb	r3, [r7, #10]
	uint8_t ubCntT;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	2201      	movs	r2, #1
 8003090:	4619      	mov	r1, r3
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff fea3 	bl	8002dde <CheckParam>
 8003098:	4603      	mov	r3, r0
 800309a:	75fb      	strb	r3, [r7, #23]
	if (tvStatusT == eCP_ERR_NONE)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d123      	bne.n	80030ea <CpCoreBufferGetData+0x72>
	{
		//--------------------------------------------------------
		// test start position and size
		//
		if ((ubStartPosV + ubSizeV) > CP_DATA_SIZE)
 80030a2:	7aba      	ldrb	r2, [r7, #10]
 80030a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030a8:	4413      	add	r3, r2
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	dd02      	ble.n	80030b4 <CpCoreBufferGetData+0x3c>
		{
			tvStatusT = eCP_ERR_PARAM;
 80030ae:	232c      	movs	r3, #44	; 0x2c
 80030b0:	75fb      	strb	r3, [r7, #23]
 80030b2:	e01a      	b.n	80030ea <CpCoreBufferGetData+0x72>
		else
		{
			//---------------------------------------------------
			// copy data from simulated CAN buffer
			//
			for (ubCntT = ubStartPosV; ubCntT < ubSizeV; ubCntT++)
 80030b4:	7abb      	ldrb	r3, [r7, #10]
 80030b6:	75bb      	strb	r3, [r7, #22]
 80030b8:	e012      	b.n	80030e0 <CpCoreBufferGetData+0x68>
			{
				*pubDestDataV = CpMsgGetData(&atsCan1MsgS[ubBufferIdxV], ubCntT);
 80030ba:	7afa      	ldrb	r2, [r7, #11]
 80030bc:	7db9      	ldrb	r1, [r7, #22]
 80030be:	480d      	ldr	r0, [pc, #52]	; (80030f4 <CpCoreBufferGetData+0x7c>)
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4403      	add	r3, r0
 80030ca:	440b      	add	r3, r1
 80030cc:	3308      	adds	r3, #8
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	701a      	strb	r2, [r3, #0]
				pubDestDataV++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3301      	adds	r3, #1
 80030d8:	607b      	str	r3, [r7, #4]
			for (ubCntT = ubStartPosV; ubCntT < ubSizeV; ubCntT++)
 80030da:	7dbb      	ldrb	r3, [r7, #22]
 80030dc:	3301      	adds	r3, #1
 80030de:	75bb      	strb	r3, [r7, #22]
 80030e0:	7dba      	ldrb	r2, [r7, #22]
 80030e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3e7      	bcc.n	80030ba <CpCoreBufferGetData+0x42>
			}
		}
	}

	return (tvStatusT);
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	200001f0 	.word	0x200001f0

080030f8 <CpCoreBufferGetDlc>:
//----------------------------------------------------------------------------//
// CpCoreBufferGetDlc()                                                       //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferGetDlc(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV, uint8_t * pubDlcV)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	460b      	mov	r3, r1
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	72fb      	strb	r3, [r7, #11]
	CpStatus_tv tvStatusT;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	2201      	movs	r2, #1
 800310a:	4619      	mov	r1, r3
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff fe66 	bl	8002dde <CheckParam>
 8003112:	4603      	mov	r3, r0
 8003114:	75fb      	strb	r3, [r7, #23]
	if (tvStatusT == eCP_ERR_NONE)
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <CpCoreBufferGetDlc+0x3a>
	{
		//----------------------------------------------------------------
		// read DLC from simulated CAN buffer
		//
		*pubDlcV = atsCan1MsgS[ubBufferIdxV].ubMsgDLC;
 800311c:	7afa      	ldrb	r2, [r7, #11]
 800311e:	4907      	ldr	r1, [pc, #28]	; (800313c <CpCoreBufferGetDlc+0x44>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	3310      	adds	r3, #16
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	701a      	strb	r2, [r3, #0]
	}

	return (tvStatusT);
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200001f0 	.word	0x200001f0

08003140 <CpCoreBufferRelease>:
//----------------------------------------------------------------------------//
// CpCoreBufferRelease()                                                      //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferRelease(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
	CpStatus_tv tvStatusT;
	HAL_StatusTypeDef hal_status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
	uint8_t filter_number;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	2201      	movs	r2, #1
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fe41 	bl	8002dde <CheckParam>
 800315c:	4603      	mov	r3, r0
 800315e:	73bb      	strb	r3, [r7, #14]
	if (tvStatusT == eCP_ERR_NONE)
 8003160:	7bbb      	ldrb	r3, [r7, #14]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d12e      	bne.n	80031c4 <CpCoreBufferRelease+0x84>
	{
		// release filter

		// check if the buffer is already defined to a filter
		status = search_for_already_defined_filter(ubBufferIdxV, &filter_number);
 8003166:	f107 020c 	add.w	r2, r7, #12
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fabc 	bl	80036ec <search_for_already_defined_filter>
 8003174:	4603      	mov	r3, r0
 8003176:	737b      	strb	r3, [r7, #13]
		// if (eCP_ERR_INIT_FAIL == status)
		// {
		// there is no filter assigned to this buffer so do nothing
		// }

		if (eCP_ERR_NONE == status)
 8003178:	7b7b      	ldrb	r3, [r7, #13]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <CpCoreBufferRelease+0x58>
		{
			// clear filter
			hal_status = can_filter_config(0, 0, 0, filter_number, CAN_RX_FIFO0, 0);
 800317e:	7b3a      	ldrb	r2, [r7, #12]
 8003180:	2300      	movs	r3, #0
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	2000      	movs	r0, #0
 8003190:	f000 fa42 	bl	8003618 <can_filter_config>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
		}

		// clear buffer
		memset(&atsCan1MsgS[ubBufferIdxV], 0x00, sizeof(CpCanMsg_ts));
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <CpCoreBufferRelease+0x98>)
 80031a4:	4413      	add	r3, r2
 80031a6:	2218      	movs	r2, #24
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 f8f7 	bl	800639e <memset>

		// set buffer to invalid
		atsCan1MsgS[ubBufferIdxV].ulMsgUser = CP_BUFFER_IVAL;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	4909      	ldr	r1, [pc, #36]	; (80031d8 <CpCoreBufferRelease+0x98>)
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	3314      	adds	r3, #20
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
	}

	if (HAL_OK != hal_status)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <CpCoreBufferRelease+0x8e>
	{
		return eCP_ERR_INIT_FAIL;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e000      	b.n	80031d0 <CpCoreBufferRelease+0x90>
	}

	return (tvStatusT);
 80031ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200001f0 	.word	0x200001f0

080031dc <CpCoreBufferSend>:
//----------------------------------------------------------------------------//
// CpCoreBufferSend()                                                         //
// send message out of the CAN controller                                     //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferSend(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
	CAN_TxHeaderTypeDef tx_header;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	2201      	movs	r2, #1
 80031ec:	4619      	mov	r1, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fdf5 	bl	8002dde <CheckParam>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//	if((atsCan1MsgS[ubBufferIdxV].ulMsgUser & (CP_BUFFER_VAL | CP_BUFFER_TRM)) != (CP_BUFFER_VAL | CP_BUFFER_TRM))
//	{
//		return eCP_ERR_BUFFER;
//	}

	if (tvStatusT == eCP_ERR_NONE)
 80031fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 8081 	bne.w	8003306 <CpCoreBufferSend+0x12a>
	{
		//-----------------------------------------------------------------
		// setup identifier
		//
		if (CpMsgIsExtended(&atsCan1MsgS[ubBufferIdxV]))
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	4943      	ldr	r1, [pc, #268]	; (8003314 <CpCoreBufferSend+0x138>)
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	3311      	adds	r3, #17
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <CpCoreBufferSend+0x5a>
		{
			tx_header.ExtId = atsCan1MsgS[ubBufferIdxV].ulIdentifier;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	493c      	ldr	r1, [pc, #240]	; (8003314 <CpCoreBufferSend+0x138>)
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]
			tx_header.IDE = CAN_ID_EXT;
 8003230:	2304      	movs	r3, #4
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e00a      	b.n	800324c <CpCoreBufferSend+0x70>
		}
		else
		{
			tx_header.StdId = atsCan1MsgS[ubBufferIdxV].ulIdentifier;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4936      	ldr	r1, [pc, #216]	; (8003314 <CpCoreBufferSend+0x138>)
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60bb      	str	r3, [r7, #8]
			tx_header.IDE = CAN_ID_STD;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
		}

		//-----------------------------------------------------------------
		// check for RTR bit
		//
		if (CpMsgIsRemote(&atsCan1MsgS[ubBufferIdxV]))
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	4931      	ldr	r1, [pc, #196]	; (8003314 <CpCoreBufferSend+0x138>)
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	3311      	adds	r3, #17
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <CpCoreBufferSend+0x90>
		{
			tx_header.RTR = CAN_RTR_REMOTE;
 8003266:	2302      	movs	r3, #2
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e001      	b.n	8003270 <CpCoreBufferSend+0x94>
		}
		else
		{
			tx_header.RTR = CAN_RTR_DATA;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
		}

		tx_header.DLC = atsCan1MsgS[ubBufferIdxV].ubMsgDLC;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	4928      	ldr	r1, [pc, #160]	; (8003314 <CpCoreBufferSend+0x138>)
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3310      	adds	r3, #16
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	773b      	strb	r3, [r7, #28]

		if (HAL_CAN_AddTxMessage(&HCAN1, &tx_header, &atsCan1MsgS[ubBufferIdxV].tuMsgData.aubByte[0], &tx_mailbox) != HAL_OK)
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	3308      	adds	r3, #8
 8003294:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <CpCoreBufferSend+0x138>)
 8003296:	441a      	add	r2, r3
 8003298:	f107 0320 	add.w	r3, r7, #32
 800329c:	f107 0108 	add.w	r1, r7, #8
 80032a0:	481d      	ldr	r0, [pc, #116]	; (8003318 <CpCoreBufferSend+0x13c>)
 80032a2:	f7fd fc62 	bl	8000b6a <HAL_CAN_AddTxMessage>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d015      	beq.n	80032d8 <CpCoreBufferSend+0xfc>
			//---------------------------------------------------
			// mark this buffer for transmission,
			// the transmission will be done in the CAN Tx
			// interrupt
			//
			atsCan1MsgS[ubBufferIdxV].ulMsgUser |= CP_BUFFER_PND;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	4919      	ldr	r1, [pc, #100]	; (8003314 <CpCoreBufferSend+0x138>)
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	3314      	adds	r3, #20
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	f043 0120 	orr.w	r1, r3, #32
 80032c4:	4813      	ldr	r0, [pc, #76]	; (8003314 <CpCoreBufferSend+0x138>)
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4403      	add	r3, r0
 80032d0:	3314      	adds	r3, #20
 80032d2:	6019      	str	r1, [r3, #0]
			return eCP_ERR_TRM_FULL;
 80032d4:	2308      	movs	r3, #8
 80032d6:	e018      	b.n	800330a <CpCoreBufferSend+0x12e>
		}
		else
		{
			/* save which buffer was used for tx */
			switch (tx_mailbox)
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d006      	beq.n	80032ec <CpCoreBufferSend+0x110>
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d007      	beq.n	80032f2 <CpCoreBufferSend+0x116>
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d108      	bne.n	80032f8 <CpCoreBufferSend+0x11c>
			{
				case 1:
					tx_mailbox = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
					break;
 80032ea:	e007      	b.n	80032fc <CpCoreBufferSend+0x120>
				case 2:
					tx_mailbox = 1;
 80032ec:	2301      	movs	r3, #1
 80032ee:	623b      	str	r3, [r7, #32]
					break;
 80032f0:	e004      	b.n	80032fc <CpCoreBufferSend+0x120>
				case 4:
					tx_mailbox = 2;
 80032f2:	2302      	movs	r3, #2
 80032f4:	623b      	str	r3, [r7, #32]
					break;
 80032f6:	e001      	b.n	80032fc <CpCoreBufferSend+0x120>
				default:
					return eCP_ERR_GENERIC;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e006      	b.n	800330a <CpCoreBufferSend+0x12e>
					break;
			}

			tx_mailbox_to_buffer[tx_mailbox] = ubBufferIdxV;
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8003302:	4a06      	ldr	r2, [pc, #24]	; (800331c <CpCoreBufferSend+0x140>)
 8003304:	54d1      	strb	r1, [r2, r3]
		}
	}

	return (tvStatusT);
 8003306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800330a:	4618      	mov	r0, r3
 800330c:	3728      	adds	r7, #40	; 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200001f0 	.word	0x200001f0
 8003318:	20000734 	.word	0x20000734
 800331c:	200001dc 	.word	0x200001dc

08003320 <CpCoreBufferSetData>:
//----------------------------------------------------------------------------//
// CpCoreBufferSetData()                                                      //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferSetData(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV, uint8_t * pubSrcDataV, uint8_t ubStartPosV, uint8_t ubSizeV)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	460b      	mov	r3, r1
 800332e:	72fb      	strb	r3, [r7, #11]
 8003330:	4613      	mov	r3, r2
 8003332:	72bb      	strb	r3, [r7, #10]
	uint8_t ubCntT;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 8003334:	7afb      	ldrb	r3, [r7, #11]
 8003336:	2201      	movs	r2, #1
 8003338:	4619      	mov	r1, r3
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fd4f 	bl	8002dde <CheckParam>
 8003340:	4603      	mov	r3, r0
 8003342:	75fb      	strb	r3, [r7, #23]
	if (tvStatusT == eCP_ERR_NONE)
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d124      	bne.n	8003394 <CpCoreBufferSetData+0x74>
	{
		//--------------------------------------------------------
		// test start position and size
		//
		if ((ubStartPosV + ubSizeV) > CP_DATA_SIZE)
 800334a:	7aba      	ldrb	r2, [r7, #10]
 800334c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003350:	4413      	add	r3, r2
 8003352:	2b08      	cmp	r3, #8
 8003354:	dd02      	ble.n	800335c <CpCoreBufferSetData+0x3c>
		{
			tvStatusT = eCP_ERR_PARAM;
 8003356:	232c      	movs	r3, #44	; 0x2c
 8003358:	75fb      	strb	r3, [r7, #23]
 800335a:	e01b      	b.n	8003394 <CpCoreBufferSetData+0x74>
		else
		{
			//---------------------------------------------------
			// copy data from simulated CAN buffer
			//
			for (ubCntT = ubStartPosV; ubCntT < ubSizeV; ubCntT++)
 800335c:	7abb      	ldrb	r3, [r7, #10]
 800335e:	75bb      	strb	r3, [r7, #22]
 8003360:	e013      	b.n	800338a <CpCoreBufferSetData+0x6a>
			{
				// alternative way but maybe not so fast
				CpMsgSetData(&atsCan1MsgS[ubBufferIdxV], ubCntT, *pubSrcDataV);
 8003362:	7afa      	ldrb	r2, [r7, #11]
 8003364:	7db9      	ldrb	r1, [r7, #22]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	781c      	ldrb	r4, [r3, #0]
 800336a:	480d      	ldr	r0, [pc, #52]	; (80033a0 <CpCoreBufferSetData+0x80>)
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4403      	add	r3, r0
 8003376:	440b      	add	r3, r1
 8003378:	3308      	adds	r3, #8
 800337a:	4622      	mov	r2, r4
 800337c:	701a      	strb	r2, [r3, #0]
				//atsCan1MsgS[ubBufferIdxV].tuMsgData.aubByte[ubCntT] = *pubSrcDataV;
				pubSrcDataV++;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3301      	adds	r3, #1
 8003382:	607b      	str	r3, [r7, #4]
			for (ubCntT = ubStartPosV; ubCntT < ubSizeV; ubCntT++)
 8003384:	7dbb      	ldrb	r3, [r7, #22]
 8003386:	3301      	adds	r3, #1
 8003388:	75bb      	strb	r3, [r7, #22]
 800338a:	7dba      	ldrb	r2, [r7, #22]
 800338c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003390:	429a      	cmp	r2, r3
 8003392:	d3e6      	bcc.n	8003362 <CpCoreBufferSetData+0x42>
			}
		}
	}

	return (tvStatusT);
 8003394:	7dfb      	ldrb	r3, [r7, #23]
}
 8003396:	4618      	mov	r0, r3
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	bf00      	nop
 80033a0:	200001f0 	.word	0x200001f0

080033a4 <CpCoreBufferSetDlc>:
//----------------------------------------------------------------------------//
// CpCoreBufferSetDlc()                                                       //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferSetDlc(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV, uint8_t ubDlcV)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
 80033b0:	4613      	mov	r3, r2
 80033b2:	70bb      	strb	r3, [r7, #2]
	CpStatus_tv tvStatusT;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	2201      	movs	r2, #1
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fd0f 	bl	8002dde <CheckParam>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]
	if (tvStatusT == eCP_ERR_NONE)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <CpCoreBufferSetDlc+0x3a>
		//--------------------------------------------------------
		// write DLC to simulated CAN buffer
		//
		// alternative way but maybe not so fast
		// CpMsgSetDlc(atsCan1MsgS[ubBufferIdxV], ubDlcV);
		atsCan1MsgS[ubBufferIdxV].ubMsgDLC = ubDlcV;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	4906      	ldr	r1, [pc, #24]	; (80033e8 <CpCoreBufferSetDlc+0x44>)
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	3310      	adds	r3, #16
 80033da:	78ba      	ldrb	r2, [r7, #2]
 80033dc:	701a      	strb	r2, [r3, #0]
	}

	return (tvStatusT);
 80033de:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200001f0 	.word	0x200001f0

080033ec <CpCoreCanMode>:
//----------------------------------------------------------------------------//
// CpCoreCanMode()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreCanMode(CpPort_ts * ptsPortV, uint8_t ubModeV)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef hal_status1 = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef hal_status2 = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	737b      	strb	r3, [r7, #13]
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 8003404:	2328      	movs	r3, #40	; 0x28
 8003406:	733b      	strb	r3, [r7, #12]

	//----------------------------------------------------------------
	// test CAN port
	//
	if (ptsPortV != (CpPort_ts *) 0L)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d03c      	beq.n	8003488 <CpCoreCanMode+0x9c>
	{
		if (ptsPortV->ubDrvInfo > eDRV_INFO_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	789b      	ldrb	r3, [r3, #2]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d038      	beq.n	8003488 <CpCoreCanMode+0x9c>
		{
			tvStatusT = eCP_ERR_NONE;
 8003416:	2300      	movs	r3, #0
 8003418:	733b      	strb	r3, [r7, #12]
//----------------------------------------------------------------
// switch CAN controller into mode "ubModeV"
//
			switch (ubModeV)
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d010      	beq.n	8003442 <CpCoreCanMode+0x56>
 8003420:	2b02      	cmp	r3, #2
 8003422:	d01a      	beq.n	800345a <CpCoreCanMode+0x6e>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d12d      	bne.n	8003484 <CpCoreCanMode+0x98>
			{
				//--------------------------------------------------------
				// Stop the CAN controller (passive on the bus)
				//
				case eCP_MODE_STOP:
					hal_status = HAL_CAN_Stop(&HCAN1);
 8003428:	4820      	ldr	r0, [pc, #128]	; (80034ac <CpCoreCanMode+0xc0>)
 800342a:	f7fd fb55 	bl	8000ad8 <HAL_CAN_Stop>
 800342e:	4603      	mov	r3, r0
 8003430:	73fb      	strb	r3, [r7, #15]
					hal_status1 = HAL_CAN_DeactivateNotification(&HCAN1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING |  CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR);
 8003432:	f648 7113 	movw	r1, #36627	; 0x8f13
 8003436:	481d      	ldr	r0, [pc, #116]	; (80034ac <CpCoreCanMode+0xc0>)
 8003438:	f7fd fdab 	bl	8000f92 <HAL_CAN_DeactivateNotification>
 800343c:	4603      	mov	r3, r0
 800343e:	73bb      	strb	r3, [r7, #14]
					break;
 8003440:	e023      	b.n	800348a <CpCoreCanMode+0x9e>

					//--------------------------------------------------------
					// Start the CAN controller (active on the bus)
					//
				case eCP_MODE_START:
					hal_status = HAL_CAN_ActivateNotification(&HCAN1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
 8003442:	2113      	movs	r1, #19
 8003444:	4819      	ldr	r0, [pc, #100]	; (80034ac <CpCoreCanMode+0xc0>)
 8003446:	f7fd fd7e 	bl	8000f46 <HAL_CAN_ActivateNotification>
 800344a:	4603      	mov	r3, r0
 800344c:	73fb      	strb	r3, [r7, #15]
					hal_status1 = HAL_CAN_Start(&HCAN1);
 800344e:	4817      	ldr	r0, [pc, #92]	; (80034ac <CpCoreCanMode+0xc0>)
 8003450:	f7fd fafe 	bl	8000a50 <HAL_CAN_Start>
 8003454:	4603      	mov	r3, r0
 8003456:	73bb      	strb	r3, [r7, #14]
					break;
 8003458:	e017      	b.n	800348a <CpCoreCanMode+0x9e>

					//--------------------------------------------------------
					// Start the CAN controller (Listen-Only)
					//
				case eCP_MODE_LISTEN_ONLY:
					HCAN1.Init.Mode = CAN_MODE_SILENT;
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <CpCoreCanMode+0xc0>)
 800345c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003460:	609a      	str	r2, [r3, #8]
					hal_status = HAL_CAN_ActivateNotification(&HCAN1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
 8003462:	2113      	movs	r1, #19
 8003464:	4811      	ldr	r0, [pc, #68]	; (80034ac <CpCoreCanMode+0xc0>)
 8003466:	f7fd fd6e 	bl	8000f46 <HAL_CAN_ActivateNotification>
 800346a:	4603      	mov	r3, r0
 800346c:	73fb      	strb	r3, [r7, #15]
					hal_status1 = HAL_CAN_Init(&HCAN1);
 800346e:	480f      	ldr	r0, [pc, #60]	; (80034ac <CpCoreCanMode+0xc0>)
 8003470:	f7fd f8f0 	bl	8000654 <HAL_CAN_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	73bb      	strb	r3, [r7, #14]
					hal_status2 = HAL_CAN_Start(&HCAN1);
 8003478:	480c      	ldr	r0, [pc, #48]	; (80034ac <CpCoreCanMode+0xc0>)
 800347a:	f7fd fae9 	bl	8000a50 <HAL_CAN_Start>
 800347e:	4603      	mov	r3, r0
 8003480:	737b      	strb	r3, [r7, #13]

					break;
 8003482:	e002      	b.n	800348a <CpCoreCanMode+0x9e>

					//--------------------------------------------------------
					// Other modes are not supported
					//
				default:
					return (eCP_ERR_NOT_SUPPORTED);
 8003484:	2332      	movs	r3, #50	; 0x32
 8003486:	e00c      	b.n	80034a2 <CpCoreCanMode+0xb6>
					break;
			}
		}
 8003488:	bf00      	nop
	}

	if ((HAL_OK != hal_status) | (HAL_OK != hal_status1) | (HAL_OK != hal_status2))
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	4313      	orrs	r3, r2
 8003490:	b2da      	uxtb	r2, r3
 8003492:	7b7b      	ldrb	r3, [r7, #13]
 8003494:	4313      	orrs	r3, r2
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <CpCoreCanMode+0xb4>
	{
		return eCP_ERR_INIT_FAIL;
 800349c:	2303      	movs	r3, #3
 800349e:	e000      	b.n	80034a2 <CpCoreCanMode+0xb6>
	}

	return (tvStatusT);
 80034a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000734 	.word	0x20000734

080034b0 <CpCoreDriverInit>:
//----------------------------------------------------------------------------//
// CpCoreDriverInit()                                                         //
// init CAN controller                                                        //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreDriverInit(uint8_t ubPhyIfV, CpPort_ts * ptsPortV, uint8_t ubConfigV)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
 80034bc:	4613      	mov	r3, r2
 80034be:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 80034c0:	2328      	movs	r3, #40	; 0x28
 80034c2:	73bb      	strb	r3, [r7, #14]

	//----------------------------------------------------------------
	// test physical CAN channel
	//
	if (ubPhyIfV == eCP_CHANNEL_1)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d168      	bne.n	800359c <CpCoreDriverInit+0xec>
	{

#if CP_STATISTIC > 0
		tx1_counter = 0;
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <CpCoreDriverInit+0xf8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
		rx1_counter = 0;
 80034d0:	4b36      	ldr	r3, [pc, #216]	; (80035ac <CpCoreDriverInit+0xfc>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
		err1_counter = 0;
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <CpCoreDriverInit+0x100>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
#endif

		//--------------------------------------------------------
		// test CAN port
		//
		if (ptsPortV != (CpPort_ts *) 0L)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d05a      	beq.n	8003598 <CpCoreDriverInit+0xe8>
		{
			if (ptsPortV->ubDrvInfo == eDRV_INFO_OFF)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	789b      	ldrb	r3, [r3, #2]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d153      	bne.n	8003592 <CpCoreDriverInit+0xe2>
			{
				ptsPortV->ubPhyIf = eCP_CHANNEL_1;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
				ptsPortV->ubDrvInfo = eDRV_INFO_INIT;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2201      	movs	r2, #1
 80034f4:	709a      	strb	r2, [r3, #2]

				// save port
				aptsPortS[0] = ptsPortV;
 80034f6:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <CpCoreDriverInit+0x104>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6013      	str	r3, [r2, #0]
				//----------------------------------------------
				// hardware initialization
				//

				// clear filter to buffer mapping
				for (i = 0; i < MAX_CAN_FILTER_NUMBER; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e006      	b.n	8003510 <CpCoreDriverInit+0x60>
				{
					filter_to_cp_buffer[i] = BUFFER_NONE;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <CpCoreDriverInit+0x108>)
 8003506:	21ff      	movs	r1, #255	; 0xff
 8003508:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < MAX_CAN_FILTER_NUMBER; i++)
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	3301      	adds	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b0d      	cmp	r3, #13
 8003514:	d9f5      	bls.n	8003502 <CpCoreDriverInit+0x52>
				}

				// release all buffers and
				for (i = eCP_BUFFER_1; i < CP_BUFFER_MAX; i++)
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	e007      	b.n	800352c <CpCoreDriverInit+0x7c>
				{
					CpCoreBufferRelease(ptsPortV, i);
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	4619      	mov	r1, r3
 8003520:	6838      	ldr	r0, [r7, #0]
 8003522:	f7ff fe0d 	bl	8003140 <CpCoreBufferRelease>
				for (i = eCP_BUFFER_1; i < CP_BUFFER_MAX; i++)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	3301      	adds	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b1f      	cmp	r3, #31
 8003530:	d9f4      	bls.n	800351c <CpCoreDriverInit+0x6c>
				}

				for (i = 0; i < 3; i++)
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	e006      	b.n	8003546 <CpCoreDriverInit+0x96>
				{
					tx_mailbox_to_buffer[i] = BUFFER_NONE;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	4a20      	ldr	r2, [pc, #128]	; (80035bc <CpCoreDriverInit+0x10c>)
 800353c:	21ff      	movs	r1, #255	; 0xff
 800353e:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < 3; i++)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	3301      	adds	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d9f5      	bls.n	8003538 <CpCoreDriverInit+0x88>
				}

				HCAN1.Instance = CAN1;
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <CpCoreDriverInit+0x110>)
 800354e:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <CpCoreDriverInit+0x114>)
 8003550:	601a      	str	r2, [r3, #0]
//				HCAN1.Init.Prescaler = 16;
				HCAN1.Init.Mode = CAN_MODE_NORMAL;
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <CpCoreDriverInit+0x110>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
//				HCAN1.Init.SyncJumpWidth = CAN_SJW_1TQ;
//				HCAN1.Init.TimeSeg1 = CAN_BS1_1TQ;
//				HCAN1.Init.TimeSeg2 = CAN_BS2_1TQ;
				HCAN1.Init.TimeTriggeredMode = DISABLE;
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <CpCoreDriverInit+0x110>)
 800355a:	2200      	movs	r2, #0
 800355c:	761a      	strb	r2, [r3, #24]
				HCAN1.Init.AutoBusOff = DISABLE;
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <CpCoreDriverInit+0x110>)
 8003560:	2200      	movs	r2, #0
 8003562:	765a      	strb	r2, [r3, #25]
				HCAN1.Init.AutoWakeUp = DISABLE;
 8003564:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <CpCoreDriverInit+0x110>)
 8003566:	2200      	movs	r2, #0
 8003568:	769a      	strb	r2, [r3, #26]
				HCAN1.Init.AutoRetransmission = DISABLE;
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <CpCoreDriverInit+0x110>)
 800356c:	2200      	movs	r2, #0
 800356e:	76da      	strb	r2, [r3, #27]
				HCAN1.Init.ReceiveFifoLocked = DISABLE;
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <CpCoreDriverInit+0x110>)
 8003572:	2200      	movs	r2, #0
 8003574:	771a      	strb	r2, [r3, #28]
				HCAN1.Init.TransmitFifoPriority = DISABLE;
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <CpCoreDriverInit+0x110>)
 8003578:	2200      	movs	r2, #0
 800357a:	775a      	strb	r2, [r3, #29]
//				if (can_filter_clear_all() != eCP_ERR_NONE)
//				{
//					return (eCP_ERR_INIT_FAIL);
//				}

				if (HAL_CAN_Init(&HCAN1) != HAL_OK)
 800357c:	4810      	ldr	r0, [pc, #64]	; (80035c0 <CpCoreDriverInit+0x110>)
 800357e:	f7fd f869 	bl	8000654 <HAL_CAN_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <CpCoreDriverInit+0xdc>
				{
					return (eCP_ERR_INIT_FAIL);
 8003588:	2303      	movs	r3, #3
 800358a:	e008      	b.n	800359e <CpCoreDriverInit+0xee>
//				if (HAL_CAN_Start(&HCAN1) != HAL_OK)
//				{
//					return (eCP_ERR_INIT_FAIL);
//				}

				tvStatusT = eCP_ERR_NONE;
 800358c:	2300      	movs	r3, #0
 800358e:	73bb      	strb	r3, [r7, #14]
 8003590:	e004      	b.n	800359c <CpCoreDriverInit+0xec>
			else
			{
				//---------------------------------------------
				// already initialized
				//
				tvStatusT = eCP_ERR_INIT_FAIL;
 8003592:	2303      	movs	r3, #3
 8003594:	73bb      	strb	r3, [r7, #14]
 8003596:	e001      	b.n	800359c <CpCoreDriverInit+0xec>
		else
		{
			//-----------------------------------------------------
			// parameter ptsPortV is not correct
			//
			tvStatusT = eCP_ERR_PARAM;
 8003598:	232c      	movs	r3, #44	; 0x2c
 800359a:	73bb      	strb	r3, [r7, #14]
		}
	}

	return (tvStatusT);
 800359c:	7bbb      	ldrb	r3, [r7, #14]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200001e0 	.word	0x200001e0
 80035ac:	200001e4 	.word	0x200001e4
 80035b0:	200001e8 	.word	0x200001e8
 80035b4:	20000570 	.word	0x20000570
 80035b8:	200001cc 	.word	0x200001cc
 80035bc:	200001dc 	.word	0x200001dc
 80035c0:	20000734 	.word	0x20000734
 80035c4:	40006400 	.word	0x40006400

080035c8 <CpCoreIntFunctions>:
//----------------------------------------------------------------------------//
// CpCoreIntFunctions()                                                       //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreIntFunctions(CpPort_ts * ptsPortV, CpRcvHandler_Fn pfnRcvHandlerV, CpTrmHandler_Fn pfnTrmHandlerV, CpErrHandler_Fn pfnErrHandlerV)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 80035d6:	2328      	movs	r3, #40	; 0x28
 80035d8:	75fb      	strb	r3, [r7, #23]

	//----------------------------------------------------------------
	// test CAN port
	//
	if (ptsPortV != (CpPort_ts *) 0L)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <CpCoreIntFunctions+0x36>
	{
		if (ptsPortV->ubDrvInfo > eDRV_INFO_OFF)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	789b      	ldrb	r3, [r3, #2]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <CpCoreIntFunctions+0x36>
		{
			tvStatusT = eCP_ERR_NONE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]

			//-----------------------------------------------------
			// store the new callback
			//
			pfnRcvHandlerS = pfnRcvHandlerV;
 80035ec:	4a07      	ldr	r2, [pc, #28]	; (800360c <CpCoreIntFunctions+0x44>)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6013      	str	r3, [r2, #0]
			pfnTrmHandlerS = pfnTrmHandlerV;
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <CpCoreIntFunctions+0x48>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]
			pfnErrHandlerS = pfnErrHandlerV;
 80035f8:	4a06      	ldr	r2, [pc, #24]	; (8003614 <CpCoreIntFunctions+0x4c>)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6013      	str	r3, [r2, #0]
		}
	}

	return (tvStatusT);
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	20000574 	.word	0x20000574
 8003610:	20000578 	.word	0x20000578
 8003614:	2000057c 	.word	0x2000057c

08003618 <can_filter_config>:
 * @param filter_number
 * @param activate
 * @retval HAL status
 */
static HAL_StatusTypeDef can_filter_config(uint32_t ulIdentifierV, uint32_t ulAcceptMaskV, uint8_t ubFormatV, uint8_t filter_number, uint32_t fifo, bool_t activate)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08e      	sub	sp, #56	; 0x38
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	4611      	mov	r1, r2
 8003624:	461a      	mov	r2, r3
 8003626:	460b      	mov	r3, r1
 8003628:	71fb      	strb	r3, [r7, #7]
 800362a:	4613      	mov	r3, r2
 800362c:	71bb      	strb	r3, [r7, #6]
	CAN_FilterTypeDef filter_config;

	// config filter only use 32Bit
	filter_config.FilterBank = filter_number;
 800362e:	79bb      	ldrb	r3, [r7, #6]
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8003632:	2300      	movs	r3, #0
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8003636:	2301      	movs	r3, #1
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ubFormatV & CP_MASK_MSG_FORMAT) == CP_MSG_FORMAT_CBFF)
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <can_filter_config+0x42>
	{
		filter_config.FilterIdHigh = ulIdentifierV << 5;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	015b      	lsls	r3, r3, #5
 8003648:	613b      	str	r3, [r7, #16]
		filter_config.FilterIdLow = 0x0;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdHigh = ulAcceptMaskV << 5;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdLow = 0x0; // allows both remote and data frames
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e011      	b.n	800367e <can_filter_config+0x66>
	}
	else //  if((ubFormatV & CP_MSG_FORMAT_MASK) == CP_MSG_FORMAT_CEFF)
	{
		filter_config.FilterIdHigh = ulIdentifierV >> 13; // EXTID[28:13]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	0b5b      	lsrs	r3, r3, #13
 800365e:	613b      	str	r3, [r7, #16]
		filter_config.FilterIdLow = (0x00FF & (ulIdentifierV << 3)) | (1 << 2); // EXTID[12:0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdHigh = ulAcceptMaskV >> 13;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	0b5b      	lsrs	r3, r3, #13
 8003670:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdLow = (0x00FF & (ulAcceptMaskV << 3)) | (1 << 2);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	61fb      	str	r3, [r7, #28]
	}

	filter_config.FilterFIFOAssignment = fifo;
 800367e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003680:	623b      	str	r3, [r7, #32]
	filter_config.FilterActivation = activate;
 8003682:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
	filter_config.SlaveStartFilterBank = 14;
 8003688:	230e      	movs	r3, #14
 800368a:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(&HCAN1, &filter_config);
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	4619      	mov	r1, r3
 8003692:	4804      	ldr	r0, [pc, #16]	; (80036a4 <can_filter_config+0x8c>)
 8003694:	f7fd f8fc 	bl	8000890 <HAL_CAN_ConfigFilter>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3738      	adds	r7, #56	; 0x38
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000734 	.word	0x20000734

080036a8 <get_next_free_filter_number>:
/**
 * @param filter_number
 * @return Error code is defined by the #CpErr_e enumeration. If no error occurred, the function will return the value \c #eCP_ERR_NONE.
 */
static CpStatus_tv get_next_free_filter_number(uint8_t *filter_number)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < MAX_CAN_FILTER_NUMBER; ++i)
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e00d      	b.n	80036d2 <get_next_free_filter_number+0x2a>
	{
		if (filter_to_cp_buffer[i] == BUFFER_NONE)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <get_next_free_filter_number+0x40>)
 80036ba:	56d3      	ldrsb	r3, [r2, r3]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d104      	bne.n	80036cc <get_next_free_filter_number+0x24>
		{
			*filter_number = i;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	701a      	strb	r2, [r3, #0]
			return eCP_ERR_NONE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e006      	b.n	80036da <get_next_free_filter_number+0x32>
	for (i = 0; i < MAX_CAN_FILTER_NUMBER; ++i)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	3301      	adds	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b0d      	cmp	r3, #13
 80036d6:	d9ee      	bls.n	80036b6 <get_next_free_filter_number+0xe>
		}
	}

	return eCP_ERR_INIT_FAIL;
 80036d8:	2303      	movs	r3, #3
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200001cc 	.word	0x200001cc

080036ec <search_for_already_defined_filter>:
 * @param ubBufferIdxV
 * @param filter_number
 * @return Error code is defined by the #CpErr_e enumeration. If no error occurred, the function will return the value \c #eCP_ERR_NONE.
 */
static CpStatus_tv search_for_already_defined_filter(uint8_t ubBufferIdxV, uint8_t *filter_number)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < MAX_CAN_FILTER_NUMBER; ++i)
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e00e      	b.n	800371c <search_for_already_defined_filter+0x30>
	{
		if (filter_to_cp_buffer[i] == ubBufferIdxV)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <search_for_already_defined_filter+0x44>)
 8003702:	56d3      	ldrsb	r3, [r2, r3]
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d104      	bne.n	8003716 <search_for_already_defined_filter+0x2a>
		{
			*filter_number = i;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	701a      	strb	r2, [r3, #0]
			return eCP_ERR_NONE;
 8003712:	2300      	movs	r3, #0
 8003714:	e006      	b.n	8003724 <search_for_already_defined_filter+0x38>
	for (i = 0; i < MAX_CAN_FILTER_NUMBER; ++i)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	3301      	adds	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b0d      	cmp	r3, #13
 8003720:	d9ed      	bls.n	80036fe <search_for_already_defined_filter+0x12>
		}
	}

	return eCP_ERR_INIT_FAIL;
 8003722:	2303      	movs	r3, #3
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	200001cc 	.word	0x200001cc

08003734 <can_filter_init>:
 * @param ulAcceptMaskV
 * @param ubFormatV
 * @return Error code is defined by the #CpErr_e enumeration. If no error occurred, the function will return the value \c #eCP_ERR_NONE.
 */
static CpStatus_tv can_filter_init(uint8_t ubBufferIdxV, uint32_t ulIdentifierV, uint32_t ulAcceptMaskV, uint8_t ubFormatV)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af02      	add	r7, sp, #8
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	461a      	mov	r2, r3
 8003740:	4603      	mov	r3, r0
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	4613      	mov	r3, r2
 8003746:	73bb      	strb	r3, [r7, #14]
	uint8_t filter_number;
	HAL_StatusTypeDef hal_status;
	static uint32_t fifo_number = CAN_RX_FIFO0;

	// check if the buffer is already defined to a filter
	status = search_for_already_defined_filter(ubBufferIdxV, &filter_number);
 8003748:	f107 0215 	add.w	r2, r7, #21
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ffcb 	bl	80036ec <search_for_already_defined_filter>
 8003756:	4603      	mov	r3, r0
 8003758:	75fb      	strb	r3, [r7, #23]
	// it is not really nice but I use the status to check if a filter exists or not
	if (eCP_ERR_INIT_FAIL == status)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d106      	bne.n	800376e <can_filter_init+0x3a>
	{
		// there is no filter assigned to this buffer so get a free one
		status = get_next_free_filter_number(&filter_number);
 8003760:	f107 0315 	add.w	r3, r7, #21
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff9f 	bl	80036a8 <get_next_free_filter_number>
 800376a:	4603      	mov	r3, r0
 800376c:	75fb      	strb	r3, [r7, #23]
	}

	if (eCP_ERR_NONE == status)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d119      	bne.n	80037a8 <can_filter_init+0x74>
	{
		// save the buffer index on the filter to buffer table
		filter_to_cp_buffer[filter_number] = ubBufferIdxV;
 8003774:	7d7b      	ldrb	r3, [r7, #21]
 8003776:	461a      	mov	r2, r3
 8003778:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <can_filter_init+0x80>)
 800377e:	5499      	strb	r1, [r3, r2]

		// config filter
		hal_status = can_filter_config(ulIdentifierV, ulAcceptMaskV, ubFormatV, filter_number, fifo_number, 1);
 8003780:	7d78      	ldrb	r0, [r7, #21]
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <can_filter_init+0x84>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	7bb9      	ldrb	r1, [r7, #14]
 8003788:	2201      	movs	r2, #1
 800378a:	9201      	str	r2, [sp, #4]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4603      	mov	r3, r0
 8003790:	460a      	mov	r2, r1
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	68b8      	ldr	r0, [r7, #8]
 8003796:	f7ff ff3f 	bl	8003618 <can_filter_config>
 800379a:	4603      	mov	r3, r0
 800379c:	75bb      	strb	r3, [r7, #22]

		if (HAL_OK == hal_status)
 800379e:	7dbb      	ldrb	r3, [r7, #22]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <can_filter_init+0x74>
		{
			return eCP_ERR_NONE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <can_filter_init+0x76>
		}
	}

	return eCP_ERR_INIT_FAIL;
 80037a8:	2303      	movs	r3, #3
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200001cc 	.word	0x200001cc
 80037b8:	20000580 	.word	0x20000580

080037bc <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	int8_t canpie_buffer_number;
	CpFifo_ts *ptsFifoT;
	CpCanMsg_ts *ptsFifoMsgT;
	CpCanMsg_ts *ptsCanMsgT;

	canpie_buffer_number = tx_mailbox_to_buffer[TX_MAILBOX_0];
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_CAN_TxMailbox0CompleteCallback+0x118>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	75fb      	strb	r3, [r7, #23]
	//-----------------------------------------------------------------
	// get pointer to CAN buffer
	//
	if (canpie_buffer_number == BUFFER_NONE)
 80037ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d105      	bne.n	80037e0 <HAL_CAN_TxMailbox0CompleteCallback+0x24>
	{
#if CP_STATISTIC > 0
			err1_counter++;
 80037d4:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_CAN_TxMailbox0CompleteCallback+0x11c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <HAL_CAN_TxMailbox0CompleteCallback+0x11c>)
 80037dc:	6013      	str	r3, [r2, #0]
		return;
 80037de:	e075      	b.n	80038cc <HAL_CAN_TxMailbox0CompleteCallback+0x110>
#endif
	}

	ptsCanMsgT = &atsCan1MsgS[canpie_buffer_number];
 80037e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <HAL_CAN_TxMailbox0CompleteCallback+0x120>)
 80037ee:	4413      	add	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]

	if (aptsCan1FifoS[canpie_buffer_number] == 0L)
 80037f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037f6:	4a3a      	ldr	r2, [pc, #232]	; (80038e0 <HAL_CAN_TxMailbox0CompleteCallback+0x124>)
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d117      	bne.n	8003830 <HAL_CAN_TxMailbox0CompleteCallback+0x74>
	{
		if ((canpie_buffer_number != BUFFER_NONE) && (CPP_NULL != pfnTrmHandlerS))
 8003800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d033      	beq.n	8003872 <HAL_CAN_TxMailbox0CompleteCallback+0xb6>
 800380a:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_CAN_TxMailbox0CompleteCallback+0x128>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d02f      	beq.n	8003872 <HAL_CAN_TxMailbox0CompleteCallback+0xb6>
		{
			pfnTrmHandlerS(&atsCan1MsgS[canpie_buffer_number], canpie_buffer_number);
 8003812:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_CAN_TxMailbox0CompleteCallback+0x128>)
 8003814:	681c      	ldr	r4, [r3, #0]
 8003816:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4a2e      	ldr	r2, [pc, #184]	; (80038dc <HAL_CAN_TxMailbox0CompleteCallback+0x120>)
 8003824:	4413      	add	r3, r2
 8003826:	7dfa      	ldrb	r2, [r7, #23]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	47a0      	blx	r4
 800382e:	e020      	b.n	8003872 <HAL_CAN_TxMailbox0CompleteCallback+0xb6>
		}
	}
	else
	{
		ptsFifoT = aptsCan1FifoS[canpie_buffer_number];
 8003830:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003834:	4a2a      	ldr	r2, [pc, #168]	; (80038e0 <HAL_CAN_TxMailbox0CompleteCallback+0x124>)
 8003836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383a:	60fb      	str	r3, [r7, #12]
		if (CpFifoIsEmpty(ptsFifoT) == 0)
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff faa8 	bl	8002d92 <CpFifoIsEmpty>
 8003842:	4603      	mov	r3, r0
 8003844:	f083 0301 	eor.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d011      	beq.n	8003872 <HAL_CAN_TxMailbox0CompleteCallback+0xb6>
		{
			ptsFifoMsgT = CpFifoDataOutPtr(ptsFifoT);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fa3e 	bl	8002cd0 <CpFifoDataOutPtr>
 8003854:	60b8      	str	r0, [r7, #8]
			memcpy(ptsCanMsgT, ptsFifoMsgT, sizeof(CpCanMsg_ts));
 8003856:	2218      	movs	r2, #24
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	6938      	ldr	r0, [r7, #16]
 800385c:	f002 fd94 	bl	8006388 <memcpy>
			CpFifoIncOut(ptsFifoT);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff fa6f 	bl	8002d44 <CpFifoIncOut>
			ptsCanMsgT->ulMsgUser |= CP_BUFFER_PND;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f043 0220 	orr.w	r2, r3, #32
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	615a      	str	r2, [r3, #20]
		}
	}

	// clear mailbox buffer 0
	tx_mailbox_to_buffer[TX_MAILBOX_0] = BUFFER_NONE;
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_CAN_TxMailbox0CompleteCallback+0x118>)
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	701a      	strb	r2, [r3, #0]

	//-----------------------------------------------------------------
	// run through buffer list and test for open Tx requests
	//
	ptsCanMsgT = &atsCan1MsgS[0];
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <HAL_CAN_TxMailbox0CompleteCallback+0x120>)
 800387a:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 800387c:	2300      	movs	r3, #0
 800387e:	75fb      	strb	r3, [r7, #23]
 8003880:	e01b      	b.n	80038ba <HAL_CAN_TxMailbox0CompleteCallback+0xfe>
	{
		if (((ptsCanMsgT->ulMsgUser) & CP_BUFFER_PND))
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_CAN_TxMailbox0CompleteCallback+0xec>
		{
			ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f023 0220 	bic.w	r2, r3, #32
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	615a      	str	r2, [r3, #20]
			CpCoreBufferSend(aptsPortS[0], canpie_buffer_number);
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_CAN_TxMailbox0CompleteCallback+0x12c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	7dfa      	ldrb	r2, [r7, #23]
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fc9a 	bl	80031dc <CpCoreBufferSend>
		}
		ptsCanMsgT++;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	3318      	adds	r3, #24
 80038ac:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 80038ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	75fb      	strb	r3, [r7, #23]
 80038ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038be:	2b1f      	cmp	r3, #31
 80038c0:	dddf      	ble.n	8003882 <HAL_CAN_TxMailbox0CompleteCallback+0xc6>
	}

#if CP_STATISTIC > 0
	tx1_counter++;
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_CAN_TxMailbox0CompleteCallback+0x130>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3301      	adds	r3, #1
 80038c8:	4a08      	ldr	r2, [pc, #32]	; (80038ec <HAL_CAN_TxMailbox0CompleteCallback+0x130>)
 80038ca:	6013      	str	r3, [r2, #0]
#endif
}
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200001dc 	.word	0x200001dc
 80038d8:	200001e8 	.word	0x200001e8
 80038dc:	200001f0 	.word	0x200001f0
 80038e0:	200004f0 	.word	0x200004f0
 80038e4:	20000578 	.word	0x20000578
 80038e8:	20000570 	.word	0x20000570
 80038ec:	200001e0 	.word	0x200001e0

080038f0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	int8_t canpie_buffer_number;
	CpFifo_ts *ptsFifoT;
	CpCanMsg_ts *ptsFifoMsgT;
	CpCanMsg_ts *ptsCanMsgT;

	canpie_buffer_number = tx_mailbox_to_buffer[TX_MAILBOX_1];
 80038f8:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <HAL_CAN_TxMailbox1CompleteCallback+0x110>)
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	75fb      	strb	r3, [r7, #23]
	//-----------------------------------------------------------------
	// get pointer to CAN buffer
	//
	if (canpie_buffer_number == BUFFER_NONE)
 80038fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	d076      	beq.n	80039f6 <HAL_CAN_TxMailbox1CompleteCallback+0x106>
		printf("error should not happen");
#endif
		return;
	}

	ptsCanMsgT = &atsCan1MsgS[canpie_buffer_number];
 8003908:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4a3b      	ldr	r2, [pc, #236]	; (8003a04 <HAL_CAN_TxMailbox1CompleteCallback+0x114>)
 8003916:	4413      	add	r3, r2
 8003918:	613b      	str	r3, [r7, #16]

	if (aptsCan1FifoS[canpie_buffer_number] == 0L)
 800391a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800391e:	4a3a      	ldr	r2, [pc, #232]	; (8003a08 <HAL_CAN_TxMailbox1CompleteCallback+0x118>)
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d117      	bne.n	8003958 <HAL_CAN_TxMailbox1CompleteCallback+0x68>
	{
		if ((canpie_buffer_number != BUFFER_NONE) && (CPP_NULL != pfnTrmHandlerS))
 8003928:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d033      	beq.n	800399a <HAL_CAN_TxMailbox1CompleteCallback+0xaa>
 8003932:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <HAL_CAN_TxMailbox1CompleteCallback+0x11c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02f      	beq.n	800399a <HAL_CAN_TxMailbox1CompleteCallback+0xaa>
		{
			pfnTrmHandlerS(&atsCan1MsgS[canpie_buffer_number], canpie_buffer_number);
 800393a:	4b34      	ldr	r3, [pc, #208]	; (8003a0c <HAL_CAN_TxMailbox1CompleteCallback+0x11c>)
 800393c:	681c      	ldr	r4, [r3, #0]
 800393e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4a2e      	ldr	r2, [pc, #184]	; (8003a04 <HAL_CAN_TxMailbox1CompleteCallback+0x114>)
 800394c:	4413      	add	r3, r2
 800394e:	7dfa      	ldrb	r2, [r7, #23]
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	47a0      	blx	r4
 8003956:	e020      	b.n	800399a <HAL_CAN_TxMailbox1CompleteCallback+0xaa>
		}
	}
	else
	{
		ptsFifoT = aptsCan1FifoS[canpie_buffer_number];
 8003958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <HAL_CAN_TxMailbox1CompleteCallback+0x118>)
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	60fb      	str	r3, [r7, #12]
		if (CpFifoIsEmpty(ptsFifoT) == 0)
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fa14 	bl	8002d92 <CpFifoIsEmpty>
 800396a:	4603      	mov	r3, r0
 800396c:	f083 0301 	eor.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <HAL_CAN_TxMailbox1CompleteCallback+0xaa>
		{
			ptsFifoMsgT = CpFifoDataOutPtr(ptsFifoT);
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff f9aa 	bl	8002cd0 <CpFifoDataOutPtr>
 800397c:	60b8      	str	r0, [r7, #8]
			memcpy(ptsCanMsgT, ptsFifoMsgT, sizeof(CpCanMsg_ts));
 800397e:	2218      	movs	r2, #24
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	6938      	ldr	r0, [r7, #16]
 8003984:	f002 fd00 	bl	8006388 <memcpy>
			CpFifoIncOut(ptsFifoT);
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f7ff f9db 	bl	8002d44 <CpFifoIncOut>
			ptsCanMsgT->ulMsgUser |= CP_BUFFER_PND;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	615a      	str	r2, [r3, #20]
		}
	}

	// clear mailbox buffer 1
	tx_mailbox_to_buffer[TX_MAILBOX_1] = BUFFER_NONE;
 800399a:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_CAN_TxMailbox1CompleteCallback+0x110>)
 800399c:	22ff      	movs	r2, #255	; 0xff
 800399e:	705a      	strb	r2, [r3, #1]

	//-----------------------------------------------------------------
	// run through buffer list and test for open Tx requests
	//
	ptsCanMsgT = &atsCan1MsgS[0];
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_CAN_TxMailbox1CompleteCallback+0x114>)
 80039a2:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	75fb      	strb	r3, [r7, #23]
 80039a8:	e01b      	b.n	80039e2 <HAL_CAN_TxMailbox1CompleteCallback+0xf2>
	{
		if (((ptsCanMsgT->ulMsgUser) & CP_BUFFER_PND))
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <HAL_CAN_TxMailbox1CompleteCallback+0xe0>
		{
			ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f023 0220 	bic.w	r2, r3, #32
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	615a      	str	r2, [r3, #20]
			CpCoreBufferSend(aptsPortS[0], canpie_buffer_number);
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_CAN_TxMailbox1CompleteCallback+0x120>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	7dfa      	ldrb	r2, [r7, #23]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fc06 	bl	80031dc <CpCoreBufferSend>
		}
		ptsCanMsgT++;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	3318      	adds	r3, #24
 80039d4:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 80039d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	75fb      	strb	r3, [r7, #23]
 80039e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039e6:	2b1f      	cmp	r3, #31
 80039e8:	dddf      	ble.n	80039aa <HAL_CAN_TxMailbox1CompleteCallback+0xba>
	}

#if CP_STATISTIC > 0
	tx1_counter++;
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_CAN_TxMailbox1CompleteCallback+0x124>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <HAL_CAN_TxMailbox1CompleteCallback+0x124>)
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	e000      	b.n	80039f8 <HAL_CAN_TxMailbox1CompleteCallback+0x108>
		return;
 80039f6:	bf00      	nop
#endif
}
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200001dc 	.word	0x200001dc
 8003a04:	200001f0 	.word	0x200001f0
 8003a08:	200004f0 	.word	0x200004f0
 8003a0c:	20000578 	.word	0x20000578
 8003a10:	20000570 	.word	0x20000570
 8003a14:	200001e0 	.word	0x200001e0

08003a18 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	int8_t canpie_buffer_number;
	CpFifo_ts *ptsFifoT;
	CpCanMsg_ts *ptsFifoMsgT;
	CpCanMsg_ts *ptsCanMsgT;

	canpie_buffer_number = tx_mailbox_to_buffer[TX_MAILBOX_2];
 8003a20:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <HAL_CAN_TxMailbox2CompleteCallback+0x110>)
 8003a22:	789b      	ldrb	r3, [r3, #2]
 8003a24:	75fb      	strb	r3, [r7, #23]
	//-----------------------------------------------------------------
	// get pointer to CAN buffer
	//
	if (canpie_buffer_number == BUFFER_NONE)
 8003a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d076      	beq.n	8003b1e <HAL_CAN_TxMailbox2CompleteCallback+0x106>
		printf("error should not happen");
#endif
		return;
	}

	ptsCanMsgT = &atsCan1MsgS[canpie_buffer_number];
 8003a30:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4a3b      	ldr	r2, [pc, #236]	; (8003b2c <HAL_CAN_TxMailbox2CompleteCallback+0x114>)
 8003a3e:	4413      	add	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

	if (aptsCan1FifoS[canpie_buffer_number] == 0L)
 8003a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a46:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_CAN_TxMailbox2CompleteCallback+0x118>)
 8003a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d117      	bne.n	8003a80 <HAL_CAN_TxMailbox2CompleteCallback+0x68>
	{
		if ((canpie_buffer_number != BUFFER_NONE) && (CPP_NULL != pfnTrmHandlerS))
 8003a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d033      	beq.n	8003ac2 <HAL_CAN_TxMailbox2CompleteCallback+0xaa>
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <HAL_CAN_TxMailbox2CompleteCallback+0x11c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02f      	beq.n	8003ac2 <HAL_CAN_TxMailbox2CompleteCallback+0xaa>
		{
			pfnTrmHandlerS(&atsCan1MsgS[canpie_buffer_number], canpie_buffer_number);
 8003a62:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <HAL_CAN_TxMailbox2CompleteCallback+0x11c>)
 8003a64:	681c      	ldr	r4, [r3, #0]
 8003a66:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <HAL_CAN_TxMailbox2CompleteCallback+0x114>)
 8003a74:	4413      	add	r3, r2
 8003a76:	7dfa      	ldrb	r2, [r7, #23]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	47a0      	blx	r4
 8003a7e:	e020      	b.n	8003ac2 <HAL_CAN_TxMailbox2CompleteCallback+0xaa>
		}
	}
	else
	{
		ptsFifoT = aptsCan1FifoS[canpie_buffer_number];
 8003a80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a84:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <HAL_CAN_TxMailbox2CompleteCallback+0x118>)
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	60fb      	str	r3, [r7, #12]
		if (CpFifoIsEmpty(ptsFifoT) == 0)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff f980 	bl	8002d92 <CpFifoIsEmpty>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f083 0301 	eor.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d011      	beq.n	8003ac2 <HAL_CAN_TxMailbox2CompleteCallback+0xaa>
		{
			ptsFifoMsgT = CpFifoDataOutPtr(ptsFifoT);
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7ff f916 	bl	8002cd0 <CpFifoDataOutPtr>
 8003aa4:	60b8      	str	r0, [r7, #8]
			memcpy(ptsCanMsgT, ptsFifoMsgT, sizeof(CpCanMsg_ts));
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	6938      	ldr	r0, [r7, #16]
 8003aac:	f002 fc6c 	bl	8006388 <memcpy>
			CpFifoIncOut(ptsFifoT);
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff f947 	bl	8002d44 <CpFifoIncOut>
			ptsCanMsgT->ulMsgUser |= CP_BUFFER_PND;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f043 0220 	orr.w	r2, r3, #32
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	615a      	str	r2, [r3, #20]
		}
	}

	// clear mailbox buffer 2
	tx_mailbox_to_buffer[TX_MAILBOX_2] = BUFFER_NONE;
 8003ac2:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_CAN_TxMailbox2CompleteCallback+0x110>)
 8003ac4:	22ff      	movs	r2, #255	; 0xff
 8003ac6:	709a      	strb	r2, [r3, #2]

	//-----------------------------------------------------------------
	// run through buffer list and test for open Tx requests
	//
	ptsCanMsgT = &atsCan1MsgS[0];
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_CAN_TxMailbox2CompleteCallback+0x114>)
 8003aca:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	75fb      	strb	r3, [r7, #23]
 8003ad0:	e01b      	b.n	8003b0a <HAL_CAN_TxMailbox2CompleteCallback+0xf2>
	{
		if (((ptsCanMsgT->ulMsgUser) & CP_BUFFER_PND))
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_CAN_TxMailbox2CompleteCallback+0xe0>
		{
			ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f023 0220 	bic.w	r2, r3, #32
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	615a      	str	r2, [r3, #20]
			CpCoreBufferSend(aptsPortS[0], canpie_buffer_number);
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_CAN_TxMailbox2CompleteCallback+0x120>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	7dfa      	ldrb	r2, [r7, #23]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fb72 	bl	80031dc <CpCoreBufferSend>
		}
		ptsCanMsgT++;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	3318      	adds	r3, #24
 8003afc:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 8003afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	3301      	adds	r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	75fb      	strb	r3, [r7, #23]
 8003b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b0e:	2b1f      	cmp	r3, #31
 8003b10:	dddf      	ble.n	8003ad2 <HAL_CAN_TxMailbox2CompleteCallback+0xba>
	}

#if CP_STATISTIC > 0
	tx1_counter++;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_CAN_TxMailbox2CompleteCallback+0x124>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <HAL_CAN_TxMailbox2CompleteCallback+0x124>)
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e000      	b.n	8003b20 <HAL_CAN_TxMailbox2CompleteCallback+0x108>
		return;
 8003b1e:	bf00      	nop
#endif
}
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd90      	pop	{r4, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200001dc 	.word	0x200001dc
 8003b2c:	200001f0 	.word	0x200001f0
 8003b30:	200004f0 	.word	0x200004f0
 8003b34:	20000578 	.word	0x20000578
 8003b38:	20000570 	.word	0x20000570
 8003b3c:	200001e0 	.word	0x200001e0

08003b40 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b090      	sub	sp, #64	; 0x40
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	CpCanMsg_ts *ptsFifoMsgT;

	CAN_RxHeaderTypeDef header;
	uint8_t rx_data[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, rx_data);
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	f107 0214 	add.w	r2, r7, #20
 8003b50:	2100      	movs	r1, #0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd f8e4 	bl	8000d20 <HAL_CAN_GetRxMessage>

	canpie_buffer_number = filter_to_cp_buffer[header.FilterMatchIndex];
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	4a4a      	ldr	r2, [pc, #296]	; (8003c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8003b5c:	56d3      	ldrsb	r3, [r2, r3]
 8003b5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	pcan_msg = &atsCan1MsgS[canpie_buffer_number];
 8003b62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003b66:	4613      	mov	r3, r2
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4a46      	ldr	r2, [pc, #280]	; (8003c88 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8003b70:	4413      	add	r3, r2
 8003b72:	63bb      	str	r3, [r7, #56]	; 0x38

	if (header.IDE == CAN_ID_STD)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10c      	bne.n	8003b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
	{
		CpMsgSetStdId(pcan_msg, header.StdId);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	7c5b      	ldrb	r3, [r3, #17]
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	745a      	strb	r2, [r3, #17]
 8003b92:	e00b      	b.n	8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	}
	else
	{
		CpMsgSetExtId(pcan_msg, header.ExtId);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	7c5b      	ldrb	r3, [r3, #17]
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	745a      	strb	r2, [r3, #17]
	}

	if (header.RTR == CAN_RTR_REMOTE)
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d10d      	bne.n	8003bce <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
	{
		CpMsgSetRemote(pcan_msg);
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	7c5b      	ldrb	r3, [r3, #17]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10e      	bne.n	8003bdc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	7c5b      	ldrb	r3, [r3, #17]
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	745a      	strb	r2, [r3, #17]
 8003bcc:	e006      	b.n	8003bdc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
	}
	else
	{
		CpMsgClrRemote(pcan_msg);
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	7c5b      	ldrb	r3, [r3, #17]
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	745a      	strb	r2, [r3, #17]
	}

	CpMsgSetDlc(pcan_msg, header.DLC);
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	741a      	strb	r2, [r3, #16]

	pcan_msg->tuMsgData.aubByte[0] = rx_data[0];
 8003be4:	7b3a      	ldrb	r2, [r7, #12]
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	721a      	strb	r2, [r3, #8]
	pcan_msg->tuMsgData.aubByte[1] = rx_data[1];
 8003bea:	7b7a      	ldrb	r2, [r7, #13]
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	725a      	strb	r2, [r3, #9]
	pcan_msg->tuMsgData.aubByte[2] = rx_data[2];
 8003bf0:	7bba      	ldrb	r2, [r7, #14]
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	729a      	strb	r2, [r3, #10]
	pcan_msg->tuMsgData.aubByte[3] = rx_data[3];
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	72da      	strb	r2, [r3, #11]
	pcan_msg->tuMsgData.aubByte[4] = rx_data[4];
 8003bfc:	7c3a      	ldrb	r2, [r7, #16]
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	731a      	strb	r2, [r3, #12]
	pcan_msg->tuMsgData.aubByte[5] = rx_data[5];
 8003c02:	7c7a      	ldrb	r2, [r7, #17]
 8003c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c06:	735a      	strb	r2, [r3, #13]
	pcan_msg->tuMsgData.aubByte[6] = rx_data[6];
 8003c08:	7cba      	ldrb	r2, [r7, #18]
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	739a      	strb	r2, [r3, #14]
	pcan_msg->tuMsgData.aubByte[7] = rx_data[7];
 8003c0e:	7cfa      	ldrb	r2, [r7, #19]
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	73da      	strb	r2, [r3, #15]
	//pcan_msg->ulMsgUser = hcan->pRxMsg->FIFONumber;

	//-----------------------------------------------------------------
	// test for receive callback handler
	//
	if (aptsCan1FifoS[canpie_buffer_number] == 0L)
 8003c14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8003c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
	{
		if (CPP_NULL != pfnRcvHandlerS)
 8003c22:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d022      	beq.n	8003c70 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
		{
			pfnRcvHandlerS(pcan_msg, canpie_buffer_number);
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003c32:	4611      	mov	r1, r2
 8003c34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c36:	4798      	blx	r3
 8003c38:	e01a      	b.n	8003c70 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
		}
	}
	else
	{
		ptsFifoT = aptsCan1FifoS[canpie_buffer_number];
 8003c3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c3e:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8003c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
		if (CpFifoIsFull(ptsFifoT) == 0)
 8003c46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c48:	f7ff f8b6 	bl	8002db8 <CpFifoIsFull>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f083 0301 	eor.w	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
		{
			ptsFifoMsgT = CpFifoDataInPtr(ptsFifoT);
 8003c58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c5a:	f7ff f826 	bl	8002caa <CpFifoDataInPtr>
 8003c5e:	6338      	str	r0, [r7, #48]	; 0x30
			memcpy(ptsFifoMsgT, pcan_msg, sizeof(CpCanMsg_ts));
 8003c60:	2218      	movs	r2, #24
 8003c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c66:	f002 fb8f 	bl	8006388 <memcpy>
			CpFifoIncIn(ptsFifoT);
 8003c6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c6c:	f7ff f843 	bl	8002cf6 <CpFifoIncIn>
		}
	}

#if CP_STATISTIC > 0
	rx1_counter++;
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8003c78:	6013      	str	r3, [r2, #0]
#endif
}
 8003c7a:	bf00      	nop
 8003c7c:	3740      	adds	r7, #64	; 0x40
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200001cc 	.word	0x200001cc
 8003c88:	200001f0 	.word	0x200001f0
 8003c8c:	200004f0 	.word	0x200004f0
 8003c90:	20000574 	.word	0x20000574
 8003c94:	200001e4 	.word	0x200001e4

08003c98 <HAL_CAN_ErrorCallback>:
/**
 * @todo enable error callback for error counter
 * @param hcan
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	static CpState_ts state;
	/**@todo fill state */
#if CP_STATISTIC > 0
	err1_counter++;
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <HAL_CAN_ErrorCallback+0x40>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <HAL_CAN_ErrorCallback+0x40>)
 8003ca8:	6013      	str	r3, [r2, #0]
#endif
	/* Enable Error warning, Error passive, Bus-off, Last error and Error Interrupts and FIFO0, FIFO1 */
	__HAL_CAN_ENABLE_IT(hcan, CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_OVERRUN | CAN_IT_RX_FIFO0_MSG_PENDING| CAN_IT_RX_FIFO1_OVERRUN | CAN_IT_RX_FIFO1_MSG_PENDING);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 8003cb8:	f043 035b 	orr.w	r3, r3, #91	; 0x5b
 8003cbc:	6153      	str	r3, [r2, #20]

	if (CPP_NULL != pfnErrHandlerS)
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_CAN_ErrorCallback+0x44>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_CAN_ErrorCallback+0x36>
	{
		pfnErrHandlerS(&state);
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_CAN_ErrorCallback+0x44>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4805      	ldr	r0, [pc, #20]	; (8003ce0 <HAL_CAN_ErrorCallback+0x48>)
 8003ccc:	4798      	blx	r3
	}
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200001e8 	.word	0x200001e8
 8003cdc:	2000057c 	.word	0x2000057c
 8003ce0:	20000584 	.word	0x20000584

08003ce4 <lcsa_init>:

/*--------------------------------------------------------------------------*/
/* function definition (public/exported)                                    */
/*--------------------------------------------------------------------------*/
lcsa_errorcode_t lcsa_init(lcsa_bdr_t baudrate)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	80fb      	strh	r3, [r7, #6]
		baudrate = xload_info_baudrate;
	}
#endif // #ifdef LI_CAN_SLV_DLOAD
#endif // #ifndef LI_CAN_SLV_NO_XLOAD_INFO

	li_can_slv_set_mode(LI_CAN_SLV_MODE_OPERATIONAL);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f001 f8a2 	bl	8004e38 <li_can_slv_set_mode>
	return li_can_slv_init(baudrate);
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 ffc0 	bl	8004c7c <li_can_slv_init>
 8003cfc:	4603      	mov	r3, r0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <lcsa_start>:

#ifndef LI_CAN_SLV_BOOT
lcsa_errorcode_t lcsa_start(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
#ifdef LI_CAN_SLV_UNKNOWN_MODULE
	uint16_t module_nr;

	can_config_get_nr_of_modules(&module_nr);
 8003d0e:	1dbb      	adds	r3, r7, #6
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fd43 	bl	800479c <can_config_get_nr_of_modules>
	if (module_nr == 0)
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <lcsa_start+0x22>
	{
		can_config_add_ukwn_module(CAN_CONFIG_MODULE_TYPE_UNKNOWN, can_config_get_module_nr_main());
 8003d1c:	f000 fd32 	bl	8004784 <can_config_get_module_nr_main>
 8003d20:	4603      	mov	r3, r0
 8003d22:	4619      	mov	r1, r3
 8003d24:	4803      	ldr	r0, [pc, #12]	; (8003d34 <lcsa_start+0x2c>)
 8003d26:	f000 faf9 	bl	800431c <can_config_add_ukwn_module>
	}
#endif // #ifndef LI_CAN_SLV_NO_XLOAD_INFO
	lcsa_set_state(LI_CAN_SLV_STATE_RUNNING);
	return err;
#endif // #ifdef LI_CAN_SLV_DLOAD
	return LCSA_ERROR_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08007218 	.word	0x08007218

08003d38 <can_hw_init>:

/*--------------------------------------------------------------------------*/
/* function definition (public/exported)                                    */
/*--------------------------------------------------------------------------*/
li_can_slv_errorcode_t can_hw_init(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	return (LI_CAN_SLV_ERR_OK);
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <can_hw_transceiver_enable>:

li_can_slv_errorcode_t can_hw_transceiver_enable(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
	return (LI_CAN_SLV_ERR_OK);
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <can_hw_combine_msg_obj_to_two_stage_fifo>:
}
#endif // #ifdef LI_CAN_SLV_MAIN_MON

#if defined(OUTER) || defined(OUTER_APP)
li_can_slv_errorcode_t can_hw_combine_msg_obj_to_two_stage_fifo(uint16_t msg_obj, uint16_t msg_obj2)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	460a      	mov	r2, r1
 8003d62:	80fb      	strh	r3, [r7, #6]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80bb      	strh	r3, [r7, #4]
	/**
	 * @todo check if needed
	 */
	msg_obj = msg_obj;
	msg_obj2 = msg_obj2;
	return (LI_CAN_SLV_ERR_OK);
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <can_main_hw_init>:

/*--------------------------------------------------------------------------*/
/* function definition (private/not exported)                               */
/*--------------------------------------------------------------------------*/
li_can_slv_errorcode_t can_main_hw_init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
#if CP_VERSION_MAJOR <= 2
	CpCoreDriverInit(LI_CAN_SLV_MAIN_ARCH, &can_port_main);
#else // #if CP_VERSION_MAJOR <= 2
	CpCoreDriverInit(LI_CAN_SLV_MAIN_ARCH, &can_port_main, 0);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4906      	ldr	r1, [pc, #24]	; (8003d98 <can_main_hw_init+0x20>)
 8003d80:	2001      	movs	r0, #1
 8003d82:	f7ff fb95 	bl	80034b0 <CpCoreDriverInit>
#endif // #if CP_VERSION_MAJOR <= 2
	/* CpCoreIntFunctions(&can_port_main,  can_main_hw_handler_rx, can_main_hw_handler_tx, can_main_hw_handler_error); */
	CpCoreIntFunctions(&can_port_main, can_main_hw_handler_rx, can_main_hw_handler_tx, 0L);
 8003d86:	2300      	movs	r3, #0
 8003d88:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <can_main_hw_init+0x24>)
 8003d8a:	4905      	ldr	r1, [pc, #20]	; (8003da0 <can_main_hw_init+0x28>)
 8003d8c:	4802      	ldr	r0, [pc, #8]	; (8003d98 <can_main_hw_init+0x20>)
 8003d8e:	f7ff fc1b 	bl	80035c8 <CpCoreIntFunctions>

	return (LI_CAN_SLV_ERR_OK);
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	2000075c 	.word	0x2000075c
 8003d9c:	080040b5 	.word	0x080040b5
 8003da0:	08004065 	.word	0x08004065

08003da4 <can_main_hw_msg_obj_init>:

	return (LI_CAN_SLV_ERR_OK);
}

li_can_slv_errorcode_t can_main_hw_msg_obj_init(uint16_t msg_obj)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	80fb      	strh	r3, [r7, #6]
	msg_obj_used[msg_obj] = FALSE;
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <can_main_hw_msg_obj_init+0x28>)
 8003db2:	2100      	movs	r1, #0
 8003db4:	54d1      	strb	r1, [r2, r3]
	CpCoreBufferRelease(&can_port_main, msg_obj);
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4804      	ldr	r0, [pc, #16]	; (8003dd0 <can_main_hw_msg_obj_init+0x2c>)
 8003dbe:	f7ff f9bf 	bl	8003140 <CpCoreBufferRelease>

	return (LI_CAN_SLV_ERR_OK);
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000588 	.word	0x20000588
 8003dd0:	2000075c 	.word	0x2000075c

08003dd4 <can_main_hw_get_next_free_msg_obj>:
	return (LI_CAN_SLV_ERR_OK);
}
#endif // #if defined(OUTER) || defined(OUTER_APP)

li_can_slv_errorcode_t can_main_hw_get_next_free_msg_obj(uint16_t *msg_obj)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

#ifdef LI_CAN_SLV_DEBUG_CAN_INIT_HW
	LI_CAN_SLV_DEBUG_PRINT("\n\ncan_hw_get_nex_free_msg_obj");
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_INIT_HW

	for (i = 0; i < LI_CAN_SLV_MAIN_NODE_MAX_NOF_MSG_OBJ; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	81fb      	strh	r3, [r7, #14]
 8003de0:	e00c      	b.n	8003dfc <can_main_hw_get_next_free_msg_obj+0x28>
	{
		if (msg_obj_used[i] == FALSE)
 8003de2:	89fb      	ldrh	r3, [r7, #14]
 8003de4:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <can_main_hw_get_next_free_msg_obj+0x40>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <can_main_hw_get_next_free_msg_obj+0x22>
		{
			// the object is free;
			*msg_obj = i;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	89fa      	ldrh	r2, [r7, #14]
 8003df0:	801a      	strh	r2, [r3, #0]
			return (LI_CAN_SLV_ERR_OK);
 8003df2:	2300      	movs	r3, #0
 8003df4:	e007      	b.n	8003e06 <can_main_hw_get_next_free_msg_obj+0x32>
	for (i = 0; i < LI_CAN_SLV_MAIN_NODE_MAX_NOF_MSG_OBJ; i++)
 8003df6:	89fb      	ldrh	r3, [r7, #14]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	81fb      	strh	r3, [r7, #14]
 8003dfc:	89fb      	ldrh	r3, [r7, #14]
 8003dfe:	2b1f      	cmp	r3, #31
 8003e00:	d9ef      	bls.n	8003de2 <can_main_hw_get_next_free_msg_obj+0xe>
#ifdef LI_CAN_SLV_DEBUG_CAN_INIT_HW
	LI_CAN_SLV_DEBUG_PRINT("\n\nERR_MSG_CAN_NO_MSG_OBJ_FREE");
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_INIT_HW

	// no msg object is free
	return (ERR_MSG_CAN_NO_MSG_OBJ_FREE);
 8003e02:	f245 0323 	movw	r3, #20515	; 0x5023
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000588 	.word	0x20000588

08003e18 <can_main_hw_enable>:

li_can_slv_errorcode_t can_main_hw_enable(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	li_can_slv_mode_t mode;

	mode = li_can_slv_get_mode();
 8003e1e:	f001 f81b 	bl	8004e58 <li_can_slv_get_mode>
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
	if (LI_CAN_SLV_MODE_LISTEN_ONLY == mode)
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d104      	bne.n	8003e36 <can_main_hw_enable+0x1e>
	{
		CpCoreCanMode(&can_port_main, CANPIE_MODE_LISTEN_ONLY);
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	4809      	ldr	r0, [pc, #36]	; (8003e54 <can_main_hw_enable+0x3c>)
 8003e30:	f7ff fadc 	bl	80033ec <CpCoreCanMode>
 8003e34:	e008      	b.n	8003e48 <can_main_hw_enable+0x30>
	}
	else
	{
		if (li_can_slv_get_mode() != LI_CAN_SLV_MODE_OPERATIONAL)
 8003e36:	f001 f80f 	bl	8004e58 <li_can_slv_get_mode>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d003      	beq.n	8003e48 <can_main_hw_enable+0x30>
		{
			CpCoreCanMode(&can_port_main, CANPIE_MODE_START);
 8003e40:	2101      	movs	r1, #1
 8003e42:	4804      	ldr	r0, [pc, #16]	; (8003e54 <can_main_hw_enable+0x3c>)
 8003e44:	f7ff fad2 	bl	80033ec <CpCoreCanMode>
		}
	}
	return (LI_CAN_SLV_ERR_OK);
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	2000075c 	.word	0x2000075c

08003e58 <can_main_hw_define_msg_obj>:

	return (LI_CAN_SLV_ERR_OK);
}

li_can_slv_errorcode_t can_main_hw_define_msg_obj(uint16_t msg_obj, uint16_t can_id, uint16_t acceptance_mask, byte_t dlc, byte_t dir, can_main_service_id_t service_id)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	80fb      	strh	r3, [r7, #6]
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	80bb      	strh	r3, [r7, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	807b      	strh	r3, [r7, #2]
 8003e72:	4613      	mov	r3, r2
 8003e74:	707b      	strb	r3, [r7, #1]

	ubBufferIdxV = (uint8_t)(msg_obj + 1);
#else // #if CP_VERSION_MAJOR <= 2
	enum CpBufferDir_e msg_dir;

	ubBufferIdxV = (uint8_t) msg_obj;
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	73bb      	strb	r3, [r7, #14]
#ifdef LI_CAN_SLV_DEBUG_CAN_INIT_HW
	LI_CAN_SLV_DEBUG_PRINT("\ncan hw def msgobj:%d, id:%d", msg_obj, can_id);
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_INIT_HW

	// set message object to used state
	msg_obj_used[msg_obj] = TRUE;
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <can_main_hw_define_msg_obj+0x88>)
 8003e7e:	2101      	movs	r1, #1
 8003e80:	54d1      	strb	r1, [r2, r3]
	CpMsgClear(&can_msg);
	CpMsgSetStdId(&can_msg, can_id);
	CpMsgSetDlc(&can_msg, dlc);
#endif // #if CP_VERSION_MAJOR <= 2

	if (dir == CAN_CONFIG_DIR_TX)
 8003e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d102      	bne.n	8003e90 <can_main_hw_define_msg_obj+0x38>
	{
		msg_dir = CANPIE_BUFFER_DIR_TX;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e001      	b.n	8003e94 <can_main_hw_define_msg_obj+0x3c>
	}
	else
	{
		msg_dir = CANPIE_BUFFER_DIR_RX;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]
	 * */
#if CP_VERSION_MAJOR <= 2
	CpCoreBufferInit(&can_port_main, &can_msg, ubBufferIdxV, msg_dir);
	CpCoreBufferAccMask(&can_port_main, ubBufferIdxV, acceptance_mask);
#else // #if CP_VERSION_MAJOR <= 2
	CpCoreBufferConfig(&can_port_main, ubBufferIdxV, can_id, acceptance_mask, CP_MSG_FORMAT_CBFF, msg_dir);
 8003e94:	88ba      	ldrh	r2, [r7, #4]
 8003e96:	8878      	ldrh	r0, [r7, #2]
 8003e98:	7bb9      	ldrb	r1, [r7, #14]
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	480f      	ldr	r0, [pc, #60]	; (8003ee4 <can_main_hw_define_msg_obj+0x8c>)
 8003ea6:	f7ff f869 	bl	8002f7c <CpCoreBufferConfig>
#endif // #if CP_VERSION_MAJOR <= 2

	switch (service_id)
 8003eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d80c      	bhi.n	8003ecc <can_main_hw_define_msg_obj+0x74>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <can_main_hw_define_msg_obj+0x60>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ed3 	.word	0x08003ed3
 8003ebc:	08003ed3 	.word	0x08003ed3
 8003ec0:	08003ed3 	.word	0x08003ed3
 8003ec4:	08003ed3 	.word	0x08003ed3
 8003ec8:	08003ed3 	.word	0x08003ed3

		default:
#ifdef LI_CAN_SLV_DEBUG_CAN_INIT_HW
			LI_CAN_SLV_DEBUG_PRINT(" with ERR_MSG_CAN_MAIN_UNDEFINED_ISR_ID");
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_INIT_HW
			return (ERR_MSG_CAN_MAIN_UNDEFINED_ISR_ID);
 8003ecc:	f245 0303 	movw	r3, #20483	; 0x5003
 8003ed0:	e001      	b.n	8003ed6 <can_main_hw_define_msg_obj+0x7e>
			break;
 8003ed2:	bf00      	nop
			break;
	}
	return (LI_CAN_SLV_ERR_OK);
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000588 	.word	0x20000588
 8003ee4:	2000075c 	.word	0x2000075c

08003ee8 <can_main_hw_set_baudrate>:

li_can_slv_errorcode_t can_main_hw_set_baudrate(can_config_bdr_tab_t *bdr_tab_entry)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	CpCoreCanMode(&can_port_main, CANPIE_MODE_STOP);
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4824      	ldr	r0, [pc, #144]	; (8003f84 <can_main_hw_set_baudrate+0x9c>)
 8003ef4:	f7ff fa7a 	bl	80033ec <CpCoreCanMode>

	switch (bdr_tab_entry->baudrate)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	2bfa      	cmp	r3, #250	; 0xfa
 8003efe:	d012      	beq.n	8003f26 <can_main_hw_set_baudrate+0x3e>
 8003f00:	2bfa      	cmp	r3, #250	; 0xfa
 8003f02:	dc02      	bgt.n	8003f0a <can_main_hw_set_baudrate+0x22>
 8003f04:	2b7d      	cmp	r3, #125	; 0x7d
 8003f06:	d007      	beq.n	8003f18 <can_main_hw_set_baudrate+0x30>
 8003f08:	e022      	b.n	8003f50 <can_main_hw_set_baudrate+0x68>
 8003f0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f0e:	d011      	beq.n	8003f34 <can_main_hw_set_baudrate+0x4c>
 8003f10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f14:	d015      	beq.n	8003f42 <can_main_hw_set_baudrate+0x5a>
 8003f16:	e01b      	b.n	8003f50 <can_main_hw_set_baudrate+0x68>
	{
		case 125:
#if CP_VERSION_MAJOR <= 2
			CpCoreBaudrate(&can_port_main, CP_BAUD_125K);
#else // #if CP_VERSION_MAJOR <= 2
			CpCoreBitrate(&can_port_main, eCP_BITRATE_125K, eCP_BITRATE_NONE);
 8003f18:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	4819      	ldr	r0, [pc, #100]	; (8003f84 <can_main_hw_set_baudrate+0x9c>)
 8003f20:	f7fe ff80 	bl	8002e24 <CpCoreBitrate>
#endif // #if CP_VERSION_MAJOR <= 2
			break;
 8003f24:	e01b      	b.n	8003f5e <can_main_hw_set_baudrate+0x76>

		case 250:
#if CP_VERSION_MAJOR <= 2
			CpCoreBaudrate(&can_port_main, CP_BAUD_250K);
#else // #if CP_VERSION_MAJOR <= 2
			CpCoreBitrate(&can_port_main, eCP_BITRATE_250K, eCP_BITRATE_NONE);
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	2105      	movs	r1, #5
 8003f2c:	4815      	ldr	r0, [pc, #84]	; (8003f84 <can_main_hw_set_baudrate+0x9c>)
 8003f2e:	f7fe ff79 	bl	8002e24 <CpCoreBitrate>
#endif // #if CP_VERSION_MAJOR <= 2
			break;
 8003f32:	e014      	b.n	8003f5e <can_main_hw_set_baudrate+0x76>

		case 500:
#if CP_VERSION_MAJOR <= 2
			CpCoreBaudrate(&can_port_main, CP_BAUD_500K);
#else // #if CP_VERSION_MAJOR <= 2
			CpCoreBitrate(&can_port_main, eCP_BITRATE_500K, eCP_BITRATE_NONE);
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	2106      	movs	r1, #6
 8003f3a:	4812      	ldr	r0, [pc, #72]	; (8003f84 <can_main_hw_set_baudrate+0x9c>)
 8003f3c:	f7fe ff72 	bl	8002e24 <CpCoreBitrate>
#endif // #if CP_VERSION_MAJOR <= 2
			break;
 8003f40:	e00d      	b.n	8003f5e <can_main_hw_set_baudrate+0x76>

		case 1000:
#if CP_VERSION_MAJOR <= 2
			CpCoreBaudrate(&can_port_main, CP_BAUD_1M);
#else // #if CP_VERSION_MAJOR <= 2
			CpCoreBitrate(&can_port_main, eCP_BITRATE_1M, eCP_BITRATE_NONE);
 8003f42:	f04f 32ff 	mov.w	r2, #4294967295
 8003f46:	2108      	movs	r1, #8
 8003f48:	480e      	ldr	r0, [pc, #56]	; (8003f84 <can_main_hw_set_baudrate+0x9c>)
 8003f4a:	f7fe ff6b 	bl	8002e24 <CpCoreBitrate>
#endif // #if CP_VERSION_MAJOR <= 2
			break;
 8003f4e:	e006      	b.n	8003f5e <can_main_hw_set_baudrate+0x76>

		default:
			CpCoreCanMode(&can_port_main, CANPIE_MODE_START);
 8003f50:	2101      	movs	r1, #1
 8003f52:	480c      	ldr	r0, [pc, #48]	; (8003f84 <can_main_hw_set_baudrate+0x9c>)
 8003f54:	f7ff fa4a 	bl	80033ec <CpCoreCanMode>
			return (ERR_MSG_CAN_CONFIG_SET_INVALID_BAUDRATE);
 8003f58:	f245 0305 	movw	r3, #20485	; 0x5005
 8003f5c:	e00e      	b.n	8003f7c <can_main_hw_set_baudrate+0x94>
			break;
	}

	if (li_can_slv_get_mode() == LI_CAN_SLV_MODE_OPERATIONAL)
 8003f5e:	f000 ff7b 	bl	8004e58 <li_can_slv_get_mode>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d104      	bne.n	8003f72 <can_main_hw_set_baudrate+0x8a>
	{
		CpCoreCanMode(&can_port_main, CANPIE_MODE_START);
 8003f68:	2101      	movs	r1, #1
 8003f6a:	4806      	ldr	r0, [pc, #24]	; (8003f84 <can_main_hw_set_baudrate+0x9c>)
 8003f6c:	f7ff fa3e 	bl	80033ec <CpCoreCanMode>
 8003f70:	e003      	b.n	8003f7a <can_main_hw_set_baudrate+0x92>
	}
	else
	{
		CpCoreCanMode(&can_port_main, CANPIE_MODE_LISTEN_ONLY);
 8003f72:	2102      	movs	r1, #2
 8003f74:	4803      	ldr	r0, [pc, #12]	; (8003f84 <can_main_hw_set_baudrate+0x9c>)
 8003f76:	f7ff fa39 	bl	80033ec <CpCoreCanMode>
	}

	return (LI_CAN_SLV_ERR_OK);
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	2000075c 	.word	0x2000075c

08003f88 <can_main_hw_send_msg_obj_blocking>:
	return (LI_CAN_SLV_ERR_OK);
}
#endif // #ifdef LI_CAN_SLV_RECONNECT

li_can_slv_errorcode_t can_main_hw_send_msg_obj_blocking(uint16_t msg_obj, uint16_t can_id, uint16_t dlc, const volatile byte_t *src)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	4603      	mov	r3, r0
 8003f92:	81fb      	strh	r3, [r7, #14]
 8003f94:	460b      	mov	r3, r1
 8003f96:	81bb      	strh	r3, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	817b      	strh	r3, [r7, #10]
#if CP_VERSION_MAJOR <= 2
	CpCanMsg_ts msg;

	ubBufferIdxV = (uint8_t)(msg_obj + 1);
#else // #if CP_VERSION_MAJOR <= 2
	CpStatus_tv ret = eCP_ERR_TRM_FULL;
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	75fb      	strb	r3, [r7, #23]
	ubBufferIdxV = (uint8_t) msg_obj;
 8003fa0:	89fb      	ldrh	r3, [r7, #14]
 8003fa2:	75bb      	strb	r3, [r7, #22]

	CpCoreBufferInit(&can_port_main, &msg, ubBufferIdxV, CP_BUFFER_DIR_TX);
	CpCoreBufferSetData(&can_port_main, ubBufferIdxV, (uint8_t *)src);
	CpCoreBufferSend(&can_port_main, ubBufferIdxV);
#else // #if CP_VERSION_MAJOR <= 2
	CpCoreBufferConfig(&can_port_main, ubBufferIdxV, can_id, 0, CP_MSG_FORMAT_CBFF, eCP_BUFFER_DIR_TRM);
 8003fa4:	89ba      	ldrh	r2, [r7, #12]
 8003fa6:	7db9      	ldrb	r1, [r7, #22]
 8003fa8:	2301      	movs	r3, #1
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4812      	ldr	r0, [pc, #72]	; (8003ffc <can_main_hw_send_msg_obj_blocking+0x74>)
 8003fb4:	f7fe ffe2 	bl	8002f7c <CpCoreBufferConfig>
	CpCoreBufferSetData(&can_port_main, ubBufferIdxV, (uint8_t *) src, 0, dlc);
 8003fb8:	897b      	ldrh	r3, [r7, #10]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	7db9      	ldrb	r1, [r7, #22]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	480d      	ldr	r0, [pc, #52]	; (8003ffc <can_main_hw_send_msg_obj_blocking+0x74>)
 8003fc6:	f7ff f9ab 	bl	8003320 <CpCoreBufferSetData>
	CpCoreBufferSetDlc(&can_port_main, ubBufferIdxV, dlc);
 8003fca:	897b      	ldrh	r3, [r7, #10]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	7dbb      	ldrb	r3, [r7, #22]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	480a      	ldr	r0, [pc, #40]	; (8003ffc <can_main_hw_send_msg_obj_blocking+0x74>)
 8003fd4:	f7ff f9e6 	bl	80033a4 <CpCoreBufferSetDlc>

	// tx message and wait until timeout
	ret = eCP_ERR_TRM_FULL;
 8003fd8:	2308      	movs	r3, #8
 8003fda:	75fb      	strb	r3, [r7, #23]
	while (ret != eCP_ERR_NONE)
 8003fdc:	e006      	b.n	8003fec <can_main_hw_send_msg_obj_blocking+0x64>
	{
		ret = CpCoreBufferSend(&can_port_main, ubBufferIdxV);
 8003fde:	7dbb      	ldrb	r3, [r7, #22]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4806      	ldr	r0, [pc, #24]	; (8003ffc <can_main_hw_send_msg_obj_blocking+0x74>)
 8003fe4:	f7ff f8fa 	bl	80031dc <CpCoreBufferSend>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	75fb      	strb	r3, [r7, #23]
	while (ret != eCP_ERR_NONE)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f5      	bne.n	8003fde <can_main_hw_send_msg_obj_blocking+0x56>
		/** @todo implement any timeout handling here or search for a better solution */
	}
#endif // #if CP_VERSION_MAJOR <= 2
	return (LI_CAN_SLV_ERR_OK);
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	2000075c 	.word	0x2000075c

08004000 <can_main_hw_send_msg_obj_none_blocking>:

#if defined(OUTER) || defined(OUTER_APP)
li_can_slv_errorcode_t can_main_hw_send_msg_obj_none_blocking(uint16_t msg_obj, uint16_t can_id, uint16_t dlc, const volatile byte_t *src)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	4603      	mov	r3, r0
 800400a:	81fb      	strh	r3, [r7, #14]
 800400c:	460b      	mov	r3, r1
 800400e:	81bb      	strh	r3, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	817b      	strh	r3, [r7, #10]
#if CP_VERSION_MAJOR <= 2
	CpCanMsg_ts msg;

	ubBufferIdxV = (uint8_t)(msg_obj + 1);
#else // #if CP_VERSION_MAJOR <= 2
	ubBufferIdxV = (uint8_t) msg_obj;
 8004014:	89fb      	ldrh	r3, [r7, #14]
 8004016:	75fb      	strb	r3, [r7, #23]

	CpCoreBufferInit(&can_port_main, &msg, ubBufferIdxV, CP_BUFFER_DIR_TX);
	CpCoreBufferSetData(&can_port_main, ubBufferIdxV, (uint8_t *)src);
	CpCoreBufferSend(&can_port_main, ubBufferIdxV);
#else // #if CP_VERSION_MAJOR <= 2
	CpCoreBufferConfig(&can_port_main, ubBufferIdxV, can_id, 0, CP_MSG_FORMAT_CBFF, eCP_BUFFER_DIR_TRM);
 8004018:	89ba      	ldrh	r2, [r7, #12]
 800401a:	7df9      	ldrb	r1, [r7, #23]
 800401c:	2301      	movs	r3, #1
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	480e      	ldr	r0, [pc, #56]	; (8004060 <can_main_hw_send_msg_obj_none_blocking+0x60>)
 8004028:	f7fe ffa8 	bl	8002f7c <CpCoreBufferConfig>
	CpCoreBufferSetData(&can_port_main, ubBufferIdxV, (uint8_t *) src, 0, dlc);
 800402c:	897b      	ldrh	r3, [r7, #10]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	7df9      	ldrb	r1, [r7, #23]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4809      	ldr	r0, [pc, #36]	; (8004060 <can_main_hw_send_msg_obj_none_blocking+0x60>)
 800403a:	f7ff f971 	bl	8003320 <CpCoreBufferSetData>
	CpCoreBufferSetDlc(&can_port_main, ubBufferIdxV, dlc);
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	4619      	mov	r1, r3
 8004046:	4806      	ldr	r0, [pc, #24]	; (8004060 <can_main_hw_send_msg_obj_none_blocking+0x60>)
 8004048:	f7ff f9ac 	bl	80033a4 <CpCoreBufferSetDlc>
	CpCoreBufferSend(&can_port_main, ubBufferIdxV);
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	4619      	mov	r1, r3
 8004050:	4803      	ldr	r0, [pc, #12]	; (8004060 <can_main_hw_send_msg_obj_none_blocking+0x60>)
 8004052:	f7ff f8c3 	bl	80031dc <CpCoreBufferSend>
#endif // #if CP_VERSION_MAJOR <= 2

	return (LI_CAN_SLV_ERR_OK);
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	2000075c 	.word	0x2000075c

08004064 <can_main_hw_handler_rx>:
 * @param ptsCanMsgV
 * @param ubBufferIdxV
 * @return
 */
uint8_t can_main_hw_handler_rx(CpCanMsg_ts *ptsCanMsgV, uint8_t ubBufferIdxV)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
#endif
		return (LI_CAN_SLV_ERR_OK);
	}
#endif // #ifdef LI_CAN_SLV_RECONNECT

	canid = CpMsgGetStdId(ptsCanMsgV);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	82fb      	strh	r3, [r7, #22]
	CpCoreBufferGetDlc(&can_port_main, ubBufferIdxV, &dlc);
 8004076:	f107 020b 	add.w	r2, r7, #11
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	4619      	mov	r1, r3
 800407e:	480c      	ldr	r0, [pc, #48]	; (80040b0 <can_main_hw_handler_rx+0x4c>)
 8004080:	f7ff f83a 	bl	80030f8 <CpCoreBufferGetDlc>
#if CP_VERSION_MAJOR <= 2
	CpCoreBufferGetData(&can_port_main, ubBufferIdxV, &(data[0]));
#else // #if CP_VERSION_MAJOR <= 2
	CpCoreBufferGetData(&can_port_main, ubBufferIdxV, &(data[0]), 0, dlc);
 8004084:	7afb      	ldrb	r3, [r7, #11]
 8004086:	f107 020c 	add.w	r2, r7, #12
 800408a:	78f9      	ldrb	r1, [r7, #3]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2300      	movs	r3, #0
 8004090:	4807      	ldr	r0, [pc, #28]	; (80040b0 <can_main_hw_handler_rx+0x4c>)
 8004092:	f7fe fff1 	bl	8003078 <CpCoreBufferGetData>
#ifdef LI_CAN_SLV_DEBUG_CAN_MAIN_HW_HANDLER
	LI_CAN_SLV_DEBUG_PRINT("\n\nrx obj: %d id: 0x%x", ubBufferIdxV, canid);
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_MAIN_HW_HANDLER

#if defined (LI_CAN_SLV_SYNC) || defined (LI_CAN_SLV_BOOT)
	(void) can_sync_handler_rx(ubBufferIdxV, dlc, canid, data);
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	b298      	uxth	r0, r3
 800409a:	7af9      	ldrb	r1, [r7, #11]
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	8afa      	ldrh	r2, [r7, #22]
 80040a2:	f001 fd49 	bl	8005b38 <can_sync_handler_rx>
#ifdef LI_CAN_SLV_ASYNC_TUNNEL
	(void)can_async_handler_data_rx(ubBufferIdxV, dlc, canid, data);
#endif // #ifdef LI_CAN_SLV_ASYNC_TUNNEL
#endif // #ifndef LI_CAN_SLV_BOOT

	return 0;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	2000075c 	.word	0x2000075c

080040b4 <can_main_hw_handler_tx>:
 * @param ptsCanMsgV
 * @param ubBufferIdxV
 * @return
 */
uint8_t can_main_hw_handler_tx(CpCanMsg_ts *ptsCanMsgV, uint8_t ubBufferIdxV)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
	/** @todo add workaround for the aligned problem for tricore cpu */
	/* uint8_t __attribute__ ((aligned(2))) data[8]; */
	uint16_t canid;
	uint8_t dlc;

	canid = CpMsgGetStdId(ptsCanMsgV);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	82fb      	strh	r3, [r7, #22]
	CpCoreBufferGetDlc(&can_port_main, ubBufferIdxV, &dlc);
 80040c6:	f107 020b 	add.w	r2, r7, #11
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	4619      	mov	r1, r3
 80040ce:	480c      	ldr	r0, [pc, #48]	; (8004100 <can_main_hw_handler_tx+0x4c>)
 80040d0:	f7ff f812 	bl	80030f8 <CpCoreBufferGetDlc>
#if CP_VERSION_MAJOR <= 2
	CpCoreBufferGetData(&can_port_main, ubBufferIdxV, &(data[0]));
#else // #if CP_VERSION_MAJOR <= 2
	CpCoreBufferGetData(&can_port_main, ubBufferIdxV, &(data[0]), 0, dlc);
 80040d4:	7afb      	ldrb	r3, [r7, #11]
 80040d6:	f107 020c 	add.w	r2, r7, #12
 80040da:	78f9      	ldrb	r1, [r7, #3]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	2300      	movs	r3, #0
 80040e0:	4807      	ldr	r0, [pc, #28]	; (8004100 <can_main_hw_handler_tx+0x4c>)
 80040e2:	f7fe ffc9 	bl	8003078 <CpCoreBufferGetData>
#ifdef LI_CAN_SLV_DEBUG_CAN_MAIN_HW_HANDLER
	LI_CAN_SLV_DEBUG_PRINT("\n\ntx obj: %d id: 0x%x", ubBufferIdxV, canid);
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_MAIN_HW_HANDLER

#if defined (LI_CAN_SLV_SYNC)
	(void) can_sync_handler_tx(ubBufferIdxV, dlc, canid);
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	7af9      	ldrb	r1, [r7, #11]
 80040ec:	8afa      	ldrh	r2, [r7, #22]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fdb2 	bl	8005c58 <can_sync_handler_tx>
#endif // #if defined (LI_CAN_SLV_SYNC)

#endif // #ifndef LI_CAN_SLV_BOOT
	return 0;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	2000075c 	.word	0x2000075c

08004104 <can_config_init>:
/**
 * @brief initialize can configuration
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_init(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	80bb      	strh	r3, [r7, #4]
	uint16_t i;

	can_config_nr_of_modules = 0;
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <can_config_init+0x44>)
 8004110:	2200      	movs	r2, #0
 8004112:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES; i++)
 8004114:	2300      	movs	r3, #0
 8004116:	80fb      	strh	r3, [r7, #6]
 8004118:	e00b      	b.n	8004132 <can_config_init+0x2e>
	{
		can_config_module_tab[i].type[0] = '\0';
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	490b      	ldr	r1, [pc, #44]	; (800414c <can_config_init+0x48>)
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	440b      	add	r3, r1
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES; i++)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	3301      	adds	r3, #1
 8004130:	80fb      	strh	r3, [r7, #6]
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <can_config_init+0x16>
		err = testsys_system_page_add(&can_config_testsys[0], "CAN Config system");
	}
#endif // #ifdef TESTSYS_SYSTEM
#endif // #ifdef SHOW_CAN_CONFIG

	return (err);
 8004138:	88bb      	ldrh	r3, [r7, #4]
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	200005aa 	.word	0x200005aa
 800414c:	2000000c 	.word	0x2000000c

08004150 <can_config_set_baudrate_table>:
 * @brief Set CAN baud rate table from the tuple system
 * @remarks If no baud rate table tuple is defined the default baud rate table is used.
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_set_baudrate_table(void)
{
 8004150:	b4b0      	push	{r4, r5, r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	80fb      	strh	r3, [r7, #6]
			err = LI_CAN_SLV_ERR_OK; // reset err to LI_CAN_SLV_ERR_OK
			break;
	}
#else // #if defined(LI_CAN_SLV_TUPLE) && defined(CAN_BAUDRATE_TABLE_CNFG)
	/* use default baud rate table */
	can_port_memory_cpy(&can_config_bdr_tab, &can_main_hw_default_baudrate_table, sizeof(can_main_hw_default_baudrate_table));
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <can_config_set_baudrate_table+0x34>)
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <can_config_set_baudrate_table+0x38>)
 800415e:	4614      	mov	r4, r2
 8004160:	461d      	mov	r5, r3
 8004162:	6828      	ldr	r0, [r5, #0]
 8004164:	6869      	ldr	r1, [r5, #4]
 8004166:	68aa      	ldr	r2, [r5, #8]
 8004168:	68eb      	ldr	r3, [r5, #12]
 800416a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800416c:	6928      	ldr	r0, [r5, #16]
 800416e:	6969      	ldr	r1, [r5, #20]
 8004170:	69aa      	ldr	r2, [r5, #24]
 8004172:	69eb      	ldr	r3, [r5, #28]
 8004174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#endif // #if defined(LI_CAN_SLV_TUPLE) && defined(CAN_BAUDRATE_TABLE_CNFG)
	return (err);
 8004176:	88fb      	ldrh	r3, [r7, #6]
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bcb0      	pop	{r4, r5, r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000098 	.word	0x20000098
 8004188:	080074e0 	.word	0x080074e0

0800418c <can_config_set_baudrate>:
/**
 * @param baudrate is the  baud rate to set in kBaud
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_set_baudrate(can_config_bdr_t baudrate)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	for (i = 0; i < CAN_CONFIG_SIZE_OF_BDR_TAB; i++)
 8004196:	2300      	movs	r3, #0
 8004198:	81fb      	strh	r3, [r7, #14]
 800419a:	e01b      	b.n	80041d4 <can_config_set_baudrate+0x48>
	{
		if (baudrate == can_config_bdr_tab[i].baudrate)
 800419c:	89fb      	ldrh	r3, [r7, #14]
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <can_config_set_baudrate+0x5c>)
 80041a0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d111      	bne.n	80041ce <can_config_set_baudrate+0x42>
		{
			can_port_memory_cpy(&can_config_bdr_current, &can_config_bdr_tab[i], sizeof(can_config_bdr_current));
 80041aa:	89fb      	ldrh	r3, [r7, #14]
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <can_config_set_baudrate+0x5c>)
 80041b0:	4413      	add	r3, r2
 80041b2:	2208      	movs	r2, #8
 80041b4:	4619      	mov	r1, r3
 80041b6:	480d      	ldr	r0, [pc, #52]	; (80041ec <can_config_set_baudrate+0x60>)
 80041b8:	f002 f8e6 	bl	8006388 <memcpy>
			can_main_hw_set_baudrate(&can_config_bdr_tab[i]);
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4a09      	ldr	r2, [pc, #36]	; (80041e8 <can_config_set_baudrate+0x5c>)
 80041c2:	4413      	add	r3, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fe8f 	bl	8003ee8 <can_main_hw_set_baudrate>
#if defined(LI_CAN_SLV_MON) || defined(CAN_NODE_B_USED_FOR_RECONNECT_ONLY)
			can_mon_hw_set_baudrate(&can_config_bdr_tab[i]);
#endif // #if defined(LI_CAN_SLV_MON) || defined(CAN_NODE_B_USED_FOR_RECONNECT_ONLY)
			return (LI_CAN_SLV_ERR_OK);
 80041ca:	2300      	movs	r3, #0
 80041cc:	e007      	b.n	80041de <can_config_set_baudrate+0x52>
	for (i = 0; i < CAN_CONFIG_SIZE_OF_BDR_TAB; i++)
 80041ce:	89fb      	ldrh	r3, [r7, #14]
 80041d0:	3301      	adds	r3, #1
 80041d2:	81fb      	strh	r3, [r7, #14]
 80041d4:	89fb      	ldrh	r3, [r7, #14]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d9e0      	bls.n	800419c <can_config_set_baudrate+0x10>
		}
	}
	return (ERR_MSG_CAN_CONFIG_SET_INVALID_BAUDRATE);
 80041da:	f245 0305 	movw	r3, #20485	; 0x5005
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000098 	.word	0x20000098
 80041ec:	200005ac 	.word	0x200005ac

080041f0 <can_config_set_baudrate_startup>:

/**
 *
 */
void can_config_set_baudrate_startup(li_can_slv_config_bdr_t baud_rate)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
	can_config_bdr_startup = baud_rate;
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <can_config_set_baudrate_startup+0x1c>)
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	8013      	strh	r3, [r2, #0]
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	200005a8 	.word	0x200005a8

08004210 <can_config_add_module>:
 * @param tx3 data pointer to application data of CAN transmit object 3
 * @return #LI_CAN_SLV_ERR_OK, #ERR_MSG_CAN_CONFIG_REDECLARED_MODULE_NR, #ERR_MSG_CAN_CONFIG_MAXIMUM_NR_OF_MODULE_TYPE
 */
li_can_slv_errorcode_t can_config_add_module(const li_can_slv_config_module_t *module, li_can_slv_module_nr_t module_nr,
        void *rx0, void *rx1, void *rx2, void *rx3, void *tx0, void *tx1, void *tx2, void *tx3)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08e      	sub	sp, #56	; 0x38
 8004214:	af08      	add	r7, sp, #32
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	460b      	mov	r3, r1
 800421e:	817b      	strh	r3, [r7, #10]
	/**@todo fix error handling */
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	827b      	strh	r3, [r7, #18]

#ifdef LI_CAN_SLV_DEBUG_CAN_INIT
	LI_CAN_SLV_DEBUG_PRINT("\n\ncan_config_add_module1 %4s", module->type);
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_INIT

	i = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	82fb      	strh	r3, [r7, #22]
	while (i < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES)
 8004228:	e06d      	b.n	8004306 <can_config_add_module+0xf6>
	{
		if (can_config_module_tab[i].type[0] == '\0')
 800422a:	8afa      	ldrh	r2, [r7, #22]
 800422c:	493a      	ldr	r1, [pc, #232]	; (8004318 <can_config_add_module+0x108>)
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	440b      	add	r3, r1
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d160      	bne.n	8004300 <can_config_add_module+0xf0>
		{
			/* check if module number not already used */
			j = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	82bb      	strh	r3, [r7, #20]
			while (j < i)
 8004242:	e035      	b.n	80042b0 <can_config_add_module+0xa0>
			{
				if (can_config_module_tab[j].module_nr == module_nr)
 8004244:	8aba      	ldrh	r2, [r7, #20]
 8004246:	4934      	ldr	r1, [pc, #208]	; (8004318 <can_config_add_module+0x108>)
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	4413      	add	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	440b      	add	r3, r1
 8004252:	3306      	adds	r3, #6
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	897a      	ldrh	r2, [r7, #10]
 8004258:	429a      	cmp	r2, r3
 800425a:	d126      	bne.n	80042aa <can_config_add_module+0x9a>
#ifdef LI_CAN_SLV_DEBUG_CAN_INIT
					LI_CAN_SLV_DEBUG_PRINT("\n->check on module_nr.%d", module_nr);
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_INIT

					/* set module with default module number */
					err = can_config_set_module(i, module, LI_CAN_SLV_CONFIG_DEF_MOD_NR1 + i, rx0, rx1, rx2, rx3, tx0, tx1, tx2, tx3);
 800425c:	8afb      	ldrh	r3, [r7, #22]
 800425e:	337d      	adds	r3, #125	; 0x7d
 8004260:	b29a      	uxth	r2, r3
 8004262:	8af8      	ldrh	r0, [r7, #22]
 8004264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004266:	9306      	str	r3, [sp, #24]
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	9305      	str	r3, [sp, #20]
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	9302      	str	r3, [sp, #8]
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68f9      	ldr	r1, [r7, #12]
 8004284:	f000 faea 	bl	800485c <can_config_set_module>
 8004288:	4603      	mov	r3, r0
 800428a:	827b      	strh	r3, [r7, #18]

#ifdef LI_CAN_SLV_SYS_MODULE_ERROR
					if (err != LI_CAN_SLV_ERR_OK)
 800428c:	8a7b      	ldrh	r3, [r7, #18]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <can_config_add_module+0x94>
					{
						error_syserr_send(err, ERR_LVL_INFO, can_config_get_module_nr_main(), ERR_LVL_INFO);
 8004292:	f000 fa77 	bl	8004784 <can_config_get_module_nr_main>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	8a78      	ldrh	r0, [r7, #18]
 800429c:	2304      	movs	r3, #4
 800429e:	2104      	movs	r1, #4
 80042a0:	f001 f89c 	bl	80053dc <error_syserr_send>
					}
#endif // #ifdef LI_CAN_SLV_SYS_MODULE_ERROR
					return (ERR_MSG_CAN_CONFIG_REDECLARED_MODULE_NR);
 80042a4:	f245 030d 	movw	r3, #20493	; 0x500d
 80042a8:	e032      	b.n	8004310 <can_config_add_module+0x100>
				}
				j++;
 80042aa:	8abb      	ldrh	r3, [r7, #20]
 80042ac:	3301      	adds	r3, #1
 80042ae:	82bb      	strh	r3, [r7, #20]
			while (j < i)
 80042b0:	8aba      	ldrh	r2, [r7, #20]
 80042b2:	8afb      	ldrh	r3, [r7, #22]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d3c5      	bcc.n	8004244 <can_config_add_module+0x34>
#ifdef LI_CAN_SLV_DEBUG_CAN_INIT
			LI_CAN_SLV_DEBUG_PRINT("\ncan_config_add_module2 %d", module_nr);
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_INIT

			/* set module with module number */
			err = can_config_set_module(i, module, module_nr, rx0, rx1, rx2, rx3, tx0, tx1, tx2, tx3);
 80042b8:	897a      	ldrh	r2, [r7, #10]
 80042ba:	8af8      	ldrh	r0, [r7, #22]
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	9306      	str	r3, [sp, #24]
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	9305      	str	r3, [sp, #20]
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	9304      	str	r3, [sp, #16]
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	9303      	str	r3, [sp, #12]
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	f000 fabe 	bl	800485c <can_config_set_module>
 80042e0:	4603      	mov	r3, r0
 80042e2:	827b      	strh	r3, [r7, #18]

#ifdef LI_CAN_SLV_SYS_MODULE_ERROR
			if (err != LI_CAN_SLV_ERR_OK)
 80042e4:	8a7b      	ldrh	r3, [r7, #18]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <can_config_add_module+0xec>
			{
				error_syserr_send(err, ERR_LVL_INFO, can_config_get_module_nr_main(), ERR_LVL_INFO);
 80042ea:	f000 fa4b 	bl	8004784 <can_config_get_module_nr_main>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	8a78      	ldrh	r0, [r7, #18]
 80042f4:	2304      	movs	r3, #4
 80042f6:	2104      	movs	r1, #4
 80042f8:	f001 f870 	bl	80053dc <error_syserr_send>
			}
#endif // #ifdef LI_CAN_SLV_SYS_MODULE_ERROR
			return (LI_CAN_SLV_ERR_OK);
 80042fc:	2300      	movs	r3, #0
 80042fe:	e007      	b.n	8004310 <can_config_add_module+0x100>
		}
		i++;
 8004300:	8afb      	ldrh	r3, [r7, #22]
 8004302:	3301      	adds	r3, #1
 8004304:	82fb      	strh	r3, [r7, #22]
	while (i < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES)
 8004306:	8afb      	ldrh	r3, [r7, #22]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d08e      	beq.n	800422a <can_config_add_module+0x1a>
	}
	return (ERR_MSG_CAN_CONFIG_MAXIMUM_NR_OF_MODULE_TYPE);
 800430c:	f245 030c 	movw	r3, #20492	; 0x500c
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	2000000c 	.word	0x2000000c

0800431c <can_config_add_ukwn_module>:
 * @param module_type type of the module
 * @param module_nr module number
 * @return li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_add_ukwn_module(li_can_slv_module_type_t *module_type, li_can_slv_module_nr_t module_nr)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af06      	add	r7, sp, #24
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	807b      	strh	r3, [r7, #2]
	if ((module_nr > CAN_CONFIG_MAX_MODULE_NR) || (module_nr < CAN_CONFIG_MIN_MODULE_NR))
 8004328:	887b      	ldrh	r3, [r7, #2]
 800432a:	2b7c      	cmp	r3, #124	; 0x7c
 800432c:	d802      	bhi.n	8004334 <can_config_add_ukwn_module+0x18>
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d801      	bhi.n	8004338 <can_config_add_ukwn_module+0x1c>
	{
		module_nr = LI_CAN_SLV_CONFIG_DEF_MOD_NR1;
 8004334:	237d      	movs	r3, #125	; 0x7d
 8004336:	807b      	strh	r3, [r7, #2]
	}

	can_config_ukwn_module.module_nr = module_nr;
 8004338:	4a10      	ldr	r2, [pc, #64]	; (800437c <can_config_add_ukwn_module+0x60>)
 800433a:	887b      	ldrh	r3, [r7, #2]
 800433c:	80d3      	strh	r3, [r2, #6]

	if (NULL != module_type)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d004      	beq.n	800434e <can_config_add_ukwn_module+0x32>
	{
		li_can_slv_port_string_n_cpy(can_config_ukwn_module.type, module_type, CAN_CONFIG_TYPE_STRING_LENGTH);
 8004344:	2205      	movs	r2, #5
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <can_config_add_ukwn_module+0x60>)
 800434a:	f002 f85b 	bl	8006404 <strncpy>
	}

	return can_config_add_module(&can_config_ukwn_module, module_nr, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
 800434e:	8879      	ldrh	r1, [r7, #2]
 8004350:	2300      	movs	r3, #0
 8004352:	9305      	str	r3, [sp, #20]
 8004354:	2300      	movs	r3, #0
 8004356:	9304      	str	r3, [sp, #16]
 8004358:	2300      	movs	r3, #0
 800435a:	9303      	str	r3, [sp, #12]
 800435c:	2300      	movs	r3, #0
 800435e:	9302      	str	r3, [sp, #8]
 8004360:	2300      	movs	r3, #0
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	2300      	movs	r3, #0
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	2200      	movs	r2, #0
 800436c:	4803      	ldr	r0, [pc, #12]	; (800437c <can_config_add_ukwn_module+0x60>)
 800436e:	f7ff ff4f 	bl	8004210 <can_config_add_module>
 8004372:	4603      	mov	r3, r0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	200000b8 	.word	0x200000b8

08004380 <can_config_sync_off>:
/**
 * @brief switch off synchronous process of defined module
 * @param table_pos position in configuration table
 */
void can_config_sync_off(uint16_t table_pos)
{
 8004380:	b5b0      	push	{r4, r5, r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	byte_t clear_data[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	605a      	str	r2, [r3, #4]

	/*----------------------------------------------------------------------*/
	/* synchronous transmit                                                 */
	/*----------------------------------------------------------------------*/
	can_config_module_tab[table_pos].tx_obj_sync = LI_CAN_SLV_CONFIG_OBJ_USED_NOT;
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	4957      	ldr	r1, [pc, #348]	; (80044f4 <can_config_sync_off+0x174>)
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	335d      	adds	r3, #93	; 0x5d
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < can_config_module_tab[table_pos].tx_obj; i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	82fb      	strh	r3, [r7, #22]
 80043ac:	e020      	b.n	80043f0 <can_config_sync_off+0x70>
	{
		can_main_synchron_tx_data_off(table_pos, i);
 80043ae:	8afa      	ldrh	r2, [r7, #22]
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fdd7 	bl	8004f68 <can_main_synchron_tx_data_off>
		can_config_module_tab[table_pos].tx_dlc_sync[i] = LI_CAN_SLV_CONFIG_DLC_USED_0;
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	8af9      	ldrh	r1, [r7, #22]
 80043be:	484d      	ldr	r0, [pc, #308]	; (80044f4 <can_config_sync_off+0x174>)
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4403      	add	r3, r0
 80043ca:	440b      	add	r3, r1
 80043cc:	3362      	adds	r3, #98	; 0x62
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
		can_config_module_tab[table_pos].tx_main_sync[i] = &tx_main_dummy;
 80043d2:	88fa      	ldrh	r2, [r7, #6]
 80043d4:	8af9      	ldrh	r1, [r7, #22]
 80043d6:	4847      	ldr	r0, [pc, #284]	; (80044f4 <can_config_sync_off+0x174>)
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	4413      	add	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	440b      	add	r3, r1
 80043e2:	331e      	adds	r3, #30
 80043e4:	4a44      	ldr	r2, [pc, #272]	; (80044f8 <can_config_sync_off+0x178>)
 80043e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < can_config_module_tab[table_pos].tx_obj; i++)
 80043ea:	8afb      	ldrh	r3, [r7, #22]
 80043ec:	3301      	adds	r3, #1
 80043ee:	82fb      	strh	r3, [r7, #22]
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	4940      	ldr	r1, [pc, #256]	; (80044f4 <can_config_sync_off+0x174>)
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4413      	add	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	440b      	add	r3, r1
 80043fe:	3309      	adds	r3, #9
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	8afa      	ldrh	r2, [r7, #22]
 8004406:	429a      	cmp	r2, r3
 8004408:	d3d1      	bcc.n	80043ae <can_config_sync_off+0x2e>
	}

	/*----------------------------------------------------------------------*/
	/* synchronous receive                                                  */
	/*----------------------------------------------------------------------*/
	can_config_module_tab[table_pos].rx_obj_sync = LI_CAN_SLV_CONFIG_OBJ_USED_NOT;
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	4939      	ldr	r1, [pc, #228]	; (80044f4 <can_config_sync_off+0x174>)
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	335c      	adds	r3, #92	; 0x5c
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj; i++)
 800441e:	2300      	movs	r3, #0
 8004420:	82fb      	strh	r3, [r7, #22]
 8004422:	e01a      	b.n	800445a <can_config_sync_off+0xda>
	{
		can_config_module_tab[table_pos].rx_dlc_sync[i] = LI_CAN_SLV_CONFIG_DLC_USED_0;
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	8af9      	ldrh	r1, [r7, #22]
 8004428:	4832      	ldr	r0, [pc, #200]	; (80044f4 <can_config_sync_off+0x174>)
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	4413      	add	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4403      	add	r3, r0
 8004434:	440b      	add	r3, r1
 8004436:	335e      	adds	r3, #94	; 0x5e
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
		can_config_module_tab[table_pos].rx_main_sync[i] = &rx_main_dummy;
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	8af9      	ldrh	r1, [r7, #22]
 8004440:	482c      	ldr	r0, [pc, #176]	; (80044f4 <can_config_sync_off+0x174>)
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4413      	add	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	440b      	add	r3, r1
 800444c:	331a      	adds	r3, #26
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <can_config_sync_off+0x17c>)
 8004450:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj; i++)
 8004454:	8afb      	ldrh	r3, [r7, #22]
 8004456:	3301      	adds	r3, #1
 8004458:	82fb      	strh	r3, [r7, #22]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	4925      	ldr	r1, [pc, #148]	; (80044f4 <can_config_sync_off+0x174>)
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	440b      	add	r3, r1
 8004468:	3308      	adds	r3, #8
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	8afa      	ldrh	r2, [r7, #22]
 8004470:	429a      	cmp	r2, r3
 8004472:	d3d7      	bcc.n	8004424 <can_config_sync_off+0xa4>
	}

	/*----------------------------------------------------------------------*/
	/* clear synchronous data by conversion code                            */
	/*----------------------------------------------------------------------*/
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj; i++)
 8004474:	2300      	movs	r3, #0
 8004476:	82fb      	strh	r3, [r7, #22]
 8004478:	e02b      	b.n	80044d2 <can_config_sync_off+0x152>
	{
		can_config_module_tab[table_pos].rx_main[i](&clear_data[0], can_config_module_tab[table_pos].rx[i], can_config_module_tab[table_pos].rx_dlc[i]);
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	8af9      	ldrh	r1, [r7, #22]
 800447e:	481d      	ldr	r0, [pc, #116]	; (80044f4 <can_config_sync_off+0x174>)
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	4413      	add	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	440b      	add	r3, r1
 800448a:	330c      	adds	r3, #12
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4403      	add	r3, r0
 8004490:	685c      	ldr	r4, [r3, #4]
 8004492:	88fa      	ldrh	r2, [r7, #6]
 8004494:	8af9      	ldrh	r1, [r7, #22]
 8004496:	4817      	ldr	r0, [pc, #92]	; (80044f4 <can_config_sync_off+0x174>)
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	4413      	add	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	440b      	add	r3, r1
 80044a2:	3304      	adds	r3, #4
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4403      	add	r3, r0
 80044a8:	685d      	ldr	r5, [r3, #4]
 80044aa:	88fa      	ldrh	r2, [r7, #6]
 80044ac:	8af9      	ldrh	r1, [r7, #22]
 80044ae:	4811      	ldr	r0, [pc, #68]	; (80044f4 <can_config_sync_off+0x174>)
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4403      	add	r3, r0
 80044ba:	440b      	add	r3, r1
 80044bc:	330a      	adds	r3, #10
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	f107 030c 	add.w	r3, r7, #12
 80044c6:	4629      	mov	r1, r5
 80044c8:	4618      	mov	r0, r3
 80044ca:	47a0      	blx	r4
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj; i++)
 80044cc:	8afb      	ldrh	r3, [r7, #22]
 80044ce:	3301      	adds	r3, #1
 80044d0:	82fb      	strh	r3, [r7, #22]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	4907      	ldr	r1, [pc, #28]	; (80044f4 <can_config_sync_off+0x174>)
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	440b      	add	r3, r1
 80044e0:	3308      	adds	r3, #8
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8afa      	ldrh	r2, [r7, #22]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3c6      	bcc.n	800447a <can_config_sync_off+0xfa>
	}
}
 80044ec:	bf00      	nop
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bdb0      	pop	{r4, r5, r7, pc}
 80044f4:	2000000c 	.word	0x2000000c
 80044f8:	08004c61 	.word	0x08004c61
 80044fc:	08004c45 	.word	0x08004c45

08004500 <can_config_sync_on>:
 * @brief switch on synchronous process of defined module
 * @param table_pos position in configuration table
 * @return	li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_sync_on(uint16_t table_pos)
{
 8004500:	b5b0      	push	{r4, r5, r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	80fb      	strh	r3, [r7, #6]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	81bb      	strh	r3, [r7, #12]
	uint16_t i;

	/*----------------------------------------------------------------------*/
	/* synchronous transmit                                                    */
	/*----------------------------------------------------------------------*/
	can_config_module_tab[table_pos].tx_obj_sync = can_config_module_tab[table_pos].tx_obj;
 800450e:	88f9      	ldrh	r1, [r7, #6]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	4858      	ldr	r0, [pc, #352]	; (8004674 <can_config_sync_on+0x174>)
 8004514:	460b      	mov	r3, r1
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	440b      	add	r3, r1
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4403      	add	r3, r0
 800451e:	3309      	adds	r3, #9
 8004520:	7818      	ldrb	r0, [r3, #0]
 8004522:	4954      	ldr	r1, [pc, #336]	; (8004674 <can_config_sync_on+0x174>)
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	4413      	add	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	440b      	add	r3, r1
 800452e:	335d      	adds	r3, #93	; 0x5d
 8004530:	4602      	mov	r2, r0
 8004532:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < can_config_module_tab[table_pos].tx_obj; i++)
 8004534:	2300      	movs	r3, #0
 8004536:	81fb      	strh	r3, [r7, #14]
 8004538:	e036      	b.n	80045a8 <can_config_sync_on+0xa8>
	{
		can_main_synchron_tx_data_on(table_pos, i);
 800453a:	89fa      	ldrh	r2, [r7, #14]
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fd31 	bl	8004fa8 <can_main_synchron_tx_data_on>
		can_config_module_tab[table_pos].tx_dlc_sync[i] = can_config_module_tab[table_pos].tx_dlc[i];
 8004546:	88f9      	ldrh	r1, [r7, #6]
 8004548:	89fc      	ldrh	r4, [r7, #14]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	89f8      	ldrh	r0, [r7, #14]
 800454e:	4d49      	ldr	r5, [pc, #292]	; (8004674 <can_config_sync_on+0x174>)
 8004550:	460b      	mov	r3, r1
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	440b      	add	r3, r1
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	442b      	add	r3, r5
 800455a:	4423      	add	r3, r4
 800455c:	330e      	adds	r3, #14
 800455e:	781c      	ldrb	r4, [r3, #0]
 8004560:	4944      	ldr	r1, [pc, #272]	; (8004674 <can_config_sync_on+0x174>)
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	4403      	add	r3, r0
 800456e:	3362      	adds	r3, #98	; 0x62
 8004570:	4622      	mov	r2, r4
 8004572:	701a      	strb	r2, [r3, #0]
		can_config_module_tab[table_pos].tx_main_sync[i] = can_config_module_tab[table_pos].tx_main[i];
 8004574:	88f9      	ldrh	r1, [r7, #6]
 8004576:	89fc      	ldrh	r4, [r7, #14]
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	89f8      	ldrh	r0, [r7, #14]
 800457c:	4d3d      	ldr	r5, [pc, #244]	; (8004674 <can_config_sync_on+0x174>)
 800457e:	460b      	mov	r3, r1
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	440b      	add	r3, r1
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4423      	add	r3, r4
 8004588:	3310      	adds	r3, #16
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	442b      	add	r3, r5
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	4c38      	ldr	r4, [pc, #224]	; (8004674 <can_config_sync_on+0x174>)
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4413      	add	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4403      	add	r3, r0
 800459c:	331e      	adds	r3, #30
 800459e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	for (i = 0; i < can_config_module_tab[table_pos].tx_obj; i++)
 80045a2:	89fb      	ldrh	r3, [r7, #14]
 80045a4:	3301      	adds	r3, #1
 80045a6:	81fb      	strh	r3, [r7, #14]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	4932      	ldr	r1, [pc, #200]	; (8004674 <can_config_sync_on+0x174>)
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	440b      	add	r3, r1
 80045b6:	3309      	adds	r3, #9
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	89fa      	ldrh	r2, [r7, #14]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d3bb      	bcc.n	800453a <can_config_sync_on+0x3a>
	}

	/*----------------------------------------------------------------------*/
	/* synchronous receive                                                     */
	/*----------------------------------------------------------------------*/
	can_config_module_tab[table_pos].rx_obj_sync = can_config_module_tab[table_pos].rx_obj;
 80045c2:	88f9      	ldrh	r1, [r7, #6]
 80045c4:	88fa      	ldrh	r2, [r7, #6]
 80045c6:	482b      	ldr	r0, [pc, #172]	; (8004674 <can_config_sync_on+0x174>)
 80045c8:	460b      	mov	r3, r1
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	440b      	add	r3, r1
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4403      	add	r3, r0
 80045d2:	3308      	adds	r3, #8
 80045d4:	7818      	ldrb	r0, [r3, #0]
 80045d6:	4927      	ldr	r1, [pc, #156]	; (8004674 <can_config_sync_on+0x174>)
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	335c      	adds	r3, #92	; 0x5c
 80045e4:	4602      	mov	r2, r0
 80045e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj; i++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	81fb      	strh	r3, [r7, #14]
 80045ec:	e030      	b.n	8004650 <can_config_sync_on+0x150>
	{
		can_config_module_tab[table_pos].rx_dlc_sync[i] = can_config_module_tab[table_pos].rx_dlc[i];
 80045ee:	88f9      	ldrh	r1, [r7, #6]
 80045f0:	89fc      	ldrh	r4, [r7, #14]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	89f8      	ldrh	r0, [r7, #14]
 80045f6:	4d1f      	ldr	r5, [pc, #124]	; (8004674 <can_config_sync_on+0x174>)
 80045f8:	460b      	mov	r3, r1
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	440b      	add	r3, r1
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	442b      	add	r3, r5
 8004602:	4423      	add	r3, r4
 8004604:	330a      	adds	r3, #10
 8004606:	781c      	ldrb	r4, [r3, #0]
 8004608:	491a      	ldr	r1, [pc, #104]	; (8004674 <can_config_sync_on+0x174>)
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	4413      	add	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	440b      	add	r3, r1
 8004614:	4403      	add	r3, r0
 8004616:	335e      	adds	r3, #94	; 0x5e
 8004618:	4622      	mov	r2, r4
 800461a:	701a      	strb	r2, [r3, #0]
		can_config_module_tab[table_pos].rx_main_sync[i] = can_config_module_tab[table_pos].rx_main[i];
 800461c:	88f9      	ldrh	r1, [r7, #6]
 800461e:	89fc      	ldrh	r4, [r7, #14]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	89f8      	ldrh	r0, [r7, #14]
 8004624:	4d13      	ldr	r5, [pc, #76]	; (8004674 <can_config_sync_on+0x174>)
 8004626:	460b      	mov	r3, r1
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	440b      	add	r3, r1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4423      	add	r3, r4
 8004630:	330c      	adds	r3, #12
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	442b      	add	r3, r5
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	4c0e      	ldr	r4, [pc, #56]	; (8004674 <can_config_sync_on+0x174>)
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	4413      	add	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4403      	add	r3, r0
 8004644:	331a      	adds	r3, #26
 8004646:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj; i++)
 800464a:	89fb      	ldrh	r3, [r7, #14]
 800464c:	3301      	adds	r3, #1
 800464e:	81fb      	strh	r3, [r7, #14]
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	4908      	ldr	r1, [pc, #32]	; (8004674 <can_config_sync_on+0x174>)
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	3308      	adds	r3, #8
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	89fa      	ldrh	r2, [r7, #14]
 8004666:	429a      	cmp	r2, r3
 8004668:	d3c1      	bcc.n	80045ee <can_config_sync_on+0xee>
#ifdef LI_CAN_SLV_MON
		can_config_module_tab[table_pos].rx_mon_sync[i] = can_config_module_tab[table_pos].rx_mon[i];
#endif // #ifdef LI_CAN_SLV_MON
	}

	return (err);
 800466a:	89bb      	ldrh	r3, [r7, #12]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bdb0      	pop	{r4, r5, r7, pc}
 8004674:	2000000c 	.word	0x2000000c

08004678 <can_config_module_nr_valid>:
 * @param module_silent state of module (SILENT, AWAKE)
 * @param module_found 0 if module is found in the table, otherwise 1
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_module_nr_valid(li_can_slv_module_nr_t module_nr, uint16_t *table_pos, can_config_module_silent_t *module_silent, uint16_t *module_found)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4603      	mov	r3, r0
 8004686:	81fb      	strh	r3, [r7, #14]
	*module_found = 0;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2200      	movs	r2, #0
 800468c:	801a      	strh	r2, [r3, #0]
	for (*table_pos = 0; (*table_pos < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES) && !(*module_found); (*table_pos)++)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2200      	movs	r2, #0
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	e016      	b.n	80046c4 <can_config_module_nr_valid+0x4c>
	{
		if (can_config_module_tab[*table_pos].module_nr == module_nr)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4a17      	ldr	r2, [pc, #92]	; (80046fc <can_config_module_nr_valid+0x84>)
 800469e:	460b      	mov	r3, r1
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	440b      	add	r3, r1
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	3306      	adds	r3, #6
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	89fa      	ldrh	r2, [r7, #14]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d102      	bne.n	80046b8 <can_config_module_nr_valid+0x40>
		{
			*module_found = 1;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2201      	movs	r2, #1
 80046b6:	801a      	strh	r2, [r3, #0]
	for (*table_pos = 0; (*table_pos < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES) && !(*module_found); (*table_pos)++)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	3301      	adds	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <can_config_module_nr_valid+0x5c>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0e0      	beq.n	8004696 <can_config_module_nr_valid+0x1e>
		}
	}
	(*table_pos)--;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	801a      	strh	r2, [r3, #0]
	*module_silent = can_config_module_silent[*table_pos];
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <can_config_module_nr_valid+0x88>)
 80046e8:	5c9a      	ldrb	r2, [r3, r2]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	701a      	strb	r2, [r3, #0]
	return LI_CAN_SLV_ERR_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	2000000c 	.word	0x2000000c
 8004700:	20000094 	.word	0x20000094

08004704 <can_config_get_module_type>:
 * @param table_pos: position in configuration table
 * @param module_type:  type of module at the given position
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_get_module_type(uint16_t table_pos, char_t *module_type)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	6039      	str	r1, [r7, #0]
 800470e:	80fb      	strh	r3, [r7, #6]
	if (table_pos < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES)
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10d      	bne.n	8004732 <can_config_get_module_type+0x2e>
	{
		can_port_memory_cpy(module_type, can_config_module_tab[table_pos].type, CAN_CONFIG_TYPE_STRING_LENGTH);
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4a07      	ldr	r2, [pc, #28]	; (8004740 <can_config_get_module_type+0x3c>)
 8004722:	4413      	add	r3, r2
 8004724:	2205      	movs	r2, #5
 8004726:	4619      	mov	r1, r3
 8004728:	6838      	ldr	r0, [r7, #0]
 800472a:	f001 fe2d 	bl	8006388 <memcpy>
	}
	else
	{
		return ERR_MSG_CAN_CONFIG_MODULE_WRONG_TABLE_POS;
	}
	return LI_CAN_SLV_ERR_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e001      	b.n	8004736 <can_config_get_module_type+0x32>
		return ERR_MSG_CAN_CONFIG_MODULE_WRONG_TABLE_POS;
 8004732:	f245 032c 	movw	r3, #20524	; 0x502c
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000000c 	.word	0x2000000c

08004744 <can_config_get_module_nr>:
 * @param table_pos position in configuration table
 * @param module_nr number of module at the given table position
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_get_module_nr(uint16_t table_pos, li_can_slv_module_nr_t *module_nr)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	80fb      	strh	r3, [r7, #6]
	if (table_pos < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES)
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10c      	bne.n	8004770 <can_config_get_module_nr+0x2c>
	{
		*module_nr = can_config_module_tab[table_pos].module_nr;
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	4909      	ldr	r1, [pc, #36]	; (8004780 <can_config_get_module_nr+0x3c>)
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	440b      	add	r3, r1
 8004764:	3306      	adds	r3, #6
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		return ERR_MSG_CAN_CONFIG_MODULE_WRONG_TABLE_POS;
	}
	return LI_CAN_SLV_ERR_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e001      	b.n	8004774 <can_config_get_module_nr+0x30>
		return ERR_MSG_CAN_CONFIG_MODULE_WRONG_TABLE_POS;
 8004770:	f245 032c 	movw	r3, #20524	; 0x502c
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	2000000c 	.word	0x2000000c

08004784 <can_config_get_module_nr_main>:
#endif // #if defined(OUTER) || defined(OUTER_APP)

#if defined(OUTER) || defined(OUTER_APP)
li_can_slv_module_nr_t can_config_get_module_nr_main(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
	return (can_config_module_tab[LI_CAN_SLV_CONFIG_TABLE_POS_MAIN_MODULE].module_nr);
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <can_config_get_module_nr_main+0x14>)
 800478a:	88db      	ldrh	r3, [r3, #6]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000000c 	.word	0x2000000c

0800479c <can_config_get_nr_of_modules>:
/**
 * @brief can_config_get_nr_of_modules
 * @param nr_of_modules number of defined modules
 */
void can_config_get_nr_of_modules(uint16_t *nr_of_modules)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	*nr_of_modules = can_config_nr_of_modules;
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <can_config_get_nr_of_modules+0x1c>)
 80047a6:	881a      	ldrh	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	801a      	strh	r2, [r3, #0]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	200005aa 	.word	0x200005aa

080047bc <can_config_set_module_silent_awake>:
 * @param table_pos position in configuration table
 * @param module_silent_awake silent or awake state
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_config_set_module_silent_awake(uint16_t table_pos, can_config_module_silent_t module_silent_awake)
{
 80047bc:	b5b0      	push	{r4, r5, r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	460a      	mov	r2, r1
 80047c6:	80fb      	strh	r3, [r7, #6]
 80047c8:	4613      	mov	r3, r2
 80047ca:	717b      	strb	r3, [r7, #5]
	if (table_pos < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES)
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d135      	bne.n	800483e <can_config_set_module_silent_awake+0x82>
	{
		can_config_module_silent[table_pos] = module_silent_awake;
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	491e      	ldr	r1, [pc, #120]	; (8004850 <can_config_set_module_silent_awake+0x94>)
 80047d6:	797a      	ldrb	r2, [r7, #5]
 80047d8:	54ca      	strb	r2, [r1, r3]
		if (can_config_set_module_silent_awake_call != NULL)
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <can_config_set_module_silent_awake+0x98>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d018      	beq.n	8004814 <can_config_set_module_silent_awake+0x58>
		{
			can_config_set_module_silent_awake_call(table_pos, can_config_module_tab[table_pos].type, can_config_module_tab[table_pos].module_nr, can_config_module_silent[table_pos]);
 80047e2:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <can_config_set_module_silent_awake+0x98>)
 80047e4:	681c      	ldr	r4, [r3, #0]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4413      	add	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4a19      	ldr	r2, [pc, #100]	; (8004858 <can_config_set_module_silent_awake+0x9c>)
 80047f2:	189d      	adds	r5, r3, r2
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	4918      	ldr	r1, [pc, #96]	; (8004858 <can_config_set_module_silent_awake+0x9c>)
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	4413      	add	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	440b      	add	r3, r1
 8004802:	3306      	adds	r3, #6
 8004804:	8819      	ldrh	r1, [r3, #0]
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	4a11      	ldr	r2, [pc, #68]	; (8004850 <can_config_set_module_silent_awake+0x94>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	88f8      	ldrh	r0, [r7, #6]
 800480e:	460a      	mov	r2, r1
 8004810:	4629      	mov	r1, r5
 8004812:	47a0      	blx	r4
		}

		switch (can_config_module_silent[table_pos])
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <can_config_set_module_silent_awake+0x94>)
 8004818:	5cd3      	ldrb	r3, [r2, r3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <can_config_set_module_silent_awake+0x68>
 800481e:	2b01      	cmp	r3, #1
 8004820:	d005      	beq.n	800482e <can_config_set_module_silent_awake+0x72>
 8004822:	e009      	b.n	8004838 <can_config_set_module_silent_awake+0x7c>
		{
			case LI_CAN_SLV_CONFIG_MODULE_STATE_SILENT:
				can_config_sync_off(table_pos);
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fdaa 	bl	8004380 <can_config_sync_off>
				break;
 800482c:	e00a      	b.n	8004844 <can_config_set_module_silent_awake+0x88>

			case LI_CAN_SLV_CONFIG_MODULE_STATE_AWAKE:
				can_config_sync_on(table_pos);
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fe65 	bl	8004500 <can_config_sync_on>
				break;
 8004836:	e005      	b.n	8004844 <can_config_set_module_silent_awake+0x88>

			default:
				return ERR_MSG_CAN_CONFIG_INVALID_SILENT_AWAKE_STATE;
 8004838:	f245 033c 	movw	r3, #20540	; 0x503c
 800483c:	e003      	b.n	8004846 <can_config_set_module_silent_awake+0x8a>
				break;
		}
	}
	else
	{
		return ERR_MSG_CAN_CONFIG_MODULE_WRONG_TABLE_POS;
 800483e:	f245 032c 	movw	r3, #20524	; 0x502c
 8004842:	e000      	b.n	8004846 <can_config_set_module_silent_awake+0x8a>
	}
	return LI_CAN_SLV_ERR_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bdb0      	pop	{r4, r5, r7, pc}
 800484e:	bf00      	nop
 8004850:	20000094 	.word	0x20000094
 8004854:	200005b4 	.word	0x200005b4
 8004858:	2000000c 	.word	0x2000000c

0800485c <can_config_set_module>:
 * @return #LI_CAN_SLV_ERR_OK, #LI_CAN_SLV_ERR_OK, #ERR_MSG_CAN_MAIN_OVER_TABLE_POS, #ERR_MSG_CAN_MAIN_OVER_OBJECT_NR, #LI_CAN_SLV_ERR_OK or #ERR_MSG_CAN_NO_MSG_OBJ_FREE
 */
static li_can_slv_errorcode_t can_config_set_module(uint16_t table_pos, const li_can_slv_config_module_t *module, li_can_slv_module_nr_t module_nr,
        void *rx0, void *rx1, void *rx2, void *rx3,
        void *tx0, void *tx1, void *tx2, void *tx3)
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b08c      	sub	sp, #48	; 0x30
 8004860:	af04      	add	r7, sp, #16
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	4603      	mov	r3, r0
 8004868:	81fb      	strh	r3, [r7, #14]
 800486a:	4613      	mov	r3, r2
 800486c:	81bb      	strh	r3, [r7, #12]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	83fb      	strh	r3, [r7, #30]
	uint16_t i;
	uint16_t can_id, msg_obj;
	uint16_t can_id_or, can_id_and, mask;

	can_port_memory_cpy(&can_config_module_tab[table_pos], module, sizeof(li_can_slv_config_module_t));
 8004872:	89fa      	ldrh	r2, [r7, #14]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	4413      	add	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4aa9      	ldr	r2, [pc, #676]	; (8004b24 <can_config_set_module+0x2c8>)
 800487e:	4413      	add	r3, r2
 8004880:	2288      	movs	r2, #136	; 0x88
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fd7f 	bl	8006388 <memcpy>

	// limit module number
	if ((module_nr > CAN_CONFIG_MAX_MODULE_NR) || (module_nr < CAN_CONFIG_MIN_MODULE_NR))
 800488a:	89bb      	ldrh	r3, [r7, #12]
 800488c:	2b7c      	cmp	r3, #124	; 0x7c
 800488e:	d802      	bhi.n	8004896 <can_config_set_module+0x3a>
 8004890:	89bb      	ldrh	r3, [r7, #12]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d802      	bhi.n	800489c <can_config_set_module+0x40>
	{
		module_nr = LI_CAN_SLV_CONFIG_DEF_MOD_NR1 + table_pos;
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	337d      	adds	r3, #125	; 0x7d
 800489a:	81bb      	strh	r3, [r7, #12]

#ifdef LI_CAN_SLV_DEBUG_CAN_INIT
	LI_CAN_SLV_DEBUG_PRINT("\n\ncan_config_set_module table_pos: %d, modnr: %d", table_pos, module_nr);
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_INIT

	can_config_module_tab[table_pos].module_nr = module_nr;
 800489c:	89fa      	ldrh	r2, [r7, #14]
 800489e:	49a1      	ldr	r1, [pc, #644]	; (8004b24 <can_config_set_module+0x2c8>)
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	440b      	add	r3, r1
 80048aa:	3306      	adds	r3, #6
 80048ac:	89ba      	ldrh	r2, [r7, #12]
 80048ae:	801a      	strh	r2, [r3, #0]

	// set receive application data pointers
	can_config_module_tab[table_pos].rx[0] = rx0;
 80048b0:	89fa      	ldrh	r2, [r7, #14]
 80048b2:	499c      	ldr	r1, [pc, #624]	; (8004b24 <can_config_set_module+0x2c8>)
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	4413      	add	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	440b      	add	r3, r1
 80048be:	3314      	adds	r3, #20
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
	can_config_module_tab[table_pos].rx[1] = rx1;
 80048c4:	89fa      	ldrh	r2, [r7, #14]
 80048c6:	4997      	ldr	r1, [pc, #604]	; (8004b24 <can_config_set_module+0x2c8>)
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	4413      	add	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	440b      	add	r3, r1
 80048d2:	3318      	adds	r3, #24
 80048d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d6:	601a      	str	r2, [r3, #0]
	can_config_module_tab[table_pos].rx[2] = rx2;
 80048d8:	89fa      	ldrh	r2, [r7, #14]
 80048da:	4992      	ldr	r1, [pc, #584]	; (8004b24 <can_config_set_module+0x2c8>)
 80048dc:	4613      	mov	r3, r2
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	440b      	add	r3, r1
 80048e6:	331c      	adds	r3, #28
 80048e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ea:	601a      	str	r2, [r3, #0]
	can_config_module_tab[table_pos].rx[3] = rx3;
 80048ec:	89fa      	ldrh	r2, [r7, #14]
 80048ee:	498d      	ldr	r1, [pc, #564]	; (8004b24 <can_config_set_module+0x2c8>)
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	440b      	add	r3, r1
 80048fa:	3320      	adds	r3, #32
 80048fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048fe:	601a      	str	r2, [r3, #0]

	// set transmit application data pointers
	can_config_module_tab[table_pos].tx[0] = tx0;
 8004900:	89fa      	ldrh	r2, [r7, #14]
 8004902:	4988      	ldr	r1, [pc, #544]	; (8004b24 <can_config_set_module+0x2c8>)
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	4413      	add	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	440b      	add	r3, r1
 800490e:	3324      	adds	r3, #36	; 0x24
 8004910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004912:	601a      	str	r2, [r3, #0]
	can_config_module_tab[table_pos].tx[1] = tx1;
 8004914:	89fa      	ldrh	r2, [r7, #14]
 8004916:	4983      	ldr	r1, [pc, #524]	; (8004b24 <can_config_set_module+0x2c8>)
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	4413      	add	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	440b      	add	r3, r1
 8004922:	3328      	adds	r3, #40	; 0x28
 8004924:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004926:	601a      	str	r2, [r3, #0]
	can_config_module_tab[table_pos].tx[2] = tx2;
 8004928:	89fa      	ldrh	r2, [r7, #14]
 800492a:	497e      	ldr	r1, [pc, #504]	; (8004b24 <can_config_set_module+0x2c8>)
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	440b      	add	r3, r1
 8004936:	332c      	adds	r3, #44	; 0x2c
 8004938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800493a:	601a      	str	r2, [r3, #0]
	can_config_module_tab[table_pos].tx[3] = tx3;
 800493c:	89fa      	ldrh	r2, [r7, #14]
 800493e:	4979      	ldr	r1, [pc, #484]	; (8004b24 <can_config_set_module+0x2c8>)
 8004940:	4613      	mov	r3, r2
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	4413      	add	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	440b      	add	r3, r1
 800494a:	3330      	adds	r3, #48	; 0x30
 800494c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494e:	601a      	str	r2, [r3, #0]

	/* define CAN message object for transmitting synchronous data from main CAN Node to master               */
	/* define CAN message object for receiving synchronous data from main CAN Node on monitor CAN Node        */
	/* define CAN message object for receiving synchronous data from main CPU on monitor CPU on main CAN Node */
	/* the can_id is always the same for this three use cases                                                 */
	can_id = CAN_CONFIG_DATA_TX_MASK + ((module_nr - 1) << 2);
 8004950:	89bb      	ldrh	r3, [r7, #12]
 8004952:	3b01      	subs	r3, #1
 8004954:	b29b      	uxth	r3, r3
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	b29b      	uxth	r3, r3
 800495a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495e:	82fb      	strh	r3, [r7, #22]
	can_config_module_tab[table_pos].tx_obj_sync = can_config_module_tab[table_pos].tx_obj;
 8004960:	89f9      	ldrh	r1, [r7, #14]
 8004962:	89fa      	ldrh	r2, [r7, #14]
 8004964:	486f      	ldr	r0, [pc, #444]	; (8004b24 <can_config_set_module+0x2c8>)
 8004966:	460b      	mov	r3, r1
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	440b      	add	r3, r1
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4403      	add	r3, r0
 8004970:	3309      	adds	r3, #9
 8004972:	7818      	ldrb	r0, [r3, #0]
 8004974:	496b      	ldr	r1, [pc, #428]	; (8004b24 <can_config_set_module+0x2c8>)
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	335d      	adds	r3, #93	; 0x5d
 8004982:	4602      	mov	r2, r0
 8004984:	701a      	strb	r2, [r3, #0]
	if (can_mainmon_type == CAN_MAINMON_TYPE_MAIN)
	{
#endif // #ifdef LI_CAN_SLV_MAIN_MON

		/* define CAN message object for transmitting synchronous data from main CAN Node to master */
		for (i = 0; i < can_config_module_tab[table_pos].tx_obj; i++)
 8004986:	2300      	movs	r3, #0
 8004988:	83bb      	strh	r3, [r7, #28]
 800498a:	e026      	b.n	80049da <can_config_set_module+0x17e>
		{
			can_config_module_tab[table_pos].tx_dlc_sync[i] = can_config_module_tab[table_pos].tx_dlc[i];
 800498c:	89f9      	ldrh	r1, [r7, #14]
 800498e:	8bbc      	ldrh	r4, [r7, #28]
 8004990:	89fa      	ldrh	r2, [r7, #14]
 8004992:	8bb8      	ldrh	r0, [r7, #28]
 8004994:	4d63      	ldr	r5, [pc, #396]	; (8004b24 <can_config_set_module+0x2c8>)
 8004996:	460b      	mov	r3, r1
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	440b      	add	r3, r1
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	442b      	add	r3, r5
 80049a0:	4423      	add	r3, r4
 80049a2:	330e      	adds	r3, #14
 80049a4:	781c      	ldrb	r4, [r3, #0]
 80049a6:	495f      	ldr	r1, [pc, #380]	; (8004b24 <can_config_set_module+0x2c8>)
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	4413      	add	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	440b      	add	r3, r1
 80049b2:	4403      	add	r3, r0
 80049b4:	3362      	adds	r3, #98	; 0x62
 80049b6:	4622      	mov	r2, r4
 80049b8:	701a      	strb	r2, [r3, #0]

			/* calculation of transmit CAN identifier */
			err = can_main_sync_process_tx_data_cnfg(table_pos, i, module_nr);
 80049ba:	89ba      	ldrh	r2, [r7, #12]
 80049bc:	8bb9      	ldrh	r1, [r7, #28]
 80049be:	89fb      	ldrh	r3, [r7, #14]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fa71 	bl	8004ea8 <can_main_sync_process_tx_data_cnfg>
 80049c6:	4603      	mov	r3, r0
 80049c8:	83fb      	strh	r3, [r7, #30]
			if (err != LI_CAN_SLV_ERR_OK)
 80049ca:	8bfb      	ldrh	r3, [r7, #30]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <can_config_set_module+0x178>
			{
				return (err);
 80049d0:	8bfb      	ldrh	r3, [r7, #30]
 80049d2:	e12c      	b.n	8004c2e <can_config_set_module+0x3d2>
		for (i = 0; i < can_config_module_tab[table_pos].tx_obj; i++)
 80049d4:	8bbb      	ldrh	r3, [r7, #28]
 80049d6:	3301      	adds	r3, #1
 80049d8:	83bb      	strh	r3, [r7, #28]
 80049da:	89fa      	ldrh	r2, [r7, #14]
 80049dc:	4951      	ldr	r1, [pc, #324]	; (8004b24 <can_config_set_module+0x2c8>)
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4413      	add	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	440b      	add	r3, r1
 80049e8:	3309      	adds	r3, #9
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8bba      	ldrh	r2, [r7, #28]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3cb      	bcc.n	800498c <can_config_set_module+0x130>
		}
	}
#endif // #ifdef LI_CAN_SLV_MAIN_MON

	/* define CAN message object for receiving synchronous data from master on main & monitor CAN node */
	can_id = CAN_CONFIG_DATA_RX_MASK + ((module_nr - 1) << 2);
 80049f4:	89bb      	ldrh	r3, [r7, #12]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a02:	82fb      	strh	r3, [r7, #22]
	can_config_module_tab[table_pos].rx_obj_sync = can_config_module_tab[table_pos].rx_obj;
 8004a04:	89f9      	ldrh	r1, [r7, #14]
 8004a06:	89fa      	ldrh	r2, [r7, #14]
 8004a08:	4846      	ldr	r0, [pc, #280]	; (8004b24 <can_config_set_module+0x2c8>)
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	440b      	add	r3, r1
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4403      	add	r3, r0
 8004a14:	3308      	adds	r3, #8
 8004a16:	7818      	ldrb	r0, [r3, #0]
 8004a18:	4942      	ldr	r1, [pc, #264]	; (8004b24 <can_config_set_module+0x2c8>)
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	4413      	add	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	440b      	add	r3, r1
 8004a24:	335c      	adds	r3, #92	; 0x5c
 8004a26:	4602      	mov	r2, r0
 8004a28:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < can_config_module_tab[table_pos].rx_obj_sync; i++)
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	83bb      	strh	r3, [r7, #28]
 8004a2e:	e064      	b.n	8004afa <can_config_set_module+0x29e>
	{
		can_config_module_tab[table_pos].rx_dlc_sync[i] = can_config_module_tab[table_pos].rx_dlc[i];
 8004a30:	89f9      	ldrh	r1, [r7, #14]
 8004a32:	8bbc      	ldrh	r4, [r7, #28]
 8004a34:	89fa      	ldrh	r2, [r7, #14]
 8004a36:	8bb8      	ldrh	r0, [r7, #28]
 8004a38:	4d3a      	ldr	r5, [pc, #232]	; (8004b24 <can_config_set_module+0x2c8>)
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	440b      	add	r3, r1
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	442b      	add	r3, r5
 8004a44:	4423      	add	r3, r4
 8004a46:	330a      	adds	r3, #10
 8004a48:	781c      	ldrb	r4, [r3, #0]
 8004a4a:	4936      	ldr	r1, [pc, #216]	; (8004b24 <can_config_set_module+0x2c8>)
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	4413      	add	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	440b      	add	r3, r1
 8004a56:	4403      	add	r3, r0
 8004a58:	335e      	adds	r3, #94	; 0x5e
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	701a      	strb	r2, [r3, #0]

		/* main CAN node */
		err = can_main_get_next_free_msg_obj(&msg_obj);
 8004a5e:	f107 0312 	add.w	r3, r7, #18
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fc8e 	bl	8005384 <can_main_get_next_free_msg_obj>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	83fb      	strh	r3, [r7, #30]
		if (err != LI_CAN_SLV_ERR_OK)
 8004a6c:	8bfb      	ldrh	r3, [r7, #30]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <can_config_set_module+0x21a>
		{
			return (err);
 8004a72:	8bfb      	ldrh	r3, [r7, #30]
 8004a74:	e0db      	b.n	8004c2e <can_config_set_module+0x3d2>
		}

		can_config_module_tab[table_pos].rx_msg_obj_main[i] = msg_obj;
 8004a76:	89fa      	ldrh	r2, [r7, #14]
 8004a78:	8bb9      	ldrh	r1, [r7, #28]
 8004a7a:	8a7c      	ldrh	r4, [r7, #18]
 8004a7c:	4829      	ldr	r0, [pc, #164]	; (8004b24 <can_config_set_module+0x2c8>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3328      	adds	r3, #40	; 0x28
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	4403      	add	r3, r0
 8004a8e:	4622      	mov	r2, r4
 8004a90:	809a      	strh	r2, [r3, #4]
		err = can_main_define_msg_obj(msg_obj, can_id + i, CAN_CONFIG_ACCEPTANCE_ONE_ID, can_config_module_tab[table_pos].rx_dlc[i], CAN_CONFIG_DIR_RX, CAN_MAIN_SERVICE_ID_RX, CAN_OBJECT_IS_SYNC);
 8004a92:	8a7c      	ldrh	r4, [r7, #18]
 8004a94:	8afa      	ldrh	r2, [r7, #22]
 8004a96:	8bbb      	ldrh	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	b29d      	uxth	r5, r3
 8004a9c:	89fa      	ldrh	r2, [r7, #14]
 8004a9e:	8bb9      	ldrh	r1, [r7, #28]
 8004aa0:	4820      	ldr	r0, [pc, #128]	; (8004b24 <can_config_set_module+0x2c8>)
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	4413      	add	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4403      	add	r3, r0
 8004aac:	440b      	add	r3, r1
 8004aae:	330a      	adds	r3, #10
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	9302      	str	r3, [sp, #8]
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	2300      	movs	r3, #0
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f000 fbd6 	bl	8005278 <can_main_define_msg_obj>
 8004acc:	4603      	mov	r3, r0
 8004ace:	83fb      	strh	r3, [r7, #30]
		if (err != LI_CAN_SLV_ERR_OK)
 8004ad0:	8bfb      	ldrh	r3, [r7, #30]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <can_config_set_module+0x27e>
		{
			return (err);
 8004ad6:	8bfb      	ldrh	r3, [r7, #30]
 8004ad8:	e0a9      	b.n	8004c2e <can_config_set_module+0x3d2>
		}

		err = can_main_msg_obj_rx_data_cnfg(msg_obj, table_pos);
 8004ada:	8a7b      	ldrh	r3, [r7, #18]
 8004adc:	89fa      	ldrh	r2, [r7, #14]
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fa81 	bl	8004fe8 <can_main_msg_obj_rx_data_cnfg>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	83fb      	strh	r3, [r7, #30]
		if (err != LI_CAN_SLV_ERR_OK)
 8004aea:	8bfb      	ldrh	r3, [r7, #30]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <can_config_set_module+0x298>
		{
			return (err);
 8004af0:	8bfb      	ldrh	r3, [r7, #30]
 8004af2:	e09c      	b.n	8004c2e <can_config_set_module+0x3d2>
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj_sync; i++)
 8004af4:	8bbb      	ldrh	r3, [r7, #28]
 8004af6:	3301      	adds	r3, #1
 8004af8:	83bb      	strh	r3, [r7, #28]
 8004afa:	89fa      	ldrh	r2, [r7, #14]
 8004afc:	4909      	ldr	r1, [pc, #36]	; (8004b24 <can_config_set_module+0x2c8>)
 8004afe:	4613      	mov	r3, r2
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	440b      	add	r3, r1
 8004b08:	335c      	adds	r3, #92	; 0x5c
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8bba      	ldrh	r2, [r7, #28]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d38d      	bcc.n	8004a30 <can_config_set_module+0x1d4>
			return (err);
		}
#endif // #ifdef LI_CAN_SLV_MON
	}

	can_id_or = 0x01FC & ((CAN_CONFIG_MODULE_NR_BROADCAST - 1) << 2);
 8004b14:	2300      	movs	r3, #0
 8004b16:	837b      	strh	r3, [r7, #26]
	can_id_and = 0x01FC & ((CAN_CONFIG_MODULE_NR_BROADCAST - 1) << 2);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	833b      	strh	r3, [r7, #24]

	for (i = 0; i < (table_pos + 1); i++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	83bb      	strh	r3, [r7, #28]
 8004b20:	e02b      	b.n	8004b7a <can_config_set_module+0x31e>
 8004b22:	bf00      	nop
 8004b24:	2000000c 	.word	0x2000000c
	{
		can_id_or |= (0x01FC & ((can_config_module_tab[i].module_nr - 1) << 2));
 8004b28:	8bba      	ldrh	r2, [r7, #28]
 8004b2a:	4943      	ldr	r1, [pc, #268]	; (8004c38 <can_config_set_module+0x3dc>)
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	4413      	add	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	440b      	add	r3, r1
 8004b36:	3306      	adds	r3, #6
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	b21b      	sxth	r3, r3
 8004b40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b44:	b21a      	sxth	r2, r3
 8004b46:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	837b      	strh	r3, [r7, #26]
		can_id_and &= (0x01FC & ((can_config_module_tab[i].module_nr - 1) << 2));
 8004b50:	8bba      	ldrh	r2, [r7, #28]
 8004b52:	4939      	ldr	r1, [pc, #228]	; (8004c38 <can_config_set_module+0x3dc>)
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	440b      	add	r3, r1
 8004b5e:	3306      	adds	r3, #6
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	8b3b      	ldrh	r3, [r7, #24]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b72:	833b      	strh	r3, [r7, #24]
	for (i = 0; i < (table_pos + 1); i++)
 8004b74:	8bbb      	ldrh	r3, [r7, #28]
 8004b76:	3301      	adds	r3, #1
 8004b78:	83bb      	strh	r3, [r7, #28]
 8004b7a:	8bba      	ldrh	r2, [r7, #28]
 8004b7c:	89fb      	ldrh	r3, [r7, #14]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	429a      	cmp	r2, r3
 8004b82:	dbd1      	blt.n	8004b28 <can_config_set_module+0x2cc>
	}

	mask = 0x01FC & (can_id_and | ~can_id_or);
 8004b84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	b21a      	sxth	r2, r3
 8004b8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b9a:	82bb      	strh	r3, [r7, #20]
		err = can_main_define_msg_obj(CAN_CONFIG_MSG_MAIN_OBJ_ASYNC_DATA_RX, CAN_CONFIG_ASYNC_DATA_RX_SLAVE_ID, CAN_CONFIG_ACCEPTANCE_MASK | mask, CAN_CONFIG_ASYNC_DATA_RX_DLC, CAN_CONFIG_DIR_RX, CAN_MAIN_ASYNC_SERVICE_ID_RX, CAN_OBJECT_NOT_SYNC);
	}
#endif // #ifdef LI_CAN_SLV_ASYNC

	/* define message object for receiving system messages */
	if (err == LI_CAN_SLV_ERR_OK)
 8004b9c:	8bfb      	ldrh	r3, [r7, #30]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d112      	bne.n	8004bc8 <can_config_set_module+0x36c>
	{
		err = can_main_define_msg_obj(CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS1, CAN_CONFIG_SYS_MSG_ID, CAN_CONFIG_ACCEPTANCE_MASK | mask, CAN_CONFIG_SYS_MSG_DLC, CAN_CONFIG_DIR_RX, CAN_MAIN_SERVICE_ID_RX, CAN_OBJECT_NOT_SYNC);
 8004ba2:	8abb      	ldrh	r3, [r7, #20]
 8004ba4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004ba8:	f043 0303 	orr.w	r3, r3, #3
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9302      	str	r3, [sp, #8]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2308      	movs	r3, #8
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	2002      	movs	r0, #2
 8004bc0:	f000 fb5a 	bl	8005278 <can_main_define_msg_obj>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	83fb      	strh	r3, [r7, #30]
	}

#if 1
	if (err == LI_CAN_SLV_ERR_OK)
 8004bc8:	8bfb      	ldrh	r3, [r7, #30]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d112      	bne.n	8004bf4 <can_config_set_module+0x398>
	{
		err = can_main_define_msg_obj(CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS2, CAN_CONFIG_SYS_MSG_ID, CAN_CONFIG_ACCEPTANCE_MASK | mask, CAN_CONFIG_SYS_MSG_DLC, CAN_CONFIG_DIR_RX, CAN_MAIN_SERVICE_ID_RX, CAN_OBJECT_NOT_SYNC);
 8004bce:	8abb      	ldrh	r3, [r7, #20]
 8004bd0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004bd4:	f043 0303 	orr.w	r3, r3, #3
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9302      	str	r3, [sp, #8]
 8004bde:	2301      	movs	r3, #1
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2308      	movs	r3, #8
 8004be8:	2102      	movs	r1, #2
 8004bea:	2003      	movs	r0, #3
 8004bec:	f000 fb44 	bl	8005278 <can_main_define_msg_obj>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	83fb      	strh	r3, [r7, #30]
	}

	if (err == LI_CAN_SLV_ERR_OK)
 8004bf4:	8bfb      	ldrh	r3, [r7, #30]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d105      	bne.n	8004c06 <can_config_set_module+0x3aa>
	{
		err = can_hw_combine_msg_obj_to_two_stage_fifo(CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS1, CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS2);
 8004bfa:	2103      	movs	r1, #3
 8004bfc:	2002      	movs	r0, #2
 8004bfe:	f7ff f8ab 	bl	8003d58 <can_hw_combine_msg_obj_to_two_stage_fifo>
 8004c02:	4603      	mov	r3, r0
 8004c04:	83fb      	strh	r3, [r7, #30]
	}
#endif

	/* in case of silent state call silent awake routine */
	if (err == LI_CAN_SLV_ERR_OK)
 8004c06:	8bfb      	ldrh	r3, [r7, #30]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <can_config_set_module+0x3c4>
	{
		err = can_config_set_module_silent_awake(table_pos, can_config_module_silent[table_pos]);
 8004c0c:	89fb      	ldrh	r3, [r7, #14]
 8004c0e:	4a0b      	ldr	r2, [pc, #44]	; (8004c3c <can_config_set_module+0x3e0>)
 8004c10:	5cd2      	ldrb	r2, [r2, r3]
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fdd0 	bl	80047bc <can_config_set_module_silent_awake>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	83fb      	strh	r3, [r7, #30]
	}

	can_config_nr_of_modules++;
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <can_config_set_module+0x3e4>)
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <can_config_set_module+0x3e4>)
 8004c2a:	801a      	strh	r2, [r3, #0]

	return (err);
 8004c2c:	8bfb      	ldrh	r3, [r7, #30]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bdb0      	pop	{r4, r5, r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2000000c 	.word	0x2000000c
 8004c3c:	20000094 	.word	0x20000094
 8004c40:	200005aa 	.word	0x200005aa

08004c44 <rx_main_dummy>:
 * @param app is the pointer to the application data
 * @param dlc is the data length code of transmitted message
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
static li_can_slv_errorcode_t rx_main_dummy(byte_t *can, void *app, uint16_t dlc)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
	can = can; //dummy assignment
	dlc = dlc; //dummy assignment
	app = app; //dummy assignment
	return (LI_CAN_SLV_ERR_OK);
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <tx_main_dummy>:
 * @param app is the pointer to the application data
 * @param dlc is the data length code of transmitted message
 * @return	li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
static li_can_slv_errorcode_t tx_main_dummy(byte_t *can, void *app, uint16_t dlc)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
	can = can; //dummy assignment
	dlc = dlc; //dummy assignment
	app = app; //dummy assignment
	return (LI_CAN_SLV_ERR_OK);
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <li_can_slv_init>:
/**
 * @param baudrate baud rate used for initialization
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t li_can_slv_init(can_config_bdr_t baudrate)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af04      	add	r7, sp, #16
 8004c82:	4603      	mov	r3, r0
 8004c84:	80fb      	strh	r3, [r7, #6]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	81fb      	strh	r3, [r7, #14]
	uint16_t msg_obj;
#endif // #if defined(OUTER) || defined(OUTER_APP)
	uint16_t i;

#if defined(OUTER) || defined(OUTER_APP)
	if (err == LI_CAN_SLV_ERR_OK)
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <li_can_slv_init+0x1c>
	{
		err = can_config_init();
 8004c90:	f7ff fa38 	bl	8004104 <can_config_init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	81fb      	strh	r3, [r7, #14]
	}
#endif // #if defined(OUTER) || defined(OUTER_APP)

	// save the baud rate on startup
	can_config_set_baudrate_startup(baudrate);
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff faa8 	bl	80041f0 <can_config_set_baudrate_startup>

	if (err == LI_CAN_SLV_ERR_OK)
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d103      	bne.n	8004cae <li_can_slv_init+0x32>
	{
		err = can_config_set_baudrate_table();
 8004ca6:	f7ff fa53 	bl	8004150 <can_config_set_baudrate_table>
 8004caa:	4603      	mov	r3, r0
 8004cac:	81fb      	strh	r3, [r7, #14]
	}

	if (err == LI_CAN_SLV_ERR_OK)
 8004cae:	89fb      	ldrh	r3, [r7, #14]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <li_can_slv_init+0x40>
	{
		err = can_hw_init();
 8004cb4:	f7ff f840 	bl	8003d38 <can_hw_init>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	81fb      	strh	r3, [r7, #14]
		}
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_MAIN_MON
	}
#endif // #ifdef LI_CAN_SLV_MAIN_MON

	if (err == LI_CAN_SLV_ERR_OK)
 8004cbc:	89fb      	ldrh	r3, [r7, #14]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <li_can_slv_init+0x4e>
	{
		err = can_main_init();
 8004cc2:	f000 f8e5 	bl	8004e90 <can_main_init>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	81fb      	strh	r3, [r7, #14]
#ifdef LI_CAN_SLV_MAIN_MON
	}
#endif // #ifdef LI_CAN_SLV_MAIN_MON

	// initialization of the message object memory
	for (i = 0; i < LI_CAN_SLV_MAIN_NODE_MAX_NOF_MSG_OBJ; i++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	81bb      	strh	r3, [r7, #12]
 8004cce:	e00b      	b.n	8004ce8 <li_can_slv_init+0x6c>
	{
		if (err == LI_CAN_SLV_ERR_OK)
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d105      	bne.n	8004ce2 <li_can_slv_init+0x66>
		{
			err = can_main_hw_msg_obj_init(i);
 8004cd6:	89bb      	ldrh	r3, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff f863 	bl	8003da4 <can_main_hw_msg_obj_init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < LI_CAN_SLV_MAIN_NODE_MAX_NOF_MSG_OBJ; i++)
 8004ce2:	89bb      	ldrh	r3, [r7, #12]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	81bb      	strh	r3, [r7, #12]
 8004ce8:	89bb      	ldrh	r3, [r7, #12]
 8004cea:	2b1f      	cmp	r3, #31
 8004cec:	d9f0      	bls.n	8004cd0 <li_can_slv_init+0x54>
		}
	}
#endif // #if defined (LI_CAN_SLV_MON) || defined(CAN_NODE_B_USED_FOR_RECONNECT_ONLY)

#if defined(OUTER) || defined(OUTER_APP)
	if (err == LI_CAN_SLV_ERR_OK)
 8004cee:	89fb      	ldrh	r3, [r7, #14]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10e      	bne.n	8004d12 <li_can_slv_init+0x96>
	{
		// define message objects for process request on main CAN-controller
		err = can_main_define_msg_obj(CAN_CONFIG_MSG_MAIN_OBJ_RX_PROCESS, CAN_CONFIG_PROCESS_ID, CAN_CONFIG_ACCEPTANCE_ONE_ID, CAN_CONFIG_PROCESS_DLC, CAN_CONFIG_DIR_RX, CAN_MAIN_SERVICE_ID_RX, CAN_OBJECT_NOT_SYNC);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9302      	str	r3, [sp, #8]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2301      	movs	r3, #1
 8004d02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d06:	2101      	movs	r1, #1
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f000 fab5 	bl	8005278 <can_main_define_msg_obj>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	81fb      	strh	r3, [r7, #14]
		// define message objects for system request on monitor CAN-controller
		err = can_mon_define_msg_obj(CAN_CONFIG_MSG_MON_OBJ_RX_SYS1, CAN_CONFIG_SYS_MSG_ID, CAN_CONFIG_ACCEPTANCE_ONE_ID, CAN_CONFIG_SYS_MSG_DLC, CAN_CONFIG_DIR_RX, CAN_MAIN_SERVICE_ID_RX, CAN_OBJECT_NOT_SYNC);
	}
#endif // #if defined(LI_CAN_SLV_MON) || defined(CAN_NODE_B_USED_FOR_RECONNECT_ONLY_SYSTEM_REQ)

	if (err == LI_CAN_SLV_ERR_OK)
 8004d12:	89fb      	ldrh	r3, [r7, #14]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d129      	bne.n	8004d6c <li_can_slv_init+0xf0>
	{
		// define two message object(s) for receiving system messages
		err = can_main_define_msg_obj(CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS1, CAN_CONFIG_SYS_MSG_ID, CAN_CONFIG_ACCEPTANCE_ONE_ID, CAN_CONFIG_SYS_MSG_DLC, CAN_CONFIG_DIR_RX, CAN_MAIN_SERVICE_ID_RX, CAN_OBJECT_NOT_SYNC);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9302      	str	r3, [sp, #8]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	2300      	movs	r3, #0
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2308      	movs	r3, #8
 8004d26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	2002      	movs	r0, #2
 8004d2e:	f000 faa3 	bl	8005278 <can_main_define_msg_obj>
 8004d32:	4603      	mov	r3, r0
 8004d34:	81fb      	strh	r3, [r7, #14]
#if defined(OUTER) || defined(OUTER_APP)
#if 1
		if (err == LI_CAN_SLV_ERR_OK)
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10e      	bne.n	8004d5a <li_can_slv_init+0xde>
		{
			err = can_main_define_msg_obj(CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS2, CAN_CONFIG_SYS_MSG_ID, CAN_CONFIG_ACCEPTANCE_ONE_ID, CAN_CONFIG_SYS_MSG_DLC, CAN_CONFIG_DIR_RX, CAN_MAIN_SERVICE_ID_RX, CAN_OBJECT_NOT_SYNC);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	2301      	movs	r3, #1
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d4e:	2102      	movs	r1, #2
 8004d50:	2003      	movs	r0, #3
 8004d52:	f000 fa91 	bl	8005278 <can_main_define_msg_obj>
 8004d56:	4603      	mov	r3, r0
 8004d58:	81fb      	strh	r3, [r7, #14]
		}
		if (err == LI_CAN_SLV_ERR_OK)
 8004d5a:	89fb      	ldrh	r3, [r7, #14]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <li_can_slv_init+0xf0>
		{
			err = can_hw_combine_msg_obj_to_two_stage_fifo(CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS1, CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS2);
 8004d60:	2103      	movs	r1, #3
 8004d62:	2002      	movs	r0, #2
 8004d64:	f7fe fff8 	bl	8003d58 <can_hw_combine_msg_obj_to_two_stage_fifo>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	81fb      	strh	r3, [r7, #14]
		}
#endif
#endif // #if defined(OUTER) || defined(OUTER_APP)
	}

	if (err == LI_CAN_SLV_ERR_OK)
 8004d6c:	89fb      	ldrh	r3, [r7, #14]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10e      	bne.n	8004d90 <li_can_slv_init+0x114>
	{
		// define message object for transmitting system messages
		err = can_main_define_msg_obj(CAN_CONFIG_MSG_MAIN_OBJ_TX_SYS, CAN_CONFIG_ONLINE_ARB_ID, CAN_CONFIG_ACCEPTANCE_ONE_ID, CAN_CONFIG_ONLINE_DLC, CAN_CONFIG_DIR_TX, CAN_MAIN_SERVICE_ID_TX, CAN_OBJECT_NOT_SYNC);
 8004d72:	2300      	movs	r3, #0
 8004d74:	9302      	str	r3, [sp, #8]
 8004d76:	2300      	movs	r3, #0
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d84:	2100      	movs	r1, #0
 8004d86:	2009      	movs	r0, #9
 8004d88:	f000 fa76 	bl	8005278 <can_main_define_msg_obj>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	81fb      	strh	r3, [r7, #14]
	}
#endif // #if defined(OUTER) || defined(OUTER_APP)
#endif // #ifdef LI_CAN_SLV_ASYNC

#if defined(OUTER) || defined(OUTER_APP)
	if (err == LI_CAN_SLV_ERR_OK)
 8004d90:	89fb      	ldrh	r3, [r7, #14]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d12a      	bne.n	8004dec <li_can_slv_init+0x170>
	{
		/*------------------------------------------------------------------*/
		/* definition of message object for synchronous data transmission   */
		/*------------------------------------------------------------------*/
		for (i = 0; i < CAN_CONFIG_MSG_MAIN_OBJ_TX_NR; i++)
 8004d96:	2300      	movs	r3, #0
 8004d98:	81bb      	strh	r3, [r7, #12]
 8004d9a:	e024      	b.n	8004de6 <li_can_slv_init+0x16a>
		{
			err = can_main_get_next_free_msg_obj(&msg_obj);
 8004d9c:	f107 030a 	add.w	r3, r7, #10
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 faef 	bl	8005384 <can_main_get_next_free_msg_obj>
 8004da6:	4603      	mov	r3, r0
 8004da8:	81fb      	strh	r3, [r7, #14]
			if (err == LI_CAN_SLV_ERR_OK)
 8004daa:	89fb      	ldrh	r3, [r7, #14]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d117      	bne.n	8004de0 <li_can_slv_init+0x164>
			{
				// define message object for transmitting synchronous data
				err = can_main_define_msg_obj(msg_obj, CAN_CONFIG_ONLINE_ARB_ID, CAN_CONFIG_ACCEPTANCE_ONE_ID, CAN_CONFIG_ONLINE_DLC, CAN_CONFIG_DIR_TX, CAN_MAIN_SERVICE_ID_TX, CAN_OBJECT_IS_SYNC);
 8004db0:	8978      	ldrh	r0, [r7, #10]
 8004db2:	2301      	movs	r3, #1
 8004db4:	9302      	str	r3, [sp, #8]
 8004db6:	2300      	movs	r3, #0
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	f000 fa57 	bl	8005278 <can_main_define_msg_obj>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	81fb      	strh	r3, [r7, #14]
				if (err == LI_CAN_SLV_ERR_OK)
 8004dce:	89fb      	ldrh	r3, [r7, #14]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <li_can_slv_init+0x164>
				{
					// add CAN_CONFIG_MSG_MAIN_OBJ_TX_NR of TX objects
					err = can_main_msg_obj_tx_data_cnfg(msg_obj);
 8004dd4:	897b      	ldrh	r3, [r7, #10]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f944 	bl	8005064 <can_main_msg_obj_tx_data_cnfg>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < CAN_CONFIG_MSG_MAIN_OBJ_TX_NR; i++)
 8004de0:	89bb      	ldrh	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	81bb      	strh	r3, [r7, #12]
 8004de6:	89bb      	ldrh	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0d7      	beq.n	8004d9c <li_can_slv_init+0x120>
		}
	}
#endif	// #if defined(OUTER) || defined(OUTER_APP)

#if defined(OUTER) || defined(OUTER_APP)
	if (err == LI_CAN_SLV_ERR_OK)
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <li_can_slv_init+0x17e>
	{
		err = can_sys_init();
 8004df2:	f000 ff6f 	bl	8005cd4 <can_sys_init>
 8004df6:	4603      	mov	r3, r0
 8004df8:	81fb      	strh	r3, [r7, #14]
		err = can_async_init();
	}
#endif // #ifdef CAN_ASYNC_CTRL_RX_QUEUE

#if defined(OUTER) || defined(OUTER_APP)
	if (err == LI_CAN_SLV_ERR_OK)
 8004dfa:	89fb      	ldrh	r3, [r7, #14]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <li_can_slv_init+0x18c>
	{
		err = can_sync_init();
 8004e00:	f000 fb9e 	bl	8005540 <can_sync_init>
 8004e04:	4603      	mov	r3, r0
 8004e06:	81fb      	strh	r3, [r7, #14]
	}
#endif // #ifdef LI_CAN_SLV_MAIN_MON

#else // #ifdef LI_CAN_SLV_RECONNECT

	lcsa_set_state(LI_CAN_SLV_STATE_RUNNING);
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f000 f831 	bl	8004e70 <lcsa_set_state>

	if (err == LI_CAN_SLV_ERR_OK)
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <li_can_slv_init+0x1a4>
	{
		err = can_config_set_baudrate(baudrate);
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff f9b8 	bl	800418c <can_config_set_baudrate>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	81fb      	strh	r3, [r7, #14]
	}

	can_main_enable();
 8004e20:	f000 f980 	bl	8005124 <can_main_enable>

#ifdef LI_CAN_SLV_MAIN_MON
	if (can_mainmon_type == CAN_MAINMON_TYPE_MON)
	{
#endif // #ifdef LI_CAN_SLV_MAIN_MON
		err = can_hw_transceiver_enable();
 8004e24:	f7fe ff90 	bl	8003d48 <can_hw_transceiver_enable>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	81fb      	strh	r3, [r7, #14]
#ifdef LI_CAN_SLV_MAIN_MON
	}
#endif // #ifdef LI_CAN_SLV_MAIN_MON
	return (err);
 8004e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <li_can_slv_set_mode>:
#endif // #if defined(OUTER) || defined(OUTER_APP)
	return LI_CAN_SLV_ERR_OK;
}

void li_can_slv_set_mode(li_can_slv_mode_t new_mode)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
	li_can_slv_mode = new_mode;
 8004e42:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <li_can_slv_set_mode+0x1c>)
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	7013      	strb	r3, [r2, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	200005b8 	.word	0x200005b8

08004e58 <li_can_slv_get_mode>:

li_can_slv_mode_t li_can_slv_get_mode(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
	return li_can_slv_mode;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <li_can_slv_get_mode+0x14>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	200005b8 	.word	0x200005b8

08004e70 <lcsa_set_state>:

void lcsa_set_state(lcsa_state_t new_state)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	71fb      	strb	r3, [r7, #7]
	li_can_slv_state = new_state;
 8004e7a:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <lcsa_set_state+0x1c>)
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	7013      	strb	r3, [r2, #0]
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	20000140 	.word	0x20000140

08004e90 <can_main_init>:
/*--------------------------------------------------------------------------*/
/**
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_main_init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
	li_can_slv_errorcode_t err;

	err = can_main_hw_init();
 8004e96:	f7fe ff6f 	bl	8003d78 <can_main_hw_init>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	80fb      	strh	r3, [r7, #6]
		err = testsys_system_page_add(&can_main_testsys[0], "CAN Node a controller system");
	}
#endif /* #ifdef TESTSYS_SYSTEM */
#endif /* #ifdef SHOW_CAN_MAIN */
#endif /* #ifdef CAN_MAIN_DIAGNOSE */
	return err;
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <can_main_sync_process_tx_data_cnfg>:
 * @param obj number of module object
 * @param module_nr used module number
 * @return #LI_CAN_SLV_ERR_OK, #ERR_MSG_CAN_MAIN_OVER_TABLE_POS or #ERR_MSG_CAN_MAIN_OVER_OBJECT_NR
 */
li_can_slv_errorcode_t can_main_sync_process_tx_data_cnfg(uint16_t table_pos, uint16_t obj, li_can_slv_module_nr_t module_nr)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	80fb      	strh	r3, [r7, #6]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	80bb      	strh	r3, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	807b      	strh	r3, [r7, #2]
	uint16_t can_id;
	dword_t send;

	if (table_pos > (LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES - 1u))
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <can_main_sync_process_tx_data_cnfg+0x1e>
	{
		return (ERR_MSG_CAN_MAIN_OVER_TABLE_POS);
 8004ec0:	f245 0317 	movw	r3, #20503	; 0x5017
 8004ec4:	e046      	b.n	8004f54 <can_main_sync_process_tx_data_cnfg+0xac>
	}

	if (obj > CAN_CONFIG_NR_OF_MODULE_OBJS - 1)
 8004ec6:	88bb      	ldrh	r3, [r7, #4]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d902      	bls.n	8004ed2 <can_main_sync_process_tx_data_cnfg+0x2a>
	{
		return (ERR_MSG_CAN_MAIN_OVER_OBJECT_NR);
 8004ecc:	f245 030a 	movw	r3, #20490	; 0x500a
 8004ed0:	e040      	b.n	8004f54 <can_main_sync_process_tx_data_cnfg+0xac>
	}

	/* calculation of the transmit identifier */
	can_id = CAN_CONFIG_DATA_TX_MASK + ((module_nr - 1) << 2) + obj;
 8004ed2:	887b      	ldrh	r3, [r7, #2]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	88bb      	ldrh	r3, [r7, #4]
 8004ede:	4413      	add	r3, r2
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee6:	81fb      	strh	r3, [r7, #14]

	can_main_sync_process_tx_data_ctrl.id[table_pos][obj] = can_id;
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	88bb      	ldrh	r3, [r7, #4]
 8004eec:	491c      	ldr	r1, [pc, #112]	; (8004f60 <can_main_sync_process_tx_data_cnfg+0xb8>)
 8004eee:	0092      	lsls	r2, r2, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	89fa      	ldrh	r2, [r7, #14]
 8004ef6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	can_main_sync_process_tx_data_ctrl.dlc[table_pos][obj] = can_config_module_tab[table_pos].tx_dlc[obj];
 8004efa:	88fa      	ldrh	r2, [r7, #6]
 8004efc:	88b9      	ldrh	r1, [r7, #4]
 8004efe:	4819      	ldr	r0, [pc, #100]	; (8004f64 <can_main_sync_process_tx_data_cnfg+0xbc>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4403      	add	r3, r0
 8004f0a:	440b      	add	r3, r1
 8004f0c:	330e      	adds	r3, #14
 8004f0e:	7819      	ldrb	r1, [r3, #0]
 8004f10:	88fa      	ldrh	r2, [r7, #6]
 8004f12:	88bb      	ldrh	r3, [r7, #4]
 8004f14:	b288      	uxth	r0, r1
 8004f16:	4912      	ldr	r1, [pc, #72]	; (8004f60 <can_main_sync_process_tx_data_cnfg+0xb8>)
 8004f18:	0092      	lsls	r2, r2, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	4602      	mov	r2, r0
 8004f20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	/* set corresponding flag in the send register */
	send = 0x00000001L << obj;
 8004f24:	88bb      	ldrh	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	60bb      	str	r3, [r7, #8]
	can_main_sync_process_tx_data_ctrl.send_reg |= (send << (CAN_CONFIG_NR_OF_MODULE_OBJS * table_pos));
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <can_main_sync_process_tx_data_cnfg+0xb8>)
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <can_main_sync_process_tx_data_cnfg+0xb8>)
 8004f40:	6053      	str	r3, [r2, #4]
	can_main_sync_process_tx_data_ctrl.send_end = table_pos * CAN_CONFIG_NR_OF_MODULE_OBJS + obj;
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	88bb      	ldrh	r3, [r7, #4]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <can_main_sync_process_tx_data_cnfg+0xb8>)
 8004f50:	819a      	strh	r2, [r3, #12]

	return (LI_CAN_SLV_ERR_OK);
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	2000067c 	.word	0x2000067c
 8004f64:	2000000c 	.word	0x2000000c

08004f68 <can_main_synchron_tx_data_off>:
/**
 * @param table_pos number module used
 * @param obj number of module object
 */
void can_main_synchron_tx_data_off(uint16_t table_pos, uint16_t obj)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	460a      	mov	r2, r1
 8004f72:	80fb      	strh	r3, [r7, #6]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80bb      	strh	r3, [r7, #4]
	dword_t send;

	/* set corresponding flag in the send register */
	send = 0x00000001L << obj;
 8004f78:	88bb      	ldrh	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	60fb      	str	r3, [r7, #12]
	can_main_sync_process_tx_data_ctrl.send_reg &= ~(send << (CAN_CONFIG_NR_OF_MODULE_OBJS * table_pos));
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <can_main_synchron_tx_data_off+0x3c>)
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	4013      	ands	r3, r2
 8004f94:	4a03      	ldr	r2, [pc, #12]	; (8004fa4 <can_main_synchron_tx_data_off+0x3c>)
 8004f96:	6053      	str	r3, [r2, #4]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	2000067c 	.word	0x2000067c

08004fa8 <can_main_synchron_tx_data_on>:
/**
 * @param table_pos number module used
 * @param obj number of module object
 */
void can_main_synchron_tx_data_on(uint16_t table_pos, uint16_t obj)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	460a      	mov	r2, r1
 8004fb2:	80fb      	strh	r3, [r7, #6]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	80bb      	strh	r3, [r7, #4]
	dword_t send;

	/* set corresponding flag in the send register */
	send = 0x00000001L << obj;
 8004fb8:	88bb      	ldrh	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	60fb      	str	r3, [r7, #12]
	can_main_sync_process_tx_data_ctrl.send_reg |= (send << (CAN_CONFIG_NR_OF_MODULE_OBJS * table_pos));
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <can_main_synchron_tx_data_on+0x3c>)
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	4a04      	ldr	r2, [pc, #16]	; (8004fe4 <can_main_synchron_tx_data_on+0x3c>)
 8004fd4:	6053      	str	r3, [r2, #4]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	2000067c 	.word	0x2000067c

08004fe8 <can_main_msg_obj_rx_data_cnfg>:
 * @param msg_obj used message object
 * @param table_pos number module used
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_main_msg_obj_rx_data_cnfg(uint16_t msg_obj, uint16_t table_pos)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	460a      	mov	r2, r1
 8004ff2:	80fb      	strh	r3, [r7, #6]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80bb      	strh	r3, [r7, #4]

	if (li_can_slv_sync_main_rx_msg_obj_used < CAN_CONFIG_SYNC_MAIN_MAX_NR_OF_RX_OBJ)
 8004ff8:	4b18      	ldr	r3, [pc, #96]	; (800505c <can_main_msg_obj_rx_data_cnfg+0x74>)
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b13      	cmp	r3, #19
 8005000:	d823      	bhi.n	800504a <can_main_msg_obj_rx_data_cnfg+0x62>
	{
		li_can_slv_sync_main_rx_msg_obj[li_can_slv_sync_main_rx_msg_obj_used].msg_obj = msg_obj;
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <can_main_msg_obj_rx_data_cnfg+0x74>)
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	4a15      	ldr	r2, [pc, #84]	; (8005060 <can_main_msg_obj_rx_data_cnfg+0x78>)
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	809a      	strh	r2, [r3, #4]
		li_can_slv_sync_main_rx_msg_obj[li_can_slv_sync_main_rx_msg_obj_used].msg_obj_mask = (1L << msg_obj);
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	2201      	movs	r2, #1
 8005016:	fa02 f103 	lsl.w	r1, r2, r3
 800501a:	4b10      	ldr	r3, [pc, #64]	; (800505c <can_main_msg_obj_rx_data_cnfg+0x74>)
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <can_main_msg_obj_rx_data_cnfg+0x78>)
 8005024:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		li_can_slv_sync_main_rx_msg_obj[li_can_slv_sync_main_rx_msg_obj_used].table_pos = table_pos;
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <can_main_msg_obj_rx_data_cnfg+0x74>)
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <can_main_msg_obj_rx_data_cnfg+0x78>)
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	88ba      	ldrh	r2, [r7, #4]
 8005036:	80da      	strh	r2, [r3, #6]

		li_can_slv_sync_main_rx_msg_obj_used++;
 8005038:	4b08      	ldr	r3, [pc, #32]	; (800505c <can_main_msg_obj_rx_data_cnfg+0x74>)
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	3301      	adds	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <can_main_msg_obj_rx_data_cnfg+0x74>)
 8005044:	801a      	strh	r2, [r3, #0]
		return (LI_CAN_SLV_ERR_OK);
 8005046:	2300      	movs	r3, #0
 8005048:	e001      	b.n	800504e <can_main_msg_obj_rx_data_cnfg+0x66>
	}
	return (ERR_MSG_CAN_MAIN_MSG_OBJ_RX_DATA_CNFG);
 800504a:	f245 0328 	movw	r3, #20520	; 0x5028
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	200005d0 	.word	0x200005d0
 8005060:	200005d4 	.word	0x200005d4

08005064 <can_main_msg_obj_tx_data_cnfg>:
/**
 * @param msg_obj used message object
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_main_msg_obj_tx_data_cnfg(uint16_t msg_obj)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	80fb      	strh	r3, [r7, #6]
	if (li_can_slv_sync_main_tx_msg_obj_used < CAN_CONFIG_SYNC_MAIN_MAX_NR_OF_TX_OBJ)
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <can_main_msg_obj_tx_data_cnfg+0x6c>)
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d123      	bne.n	80050c0 <can_main_msg_obj_tx_data_cnfg+0x5c>
	{
		li_can_slv_sync_main_tx_msg_obj[li_can_slv_sync_main_tx_msg_obj_used].msg_obj = msg_obj;
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <can_main_msg_obj_tx_data_cnfg+0x6c>)
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <can_main_msg_obj_tx_data_cnfg+0x70>)
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4413      	add	r3, r2
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	809a      	strh	r2, [r3, #4]
		li_can_slv_sync_main_tx_msg_obj[li_can_slv_sync_main_tx_msg_obj_used].msg_obj_mask = (1L << msg_obj);
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	2201      	movs	r2, #1
 800508c:	fa02 f103 	lsl.w	r1, r2, r3
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <can_main_msg_obj_tx_data_cnfg+0x6c>)
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <can_main_msg_obj_tx_data_cnfg+0x70>)
 800509a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		/* not relevant here...will be set when the object is used for transmission */
		li_can_slv_sync_main_tx_msg_obj[li_can_slv_sync_main_tx_msg_obj_used].table_pos = 0;
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <can_main_msg_obj_tx_data_cnfg+0x6c>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <can_main_msg_obj_tx_data_cnfg+0x70>)
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	2200      	movs	r2, #0
 80050ac:	80da      	strh	r2, [r3, #6]
		/* object number can be calculated from CAN ID on TX OK */
		li_can_slv_sync_main_tx_msg_obj_used++;
 80050ae:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <can_main_msg_obj_tx_data_cnfg+0x6c>)
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3301      	adds	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <can_main_msg_obj_tx_data_cnfg+0x6c>)
 80050ba:	801a      	strh	r2, [r3, #0]
		return (LI_CAN_SLV_ERR_OK);
 80050bc:	2300      	movs	r3, #0
 80050be:	e001      	b.n	80050c4 <can_main_msg_obj_tx_data_cnfg+0x60>
	}
	return (ERR_MSG_CAN_MAIN_MSG_OBJ_TX_DATA_CNFG);
 80050c0:	f245 0329 	movw	r3, #20521	; 0x5029
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	200005d2 	.word	0x200005d2
 80050d4:	20000674 	.word	0x20000674

080050d8 <can_main_send_queue_system_tx>:
 * @param module_nr module number
 * @param[in] src source pointer of data
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_main_send_queue_system_tx(li_can_slv_module_nr_t module_nr, byte_t const *src)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	6039      	str	r1, [r7, #0]
 80050e2:	80fb      	strh	r3, [r7, #6]
	uint16_t can_id;

	/* calculation of CAN identifier */
	can_id = CAN_CONFIG_SYS_TX_MASK + ((module_nr - 1) << 2);
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3303      	adds	r3, #3
 80050f0:	81fb      	strh	r3, [r7, #14]
	can_main_hw_send_msg_obj_blocking(CAN_CONFIG_MSG_MAIN_OBJ_TX_SYS, can_id, CAN_CONFIG_SYS_MSG_DLC, src);
 80050f2:	89f9      	ldrh	r1, [r7, #14]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2208      	movs	r2, #8
 80050f8:	2009      	movs	r0, #9
 80050fa:	f7fe ff45 	bl	8003f88 <can_main_hw_send_msg_obj_blocking>
	return (LI_CAN_SLV_ERR_OK);
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <can_main_process_data_tx_set>:
/*!
 * \brief set the send flag of all synchrony process data of all defined logical modules
 * \return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_main_process_data_tx_set(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
	/**
	 * @todo 1. check send mask --> must be zero, else transmission not completed\n
	 * before next process request was coming in\n
	 */
	/* indicate that a new sync TX request was issued */
	can_main_sync_process_tx_data_ctrl.send_cmd = CAN_MAIN_PROCESS_SYNC_SEND_DATA;
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <can_main_process_data_tx_set+0x18>)
 800510e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005112:	801a      	strh	r2, [r3, #0]

	/* trigger queue handling */
	can_port_trigger_can_main_sync_process_data_tx_queue();
 8005114:	2004      	movs	r0, #4
 8005116:	f000 f943 	bl	80053a0 <can_main_handler_tx>

	return (LI_CAN_SLV_ERR_OK);
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	2000067c 	.word	0x2000067c

08005124 <can_main_enable>:

/*--------------------------------------------------------------------------*/
/* function definition (private/not exported)                               */
/*--------------------------------------------------------------------------*/
li_can_slv_errorcode_t can_main_enable(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
	return can_main_hw_enable();
 8005128:	f7fe fe76 	bl	8003e18 <can_main_hw_enable>
 800512c:	4603      	mov	r3, r0
}
 800512e:	4618      	mov	r0, r3
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <can_main_sync_process_tx_data>:
#if defined(OUTER) || defined(OUTER_APP)
/*!
 * @brief can_main_sync_process_tx_data
 */
void can_main_sync_process_tx_data(void)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
#ifdef LI_CAN_SLV_DEBUG_MAIN_SYNC_PROCESS_TX_DATA
	LI_CAN_SLV_DEBUG_PRINT("\n\ncan_main_sync tx obj_used: %d ", li_can_slv_sync_main_tx_msg_obj_used);
	LI_CAN_SLV_DEBUG_PRINT("ctrl.send: %08lx", can_main_sync_process_tx_data_ctrl.send);
#endif /* #ifdef LI_CAN_SLV_DEBUG_MAIN_SYNC_PROCESS_TX_DATA */

	if (can_main_sync_process_tx_data_ctrl.send != CAN_MAIN_PROCESS_DATA_TX_SEND_CLEAR) /* is there still something to send out? */
 800513a:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 808d 	beq.w	800525e <can_main_sync_process_tx_data+0x12a>
	{
		for (i = 0; i < li_can_slv_sync_main_tx_msg_obj_used; i++) /* search all usable sync-TX-slots */
 8005144:	2300      	movs	r3, #0
 8005146:	82fb      	strh	r3, [r7, #22]
 8005148:	e082      	b.n	8005250 <can_main_sync_process_tx_data+0x11c>
		{
			msg_obj = li_can_slv_sync_main_tx_msg_obj[i].msg_obj; /* get the number of next usable TX slot for checking if it is free */
 800514a:	8afb      	ldrh	r3, [r7, #22]
 800514c:	4a47      	ldr	r2, [pc, #284]	; (800526c <can_main_sync_process_tx_data+0x138>)
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	889b      	ldrh	r3, [r3, #4]
 8005154:	827b      	strh	r3, [r7, #18]
#ifdef LI_CAN_SLV_DEBUG_MAIN_SYNC_PROCESS_TX_DATA
				LI_CAN_SLV_DEBUG_PRINT("(not busy) ");
#endif /* #ifdef LI_CAN_SLV_DEBUG_MAIN_SYNC_PROCESS_TX_DATA */

				/* switch to next active send flag */
				while ((can_main_sync_process_tx_data_ctrl.send_current <= can_main_sync_process_tx_data_ctrl.send_end) && ((can_main_sync_process_tx_data_ctrl.send & 0x00000001L) == 0x00000000L))
 8005156:	e00b      	b.n	8005170 <can_main_sync_process_tx_data+0x3c>
				{
					can_main_sync_process_tx_data_ctrl.send_current++;
 8005158:	4b43      	ldr	r3, [pc, #268]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 800515a:	89db      	ldrh	r3, [r3, #14]
 800515c:	b29b      	uxth	r3, r3
 800515e:	3301      	adds	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	4b41      	ldr	r3, [pc, #260]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005164:	81da      	strh	r2, [r3, #14]
					can_main_sync_process_tx_data_ctrl.send >>= 1;
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	4a3e      	ldr	r2, [pc, #248]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 800516e:	6093      	str	r3, [r2, #8]
				while ((can_main_sync_process_tx_data_ctrl.send_current <= can_main_sync_process_tx_data_ctrl.send_end) && ((can_main_sync_process_tx_data_ctrl.send & 0x00000001L) == 0x00000000L))
 8005170:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005172:	89db      	ldrh	r3, [r3, #14]
 8005174:	b29a      	uxth	r2, r3
 8005176:	4b3c      	ldr	r3, [pc, #240]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005178:	899b      	ldrh	r3, [r3, #12]
 800517a:	b29b      	uxth	r3, r3
 800517c:	429a      	cmp	r2, r3
 800517e:	d805      	bhi.n	800518c <can_main_sync_process_tx_data+0x58>
 8005180:	4b39      	ldr	r3, [pc, #228]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0e5      	beq.n	8005158 <can_main_sync_process_tx_data+0x24>
				}

				/* check if send flag of current object is valid */
				if ((can_main_sync_process_tx_data_ctrl.send & 0x00000001L) == 0x00000001L)
 800518c:	4b36      	ldr	r3, [pc, #216]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b01      	cmp	r3, #1
 8005196:	d158      	bne.n	800524a <can_main_sync_process_tx_data+0x116>
				{
					table_pos = can_main_sync_process_tx_data_ctrl.send_current / CAN_CONFIG_NR_OF_MODULE_OBJS;
 8005198:	4b33      	ldr	r3, [pc, #204]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 800519a:	89db      	ldrh	r3, [r3, #14]
 800519c:	b29b      	uxth	r3, r3
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	823b      	strh	r3, [r7, #16]
					obj = can_main_sync_process_tx_data_ctrl.send_current % CAN_CONFIG_NR_OF_MODULE_OBJS;
 80051a2:	4b31      	ldr	r3, [pc, #196]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 80051a4:	89db      	ldrh	r3, [r3, #14]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	81fb      	strh	r3, [r7, #14]

					/* update the cross reference list with the position of the actually sent logical module... */
					/* ...the object number of the module can be restored on TXOK with the CAN ID */
					li_can_slv_sync_main_tx_msg_obj[i].table_pos = table_pos;
 80051ae:	8afb      	ldrh	r3, [r7, #22]
 80051b0:	4a2e      	ldr	r2, [pc, #184]	; (800526c <can_main_sync_process_tx_data+0x138>)
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	8a3a      	ldrh	r2, [r7, #16]
 80051b8:	80da      	strh	r2, [r3, #6]
					LI_CAN_SLV_DEBUG_PRINT("\ntable_pos=%d, obj=%d ", table_pos, obj);
					LI_CAN_SLV_DEBUG_PRINT("ctrl.send %08lx", can_main_sync_process_tx_data_ctrl.send);
#endif /* #ifdef LI_CAN_SLV_DEBUG_MAIN_SYNC_PROCESS_TX_DATA */

					/* call synchrony transmit routine of main CAN controller to prepare data to send via can, also capture data for monitor controller */
					dlc = (uint16_t) can_config_module_tab[table_pos].tx_dlc[obj];
 80051ba:	8a3a      	ldrh	r2, [r7, #16]
 80051bc:	89f9      	ldrh	r1, [r7, #14]
 80051be:	482c      	ldr	r0, [pc, #176]	; (8005270 <can_main_sync_process_tx_data+0x13c>)
 80051c0:	4613      	mov	r3, r2
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4403      	add	r3, r0
 80051ca:	440b      	add	r3, r1
 80051cc:	330e      	adds	r3, #14
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	81bb      	strh	r3, [r7, #12]
					err = can_sync_tx_data_main(table_pos, obj, dlc, data);
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	89ba      	ldrh	r2, [r7, #12]
 80051d6:	89f9      	ldrh	r1, [r7, #14]
 80051d8:	8a38      	ldrh	r0, [r7, #16]
 80051da:	f000 fa4f 	bl	800567c <can_sync_tx_data_main>
 80051de:	4603      	mov	r3, r0
 80051e0:	82bb      	strh	r3, [r7, #20]

					if (err == LI_CAN_SLV_ERR_OK)
 80051e2:	8abb      	ldrh	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d118      	bne.n	800521a <can_main_sync_process_tx_data+0xe6>
					{
						err = can_main_hw_send_msg_obj_none_blocking(msg_obj, can_main_sync_process_tx_data_ctrl.id[table_pos][obj], can_main_sync_process_tx_data_ctrl.dlc[table_pos][obj], data);
 80051e8:	8a3a      	ldrh	r2, [r7, #16]
 80051ea:	89fb      	ldrh	r3, [r7, #14]
 80051ec:	491e      	ldr	r1, [pc, #120]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 80051ee:	0092      	lsls	r2, r2, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	3308      	adds	r3, #8
 80051f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80051f8:	b29c      	uxth	r4, r3
 80051fa:	8a3a      	ldrh	r2, [r7, #16]
 80051fc:	89fb      	ldrh	r3, [r7, #14]
 80051fe:	491a      	ldr	r1, [pc, #104]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005200:	0092      	lsls	r2, r2, #2
 8005202:	4413      	add	r3, r2
 8005204:	330c      	adds	r3, #12
 8005206:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800520a:	b29a      	uxth	r2, r3
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	8a78      	ldrh	r0, [r7, #18]
 8005210:	4621      	mov	r1, r4
 8005212:	f7fe fef5 	bl	8004000 <can_main_hw_send_msg_obj_none_blocking>
 8005216:	4603      	mov	r3, r0
 8005218:	82bb      	strh	r3, [r7, #20]
					}

#ifdef LI_CAN_SLV_SYS_MODULE_ERROR
					if (err != LI_CAN_SLV_ERR_OK)
 800521a:	8abb      	ldrh	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <can_main_sync_process_tx_data+0xfe>
					{
						error_syserr_send(err, ERR_LVL_INFO, can_config_get_module_nr_main(), ERR_LVL_INFO);
 8005220:	f7ff fab0 	bl	8004784 <can_config_get_module_nr_main>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	8ab8      	ldrh	r0, [r7, #20]
 800522a:	2304      	movs	r3, #4
 800522c:	2104      	movs	r1, #4
 800522e:	f000 f8d5 	bl	80053dc <error_syserr_send>
					}
#endif // #ifdef LI_CAN_SLV_SYS_MODULE_ERROR

					can_main_sync_process_tx_data_ctrl.send_current++;
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005234:	89db      	ldrh	r3, [r3, #14]
 8005236:	b29b      	uxth	r3, r3
 8005238:	3301      	adds	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 800523e:	81da      	strh	r2, [r3, #14]
					can_main_sync_process_tx_data_ctrl.send >>= 1;
 8005240:	4b09      	ldr	r3, [pc, #36]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	4a08      	ldr	r2, [pc, #32]	; (8005268 <can_main_sync_process_tx_data+0x134>)
 8005248:	6093      	str	r3, [r2, #8]
		for (i = 0; i < li_can_slv_sync_main_tx_msg_obj_used; i++) /* search all usable sync-TX-slots */
 800524a:	8afb      	ldrh	r3, [r7, #22]
 800524c:	3301      	adds	r3, #1
 800524e:	82fb      	strh	r3, [r7, #22]
 8005250:	4b08      	ldr	r3, [pc, #32]	; (8005274 <can_main_sync_process_tx_data+0x140>)
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	8afa      	ldrh	r2, [r7, #22]
 8005258:	429a      	cmp	r2, r3
 800525a:	f4ff af76 	bcc.w	800514a <can_main_sync_process_tx_data+0x16>
#endif /* #ifdef LI_CAN_SLV_DEBUG_MAIN_SYNC_PROCESS_TX_DATA */

#ifdef DEBUG_PIN
	DEBUG_PIN_CAN_TX_SEND = 0;
#endif /* #ifdef DEBUG_PIN */
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	bd90      	pop	{r4, r7, pc}
 8005266:	bf00      	nop
 8005268:	2000067c 	.word	0x2000067c
 800526c:	20000674 	.word	0x20000674
 8005270:	2000000c 	.word	0x2000000c
 8005274:	200005d2 	.word	0x200005d2

08005278 <can_main_define_msg_obj>:
 * @param service_id id of the CAN SERVICE used
 * @param is_sync_obj is msg_obj used as a synchronous object
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_main_define_msg_obj(uint16_t msg_obj, uint16_t can_id, uint16_t acceptance_mask, byte_t dlc, byte_t dir, can_main_service_id_t service_id, bit_t is_sync_obj)
{
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b087      	sub	sp, #28
 800527c:	af02      	add	r7, sp, #8
 800527e:	4604      	mov	r4, r0
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4623      	mov	r3, r4
 8005288:	80fb      	strh	r3, [r7, #6]
 800528a:	4603      	mov	r3, r0
 800528c:	80bb      	strh	r3, [r7, #4]
 800528e:	460b      	mov	r3, r1
 8005290:	807b      	strh	r3, [r7, #2]
 8005292:	4613      	mov	r3, r2
 8005294:	707b      	strb	r3, [r7, #1]
#endif /* #ifdef LI_CAN_SLV_DEBUG_CAN_INIT_MAIN */

	/**
	 * @todo error
	 */
	err = can_main_hw_define_msg_obj(msg_obj, can_id, acceptance_mask, dlc, dir, service_id);
 8005296:	787c      	ldrb	r4, [r7, #1]
 8005298:	887a      	ldrh	r2, [r7, #2]
 800529a:	88b9      	ldrh	r1, [r7, #4]
 800529c:	88f8      	ldrh	r0, [r7, #6]
 800529e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4623      	mov	r3, r4
 80052ac:	f7fe fdd4 	bl	8003e58 <can_main_hw_define_msg_obj>
 80052b0:	4603      	mov	r3, r0
 80052b2:	81fb      	strh	r3, [r7, #14]

	switch (service_id)
 80052b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d851      	bhi.n	8005360 <can_main_define_msg_obj+0xe8>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <can_main_define_msg_obj+0x4c>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052d9 	.word	0x080052d9
 80052c8:	08005307 	.word	0x08005307
 80052cc:	08005335 	.word	0x08005335
 80052d0:	08005335 	.word	0x08005335
 80052d4:	0800534b 	.word	0x0800534b
	{
		case CAN_MAIN_SERVICE_ID_TX:
			if (is_sync_obj != 0u)
 80052d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <can_main_define_msg_obj+0x78>
			{
				can_main_isr_inp_mask_tx |= (1UL << msg_obj);
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	2201      	movs	r2, #1
 80052e4:	409a      	lsls	r2, r3
 80052e6:	4b22      	ldr	r3, [pc, #136]	; (8005370 <can_main_define_msg_obj+0xf8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	4a20      	ldr	r2, [pc, #128]	; (8005370 <can_main_define_msg_obj+0xf8>)
 80052ee:	6013      	str	r3, [r2, #0]
			}
			can_main_objs_mask |= (1L << msg_obj);
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	2201      	movs	r2, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <can_main_define_msg_obj+0xfc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <can_main_define_msg_obj+0xfc>)
 8005302:	6013      	str	r3, [r2, #0]
			break;
 8005304:	e02f      	b.n	8005366 <can_main_define_msg_obj+0xee>

		case CAN_MAIN_SERVICE_ID_RX:
			if (is_sync_obj != 0u)
 8005306:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <can_main_define_msg_obj+0xa6>
			{
				can_main_isr_inp_mask_rx |= (1UL << msg_obj);
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2201      	movs	r2, #1
 8005312:	409a      	lsls	r2, r3
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <can_main_define_msg_obj+0x100>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4313      	orrs	r3, r2
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <can_main_define_msg_obj+0x100>)
 800531c:	6013      	str	r3, [r2, #0]
			}
			can_main_objs_mask |= (1L << msg_obj);
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	2201      	movs	r2, #1
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	461a      	mov	r2, r3
 8005328:	4b12      	ldr	r3, [pc, #72]	; (8005374 <can_main_define_msg_obj+0xfc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4313      	orrs	r3, r2
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <can_main_define_msg_obj+0xfc>)
 8005330:	6013      	str	r3, [r2, #0]
			break;
 8005332:	e018      	b.n	8005366 <can_main_define_msg_obj+0xee>
		case CAN_MAIN_ASYNC_SERVICE_ID_TX:
		case CAN_MAIN_ASYNC_SERVICE_ID_RX:
#ifdef LI_CAN_SLV_BOOT
		case CAN_MAIN_ASYNC_CTRL_SERVICE_ID_RX:
#endif /* #ifdef LI_CAN_SLV_BOOT */
			can_main_async_objs_mask |= (1L << msg_obj);
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	2201      	movs	r2, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	461a      	mov	r2, r3
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <can_main_define_msg_obj+0x104>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <can_main_define_msg_obj+0x104>)
 8005346:	6013      	str	r3, [r2, #0]
			break;
 8005348:	e00d      	b.n	8005366 <can_main_define_msg_obj+0xee>
#if defined(OUTER) || defined(OUTER_APP)
		case CAN_MAIN_ASYNC_CTRL_SERVICE_ID_RX:
			can_main_async_ctrl_objs_mask |= (1L << msg_obj);
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	2201      	movs	r2, #1
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	461a      	mov	r2, r3
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <can_main_define_msg_obj+0x108>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4313      	orrs	r3, r2
 800535a:	4a09      	ldr	r2, [pc, #36]	; (8005380 <can_main_define_msg_obj+0x108>)
 800535c:	6013      	str	r3, [r2, #0]
			break;
 800535e:	e002      	b.n	8005366 <can_main_define_msg_obj+0xee>
#endif /* #if defined(OUTER) || defined(OUTER_APP) */
		default:
			return (ERR_MSG_CAN_MAIN_UNDEFINED_ISR_ID);
 8005360:	f245 0303 	movw	r3, #20483	; 0x5003
 8005364:	e000      	b.n	8005368 <can_main_define_msg_obj+0xf0>
			break;
	}

	return (err);
 8005366:	89fb      	ldrh	r3, [r7, #14]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bd90      	pop	{r4, r7, pc}
 8005370:	200005c0 	.word	0x200005c0
 8005374:	200005c4 	.word	0x200005c4
 8005378:	200005bc 	.word	0x200005bc
 800537c:	200005c8 	.word	0x200005c8
 8005380:	200005cc 	.word	0x200005cc

08005384 <can_main_get_next_free_msg_obj>:

li_can_slv_errorcode_t can_main_get_next_free_msg_obj(uint16_t *msg_obj)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	li_can_slv_errorcode_t err;

	err = can_main_hw_get_next_free_msg_obj(msg_obj);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7fe fd21 	bl	8003dd4 <can_main_hw_get_next_free_msg_obj>
 8005392:	4603      	mov	r3, r0
 8005394:	81fb      	strh	r3, [r7, #14]

	return (err);
 8005396:	89fb      	ldrh	r3, [r7, #14]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <can_main_handler_tx>:
/**
 * @param caller_idx
 * @return LI_CAN_SLV_ERR_OK
 */
uint8_t can_main_handler_tx(uint16_t caller_idx)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	80fb      	strh	r3, [r7, #6]

#if defined(OUTER) || defined(OUTER_APP)
		/*----------------------------------------------------------------------*/
		/* check if any synchronous process transmit are valid                  */
		/*----------------------------------------------------------------------*/
		if (can_main_sync_process_tx_data_ctrl.send_cmd != CAN_MAIN_PROCESS_SYNC_SEND_DATA_ACK)
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <can_main_handler_tx+0x38>)
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <can_main_handler_tx+0x28>
		{
			/* start transmission of new sync data set */
			can_main_sync_process_tx_data_ctrl.send_cmd = CAN_MAIN_PROCESS_SYNC_SEND_DATA_ACK;
 80053b4:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <can_main_handler_tx+0x38>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	801a      	strh	r2, [r3, #0]
			can_main_sync_process_tx_data_ctrl.send = can_main_sync_process_tx_data_ctrl.send_reg;
 80053ba:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <can_main_handler_tx+0x38>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4a06      	ldr	r2, [pc, #24]	; (80053d8 <can_main_handler_tx+0x38>)
 80053c0:	6093      	str	r3, [r2, #8]
			can_main_sync_process_tx_data_ctrl.send_current = 0;
 80053c2:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <can_main_handler_tx+0x38>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	81da      	strh	r2, [r3, #14]
#ifdef LI_CAN_SLV_DEBUG_MAIN_TX_HANDLER
			LI_CAN_SLV_DEBUG_PRINT("\n-> new c_m_s_p_t_d_c_send: %08lx", can_main_sync_process_tx_data_ctrl.send_reg);
#endif // #ifdef LI_CAN_SLV_DEBUG_MAIN_TX_HANDLER
		}

		can_main_sync_process_tx_data();
 80053c8:	f7ff feb4 	bl	8005134 <can_main_sync_process_tx_data>
#endif // #ifdef LI_CAN_SLV_RECONNECT

#ifdef DEBUG_PIN
	DEBUG_PIN_CAN_TX_ISR = 0;
#endif // #ifdef DEBUG_PIN
	return 0;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2000067c 	.word	0x2000067c

080053dc <error_syserr_send>:
 * \param[in] module_nr logical CAN module number that caused the error, if 0 the first module number of the whole module is taken
 * \param[in] priority_redundant Priority of system error issued (must be equal to parameter priority)
 * \return li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t error_syserr_send(li_can_slv_errorcode_t errnum, err_prio_t priority, li_can_slv_module_nr_t module_nr, err_prio_t priority_redundant)
{
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b087      	sub	sp, #28
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4623      	mov	r3, r4
 80053ec:	80fb      	strh	r3, [r7, #6]
 80053ee:	4603      	mov	r3, r0
 80053f0:	717b      	strb	r3, [r7, #5]
 80053f2:	460b      	mov	r3, r1
 80053f4:	807b      	strh	r3, [r7, #2]
 80053f6:	4613      	mov	r3, r2
 80053f8:	713b      	strb	r3, [r7, #4]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	81fb      	strh	r3, [r7, #14]
	msg_code_t msg_code;

	priority_redundant = priority_redundant;

	msg_code = MSG_SG_EXPAND(errnum) | MSG_GROUP_CAN;
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800540c:	4313      	orrs	r3, r2
 800540e:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8005412:	60bb      	str	r3, [r7, #8]
	err = error_syserr_send_full(msg_code, 0, priority, MSG_EXTRACT_GROUP(msg_code), MSG_EXTRACT_SUBGROUP(msg_code), module_nr);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	0f1b      	lsrs	r3, r3, #28
 8005418:	b2d8      	uxtb	r0, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	0e1b      	lsrs	r3, r3, #24
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	b2db      	uxtb	r3, r3
 8005426:	7979      	ldrb	r1, [r7, #5]
 8005428:	887a      	ldrh	r2, [r7, #2]
 800542a:	9201      	str	r2, [sp, #4]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	4603      	mov	r3, r0
 8005430:	460a      	mov	r2, r1
 8005432:	2100      	movs	r1, #0
 8005434:	68b8      	ldr	r0, [r7, #8]
 8005436:	f000 f807 	bl	8005448 <error_syserr_send_full>
 800543a:	4603      	mov	r3, r0
 800543c:	81fb      	strh	r3, [r7, #14]
	return err;
 800543e:	89fb      	ldrh	r3, [r7, #14]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	bd90      	pop	{r4, r7, pc}

08005448 <error_syserr_send_full>:
 * @param subgroup error subgroup
 * @param module_nr module number
 * @return LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t error_syserr_send_full(msg_code_t msg_code, byte_t add_info, li_can_slv_msg_priority_t priority, byte_t group, byte_t subgroup, li_can_slv_module_nr_t module_nr)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	4608      	mov	r0, r1
 8005452:	4611      	mov	r1, r2
 8005454:	461a      	mov	r2, r3
 8005456:	4603      	mov	r3, r0
 8005458:	70fb      	strb	r3, [r7, #3]
 800545a:	460b      	mov	r3, r1
 800545c:	70bb      	strb	r3, [r7, #2]
 800545e:	4613      	mov	r3, r2
 8005460:	707b      	strb	r3, [r7, #1]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	81fb      	strh	r3, [r7, #14]
		error_init();
	}
#endif // #ifdef SYSERR_QUEUE

	/* calculate group subgroup info */
	group_subgroup = (byte_t)(subgroup + (group << 4));
 8005466:	787b      	ldrb	r3, [r7, #1]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	b2da      	uxtb	r2, r3
 800546c:	7e3b      	ldrb	r3, [r7, #24]
 800546e:	4413      	add	r3, r2
 8005470:	737b      	strb	r3, [r7, #13]

	if (priority == ERR_LVL_FATAL)
 8005472:	78bb      	ldrb	r3, [r7, #2]
 8005474:	2b0f      	cmp	r3, #15
 8005476:	d011      	beq.n	800549c <error_syserr_send_full+0x54>
	return (err);
#else
	else
	{
		/* there is no queue so the last entry wins */
		error_module_nr = module_nr;
 8005478:	4a0c      	ldr	r2, [pc, #48]	; (80054ac <error_syserr_send_full+0x64>)
 800547a:	8bbb      	ldrh	r3, [r7, #28]
 800547c:	8013      	strh	r3, [r2, #0]
		error_msg_code = msg_code;
 800547e:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <error_syserr_send_full+0x68>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6013      	str	r3, [r2, #0]
		error_priority = priority;
 8005484:	4a0b      	ldr	r2, [pc, #44]	; (80054b4 <error_syserr_send_full+0x6c>)
 8005486:	78bb      	ldrb	r3, [r7, #2]
 8005488:	7013      	strb	r3, [r2, #0]
		error_syserr_number = 1;
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <error_syserr_send_full+0x70>)
 800548c:	2201      	movs	r2, #1
 800548e:	801a      	strh	r2, [r3, #0]
		error_add_info = add_info;
 8005490:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <error_syserr_send_full+0x74>)
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	7013      	strb	r3, [r2, #0]
		error_group_subgroup = group_subgroup;
 8005496:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <error_syserr_send_full+0x78>)
 8005498:	7b7b      	ldrb	r3, [r7, #13]
 800549a:	7013      	strb	r3, [r2, #0]
	}
	return (err);
 800549c:	89fb      	ldrh	r3, [r7, #14]
#endif // #ifdef SYSERR_QUEUE
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	2000069c 	.word	0x2000069c
 80054b0:	200006a0 	.word	0x200006a0
 80054b4:	200006a4 	.word	0x200006a4
 80054b8:	200006a6 	.word	0x200006a6
 80054bc:	200006a8 	.word	0x200006a8
 80054c0:	200006a9 	.word	0x200006a9

080054c4 <error_syserr_get_full>:
 * @param pgroup_subgroup pointer to group_subgroup
 * @param pmodule_nr pointer to module number
 * @return #li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t error_syserr_get_full(msg_code_t *pmsg_code, byte_t *padd_info, err_prio_t *ppriority, byte_t *pgroup_subgroup, li_can_slv_module_nr_t *pmodule_nr)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
#endif // #ifdef _KEIL
#endif // #ifdef LI_CAN_SLV_BOOT
	}
	return (err);
#else
	*pmodule_nr = error_module_nr;
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <error_syserr_get_full+0x4c>)
 80054d4:	881a      	ldrh	r2, [r3, #0]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	801a      	strh	r2, [r3, #0]
	*pmsg_code = error_msg_code;
 80054da:	4b0e      	ldr	r3, [pc, #56]	; (8005514 <error_syserr_get_full+0x50>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	601a      	str	r2, [r3, #0]
	*ppriority = error_priority;
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <error_syserr_get_full+0x54>)
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	701a      	strb	r2, [r3, #0]
	*padd_info = error_add_info;
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <error_syserr_get_full+0x58>)
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	701a      	strb	r2, [r3, #0]
	*pgroup_subgroup = error_group_subgroup;
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <error_syserr_get_full+0x5c>)
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
	error_syserr_number = 0;
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <error_syserr_get_full+0x60>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	801a      	strh	r2, [r3, #0]
	return (LI_CAN_SLV_ERR_OK);
 8005500:	2300      	movs	r3, #0
#endif // #ifdef SYSERR_QUEUE
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	2000069c 	.word	0x2000069c
 8005514:	200006a0 	.word	0x200006a0
 8005518:	200006a4 	.word	0x200006a4
 800551c:	200006a8 	.word	0x200006a8
 8005520:	200006a9 	.word	0x200006a9
 8005524:	200006a6 	.word	0x200006a6

08005528 <error_syserr_num>:
/**
 * @brief Returns the number of entries in system error queue
 * @return Number of entries in system error queue
 */
uint16_t error_syserr_num(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
	printf("\nerr_num --> state:%d num:%d", error_system_state, num);
#endif // #ifdef DEBUG_ERROR

	return (num);
#else
	return (error_syserr_number);
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <error_syserr_num+0x14>)
 800552e:	881b      	ldrh	r3, [r3, #0]
#endif // #ifdef SYSERR_QUEUE
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	200006a6 	.word	0x200006a6

08005540 <can_sync_init>:
/**
 * @brief initializes all internal variables
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_sync_init(void)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	80bb      	strh	r3, [r7, #4]
#ifdef LI_CAN_SLV_MON
	can_port_memory_set(can_sync_data_main_tx, 0, sizeof(can_sync_data_t));
	can_port_memory_set(can_sync_data_mon_rx, 0, sizeof(can_sync_data_t));
#endif // #ifdef LI_CAN_SLV_MON

	can_sync.pr_periode = LI_CAN_SLV_SYNC_PROCESS_PERIODE_MAX;
 800554a:	4b11      	ldr	r3, [pc, #68]	; (8005590 <can_sync_init+0x50>)
 800554c:	2232      	movs	r2, #50	; 0x32
 800554e:	625a      	str	r2, [r3, #36]	; 0x24
	for (i = 0; i < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES; i++)
 8005550:	2300      	movs	r3, #0
 8005552:	80fb      	strh	r3, [r7, #6]
 8005554:	e011      	b.n	800557a <can_sync_init+0x3a>
	{
		can_sync_process_image_valid_cbk_table[i] = NULL;
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <can_sync_init+0x54>)
 800555a:	2100      	movs	r1, #0
 800555c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		can_sync_process_image_not_valid_cbk_table[i] = NULL;
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <can_sync_init+0x58>)
 8005564:	2100      	movs	r1, #0
 8005566:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		can_sync_process_request_rx_cbk_table[i] = NULL;
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	4a0b      	ldr	r2, [pc, #44]	; (800559c <can_sync_init+0x5c>)
 800556e:	2100      	movs	r1, #0
 8005570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES; i++)
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	3301      	adds	r3, #1
 8005578:	80fb      	strh	r3, [r7, #6]
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0ea      	beq.n	8005556 <can_sync_init+0x16>
	if (err == LI_CAN_SLV_ERR_OK)
	{
		err = testsys_system_page_add(&can_sync_err_node_ab_testsys[0], "CAN synchronous process errors system");
	}
#endif // #ifdef SHOW_CAN_SYNC
	return (err);
 8005580:	88bb      	ldrh	r3, [r7, #4]
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	200006ac 	.word	0x200006ac
 8005594:	200006e4 	.word	0x200006e4
 8005598:	200006e8 	.word	0x200006e8
 800559c:	200006ec 	.word	0x200006ec

080055a0 <can_sync_rx_process_main>:
 * @param dlc is the data length code of received process request
 * @param[in] can is the data source pointer to received data
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_sync_rx_process_main(uint16_t dlc, byte_t const *can)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	6039      	str	r1, [r7, #0]
 80055aa:	80fb      	strh	r3, [r7, #6]
	can_main_diagnose.pr++;
#endif // #ifdef CAN_MAIN_DIAGNOSE

	can = can; // suppress warning

	can_sync.pr_periode = can_port_ticks_2_msec(can_port_get_system_ticks() - can_sync.main_pr_time);
 80055ac:	f7fb f846 	bl	800063c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <can_sync_rx_process_main+0x4c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	4a0c      	ldr	r2, [pc, #48]	; (80055ec <can_sync_rx_process_main+0x4c>)
 80055ba:	6253      	str	r3, [r2, #36]	; 0x24
	can_sync.main_pr_time = can_port_get_system_ticks();
 80055bc:	f7fb f83e 	bl	800063c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <can_sync_rx_process_main+0x4c>)
 80055c4:	601a      	str	r2, [r3, #0]

	can_sync.main_pr_cnt++;
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <can_sync_rx_process_main+0x4c>)
 80055c8:	889b      	ldrh	r3, [r3, #4]
 80055ca:	3301      	adds	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	4b07      	ldr	r3, [pc, #28]	; (80055ec <can_sync_rx_process_main+0x4c>)
 80055d0:	809a      	strh	r2, [r3, #4]
	can_sync.main_pr_dlc = dlc;
 80055d2:	4a06      	ldr	r2, [pc, #24]	; (80055ec <can_sync_rx_process_main+0x4c>)
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	80d3      	strh	r3, [r2, #6]
	//	can_sync.main_pr_index = (uint16_t) can[0];
	can_sync.main_pr_flag = 0xFFFF;
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <can_sync_rx_process_main+0x4c>)
 80055da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055de:	831a      	strh	r2, [r3, #24]
	return (LI_CAN_SLV_ERR_OK);
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	200006ac 	.word	0x200006ac

080055f0 <can_sync_rx_data_main>:
 * @param dlc is the data length code of the transmit object
 * @param[in] can is the data pointer of the used CAN message object
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_sync_rx_data_main(uint16_t table_pos, uint16_t can_id, uint16_t dlc, byte_t *can)
{
 80055f0:	b590      	push	{r4, r7, lr}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	4603      	mov	r3, r0
 80055fa:	81fb      	strh	r3, [r7, #14]
 80055fc:	460b      	mov	r3, r1
 80055fe:	81bb      	strh	r3, [r7, #12]
 8005600:	4613      	mov	r3, r2
 8005602:	817b      	strh	r3, [r7, #10]

#ifdef LI_CAN_SLV_SYNC_CHECK_MODULE_NR_AND_DLC
	li_can_slv_module_nr_t module_nr;
#endif // #ifdef LI_CAN_SLV_SYNC_CHECK_MODULE_NR_AND_DLC

	obj = can_id & CAN_SYNC_OBJ_MASK;
 8005604:	89bb      	ldrh	r3, [r7, #12]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	82fb      	strh	r3, [r7, #22]
		LI_CAN_SLV_DEBUG_PRINT("\n");
	}
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_MAIN

	/* call main RX-conversion code */
	err = can_config_module_tab[table_pos].rx_main_sync[obj](can, (byte_t *) can_config_module_tab[table_pos].rx[obj], dlc);
 800560c:	89fa      	ldrh	r2, [r7, #14]
 800560e:	8af9      	ldrh	r1, [r7, #22]
 8005610:	4818      	ldr	r0, [pc, #96]	; (8005674 <can_sync_rx_data_main+0x84>)
 8005612:	4613      	mov	r3, r2
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	4413      	add	r3, r2
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	440b      	add	r3, r1
 800561c:	331a      	adds	r3, #26
 800561e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8005622:	89fa      	ldrh	r2, [r7, #14]
 8005624:	8af9      	ldrh	r1, [r7, #22]
 8005626:	4813      	ldr	r0, [pc, #76]	; (8005674 <can_sync_rx_data_main+0x84>)
 8005628:	4613      	mov	r3, r2
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	4413      	add	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	440b      	add	r3, r1
 8005632:	3304      	adds	r3, #4
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4403      	add	r3, r0
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	897a      	ldrh	r2, [r7, #10]
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	47a0      	blx	r4
 8005642:	4603      	mov	r3, r0
 8005644:	82bb      	strh	r3, [r7, #20]
	can_sync.main_rx_cnt[table_pos][obj]++;
 8005646:	89fa      	ldrh	r2, [r7, #14]
 8005648:	8afb      	ldrh	r3, [r7, #22]
 800564a:	480b      	ldr	r0, [pc, #44]	; (8005678 <can_sync_rx_data_main+0x88>)
 800564c:	0091      	lsls	r1, r2, #2
 800564e:	4419      	add	r1, r3
 8005650:	3104      	adds	r1, #4
 8005652:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8005656:	3101      	adds	r1, #1
 8005658:	b288      	uxth	r0, r1
 800565a:	4907      	ldr	r1, [pc, #28]	; (8005678 <can_sync_rx_data_main+0x88>)
 800565c:	0092      	lsls	r2, r2, #2
 800565e:	4413      	add	r3, r2
 8005660:	3304      	adds	r3, #4
 8005662:	4602      	mov	r2, r0
 8005664:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#endif // #ifdef LI_CAN_SLV_MAIN_MON
	return (err);
 8005668:	8abb      	ldrh	r3, [r7, #20]
}
 800566a:	4618      	mov	r0, r3
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}
 8005672:	bf00      	nop
 8005674:	2000000c 	.word	0x2000000c
 8005678:	200006ac 	.word	0x200006ac

0800567c <can_sync_tx_data_main>:
 * 	@param dlc is the data length code of the transmit object
 * 	@param[in] can is the data pointer of the used CAN message object
 * 	@return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_sync_tx_data_main(uint16_t table_pos, uint16_t obj, uint16_t dlc, byte_t *can)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b096      	sub	sp, #88	; 0x58
 8005680:	af00      	add	r7, sp, #0
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	4603      	mov	r3, r0
 8005686:	81fb      	strh	r3, [r7, #14]
 8005688:	460b      	mov	r3, r1
 800568a:	81bb      	strh	r3, [r7, #12]
 800568c:	4613      	mov	r3, r2
 800568e:	817b      	strh	r3, [r7, #10]
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_MAIN

#ifdef LI_CAN_SLV_MON
	word_t *dptr1 = (word_t *) &can_sync_data_main_tx[table_pos].data[obj][0];
#else // #ifdef LI_CAN_SLV_MON
	word_t *dptr1 = (word_t *) &can_sync_data_main_tx_tmp.data[obj][0];
 8005690:	89bb      	ldrh	r3, [r7, #12]
 8005692:	f107 0214 	add.w	r2, r7, #20
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4413      	add	r3, r2
 800569a:	657b      	str	r3, [r7, #84]	; 0x54
#endif // #ifdef LI_CAN_SLV_MON
	word_t *sptr1 = (word_t *) can_config_module_tab[table_pos].tx[obj];
 800569c:	89fa      	ldrh	r2, [r7, #14]
 800569e:	89b9      	ldrh	r1, [r7, #12]
 80056a0:	4824      	ldr	r0, [pc, #144]	; (8005734 <can_sync_tx_data_main+0xb8>)
 80056a2:	4613      	mov	r3, r2
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4413      	add	r3, r2
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	440b      	add	r3, r1
 80056ac:	3308      	adds	r3, #8
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4403      	add	r3, r0
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	653b      	str	r3, [r7, #80]	; 0x50
	word_t *sptr3;
	word_t *dptr4;
	word_t *sptr4;

	// capture application transmit data
	dptr2 = dptr1 + 1;
 80056b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b8:	3302      	adds	r3, #2
 80056ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	sptr2 = sptr1 + 1;
 80056bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056be:	3302      	adds	r3, #2
 80056c0:	64bb      	str	r3, [r7, #72]	; 0x48
	dptr3 = dptr1 + 2;
 80056c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c4:	3304      	adds	r3, #4
 80056c6:	647b      	str	r3, [r7, #68]	; 0x44
	sptr3 = sptr1 + 2;
 80056c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ca:	3304      	adds	r3, #4
 80056cc:	643b      	str	r3, [r7, #64]	; 0x40
	dptr4 = dptr1 + 3;
 80056ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d0:	3306      	adds	r3, #6
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sptr4 = sptr1 + 3;
 80056d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d6:	3306      	adds	r3, #6
 80056d8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("cpsid i" : : : "memory");
 80056da:	b672      	cpsid	i
	DEBUG_PIN_CAN_SYNC_TX_DATA_MAIN = 1;
#endif // #ifdef DEBUG_PIN

	// copy atomic
	CAN_PORT_DISABLE_IRQ();
	*dptr1 = *sptr1;
 80056dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e2:	801a      	strh	r2, [r3, #0]
	*dptr2 = *sptr2;
 80056e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e6:	881a      	ldrh	r2, [r3, #0]
 80056e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ea:	801a      	strh	r2, [r3, #0]
	*dptr3 = *sptr3;
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	881a      	ldrh	r2, [r3, #0]
 80056f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f2:	801a      	strh	r2, [r3, #0]
	*dptr4 = *sptr4;
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	881a      	ldrh	r2, [r3, #0]
 80056f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fa:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056fc:	b662      	cpsie	i
#endif // #ifdef DEBUG_PIN

#ifdef LI_CAN_SLV_MON
	err = can_config_module_tab[table_pos].tx_main_sync[obj](can, &can_sync_data_main_tx[table_pos].data[obj][0], dlc);
#else // #ifdef LI_CAN_SLV_MON
	err = can_config_module_tab[table_pos].tx_main_sync[obj](can, &can_sync_data_main_tx_tmp.data[obj][0], dlc);
 80056fe:	89fa      	ldrh	r2, [r7, #14]
 8005700:	89b9      	ldrh	r1, [r7, #12]
 8005702:	480c      	ldr	r0, [pc, #48]	; (8005734 <can_sync_tx_data_main+0xb8>)
 8005704:	4613      	mov	r3, r2
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	4413      	add	r3, r2
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	440b      	add	r3, r1
 800570e:	331e      	adds	r3, #30
 8005710:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005714:	89ba      	ldrh	r2, [r7, #12]
 8005716:	f107 0114 	add.w	r1, r7, #20
 800571a:	00d2      	lsls	r2, r2, #3
 800571c:	4411      	add	r1, r2
 800571e:	897a      	ldrh	r2, [r7, #10]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
 8005724:	4603      	mov	r3, r0
 8005726:	86fb      	strh	r3, [r7, #54]	; 0x36
			LI_CAN_SLV_DEBUG_PRINT("%02X ", can[i]);
		}
		LI_CAN_SLV_DEBUG_PRINT("\n");
	}
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_MAIN
	return (err);
 8005728:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800572a:	4618      	mov	r0, r3
 800572c:	3758      	adds	r7, #88	; 0x58
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	2000000c 	.word	0x2000000c

08005738 <can_sync_tx_data_main_ok>:
 * are #LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES)
 * @param obj is the transmit object number (maximum of 4 transmit objects for each logical module)
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_sync_tx_data_main_ok(uint16_t table_pos, uint16_t obj)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	460a      	mov	r2, r1
 8005742:	80fb      	strh	r3, [r7, #6]
 8005744:	4613      	mov	r3, r2
 8005746:	80bb      	strh	r3, [r7, #4]
	can_sync.main_tx_cnt[table_pos][obj]++;
#else // #ifdef LI_CAN_SLV_SYNC_MAIN_TX_CNT
	table_pos = table_pos;
	obj = obj;
#endif // #ifdef LI_CAN_SLV_SYNC_MAIN_TX_CNT
	return (LI_CAN_SLV_ERR_OK);
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <li_can_slv_sync_check_process_image>:
 * of the received object via the monitor CAN-controller must be exactly the same.
 * 	- The contents of the transmitted data via main CAN-controller and then received by the monitor CAN-controller
 * (loop back) must be identical in consideration of the main TX-conversion-code and the monitor TX-conversion-code.\n
 */
void li_can_slv_sync_check_process_image(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	li_can_slv_errorcode_t err;
	uint16_t process_image_valid = 1;
 800575e:	2301      	movs	r3, #1
 8005760:	80fb      	strh	r3, [r7, #6]
#ifdef LI_CAN_SLV_MON
	// only do checks when the PA was also received on the monitor CAN controller
	if (can_sync.main_pr_flag == 0xffff && can_sync.mon_pr_flag == 0xffff)
	{
#else
	if (can_sync.main_pr_flag == 0xffff)
 8005762:	4b35      	ldr	r3, [pc, #212]	; (8005838 <li_can_slv_sync_check_process_image+0xe0>)
 8005764:	8b1b      	ldrh	r3, [r3, #24]
 8005766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576a:	4293      	cmp	r3, r2
 800576c:	d15f      	bne.n	800582e <li_can_slv_sync_check_process_image+0xd6>
#ifdef LI_CAN_SLV_DEBUG_CAN_SYNC_CHECK_PROCESS
		LI_CAN_SLV_DEBUG_PRINT("\ncan_sync_check_process_image");
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_SYNC_CHECK_PROCESS

		// check process DLC is exactly 1
		if (can_sync.main_pr_dlc > CAN_SYNC_VALID_DLC_MAX_PROCESS_REQUEST)
 800576e:	4b32      	ldr	r3, [pc, #200]	; (8005838 <li_can_slv_sync_check_process_image+0xe0>)
 8005770:	88db      	ldrh	r3, [r3, #6]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d853      	bhi.n	800581e <li_can_slv_sync_check_process_image+0xc6>
			goto clear_exit;
		}
#endif // #ifdef LI_CAN_SLV_MON

		// check the number of process requests
		if (can_sync.main_pr_cnt != CAN_SYNC_VALID_NR_OF_PROCESS_REQUEST)
 8005776:	4b30      	ldr	r3, [pc, #192]	; (8005838 <li_can_slv_sync_check_process_image+0xe0>)
 8005778:	889b      	ldrh	r3, [r3, #4]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d006      	beq.n	800578c <li_can_slv_sync_check_process_image+0x34>
		{
			can_sync.err.main_pr_cnt++;
 800577e:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <li_can_slv_sync_check_process_image+0xe0>)
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	3301      	adds	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	4b2c      	ldr	r3, [pc, #176]	; (8005838 <li_can_slv_sync_check_process_image+0xe0>)
 8005788:	855a      	strh	r2, [r3, #42]	; 0x2a
#ifdef LI_CAN_SLV_DEBUG_CAN_SYNC_CHECK_PROCESS_ERROR
			LI_CAN_SLV_DEBUG_PRINT("\nERR_MSG_CAN_MAIN_NR_OF_PROCESS_REQUEST: %d", can_sync.main_pr_cnt);
#endif // #ifdef LI_CAN_SLV_DEBUG_CAN_SYNC_CHECK_PROCESS_ERROR
			goto clear_exit;
 800578a:	e04d      	b.n	8005828 <li_can_slv_sync_check_process_image+0xd0>
			goto clear_exit;
		}
#endif // #ifdef LI_CAN_SLV_MON

		// check the process image (rx/tx data of each used logical module
		for (i = 0; i < can_config_nr_of_modules; i++)
 800578c:	2300      	movs	r3, #0
 800578e:	80bb      	strh	r3, [r7, #4]
 8005790:	e030      	b.n	80057f4 <li_can_slv_sync_check_process_image+0x9c>
		{
			err = li_can_slv_sync_check_process_image_module(i);
 8005792:	88bb      	ldrh	r3, [r7, #4]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f8f9 	bl	800598c <li_can_slv_sync_check_process_image_module>
 800579a:	4603      	mov	r3, r0
 800579c:	807b      	strh	r3, [r7, #2]
			if (err != LI_CAN_SLV_ERR_OK)
 800579e:	887b      	ldrh	r3, [r7, #2]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d013      	beq.n	80057cc <li_can_slv_sync_check_process_image+0x74>
			{
				can_sync.image_valid[i] = FALSE;
 80057a4:	88bb      	ldrh	r3, [r7, #4]
 80057a6:	4a24      	ldr	r2, [pc, #144]	; (8005838 <li_can_slv_sync_check_process_image+0xe0>)
 80057a8:	4413      	add	r3, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

				// call the process call function if the image is not valid
				if (can_sync_process_image_not_valid_cbk_table[i] != NULL)
 80057b0:	88bb      	ldrh	r3, [r7, #4]
 80057b2:	4a22      	ldr	r2, [pc, #136]	; (800583c <li_can_slv_sync_check_process_image+0xe4>)
 80057b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <li_can_slv_sync_check_process_image+0x6e>
				{
					can_sync_process_image_not_valid_cbk_table[i]();
 80057bc:	88bb      	ldrh	r3, [r7, #4]
 80057be:	4a1f      	ldr	r2, [pc, #124]	; (800583c <li_can_slv_sync_check_process_image+0xe4>)
 80057c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c4:	4798      	blx	r3
				}

				// one or more images are not valid
				process_image_valid = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	80fb      	strh	r3, [r7, #6]
 80057ca:	e010      	b.n	80057ee <li_can_slv_sync_check_process_image+0x96>
			}
			else
			{
				can_sync.image_valid[i] = TRUE;
 80057cc:	88bb      	ldrh	r3, [r7, #4]
 80057ce:	4a1a      	ldr	r2, [pc, #104]	; (8005838 <li_can_slv_sync_check_process_image+0xe0>)
 80057d0:	4413      	add	r3, r2
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				// call the process call function if the image is valid
				if (can_sync_process_image_valid_cbk_table[i] != NULL)
 80057d8:	88bb      	ldrh	r3, [r7, #4]
 80057da:	4a19      	ldr	r2, [pc, #100]	; (8005840 <li_can_slv_sync_check_process_image+0xe8>)
 80057dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <li_can_slv_sync_check_process_image+0x96>
				{
					can_sync_process_image_valid_cbk_table[i]();
 80057e4:	88bb      	ldrh	r3, [r7, #4]
 80057e6:	4a16      	ldr	r2, [pc, #88]	; (8005840 <li_can_slv_sync_check_process_image+0xe8>)
 80057e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ec:	4798      	blx	r3
		for (i = 0; i < can_config_nr_of_modules; i++)
 80057ee:	88bb      	ldrh	r3, [r7, #4]
 80057f0:	3301      	adds	r3, #1
 80057f2:	80bb      	strh	r3, [r7, #4]
 80057f4:	4b13      	ldr	r3, [pc, #76]	; (8005844 <li_can_slv_sync_check_process_image+0xec>)
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	88ba      	ldrh	r2, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d3c9      	bcc.n	8005792 <li_can_slv_sync_check_process_image+0x3a>
				}
			}
		}

		// whole process image correct with all logical modules
		if (process_image_valid == 1)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d10e      	bne.n	8005822 <li_can_slv_sync_check_process_image+0xca>
		{
			can_sync.pr_time_valid = can_port_get_system_ticks();
 8005804:	f7fa ff1a 	bl	800063c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <li_can_slv_sync_check_process_image+0xe0>)
 800580c:	61da      	str	r2, [r3, #28]
			if (can_sync_process_call != NULL)
 800580e:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <li_can_slv_sync_check_process_image+0xf0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <li_can_slv_sync_check_process_image+0xce>
			{
				can_sync_process_call();
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <li_can_slv_sync_check_process_image+0xf0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4798      	blx	r3
		else
		{
			// image not valid
			goto clear_exit;
		}
		goto clear_exit;
 800581c:	e003      	b.n	8005826 <li_can_slv_sync_check_process_image+0xce>
			goto clear_exit;
 800581e:	bf00      	nop
 8005820:	e002      	b.n	8005828 <li_can_slv_sync_check_process_image+0xd0>
			goto clear_exit;
 8005822:	bf00      	nop
 8005824:	e000      	b.n	8005828 <li_can_slv_sync_check_process_image+0xd0>
		goto clear_exit;
 8005826:	bf00      	nop
	// leave function here
	return;

clear_exit:
	// clear process data structure for next process image
	li_can_slv_sync_clear_process_image();
 8005828:	f000 f864 	bl	80058f4 <li_can_slv_sync_clear_process_image>
 800582c:	e000      	b.n	8005830 <li_can_slv_sync_check_process_image+0xd8>
	return;
 800582e:	bf00      	nop
}
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200006ac 	.word	0x200006ac
 800583c:	200006e8 	.word	0x200006e8
 8005840:	200006e4 	.word	0x200006e4
 8005844:	200005aa 	.word	0x200005aa
 8005848:	200006e0 	.word	0x200006e0

0800584c <can_sync_set_pr_call_fnc>:
 * @brief set the process call function pointer
 * @param pfnc function pointer for the process call
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_sync_set_pr_call_fnc(void (*pfnc)(void))
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	can_sync_process_call = pfnc;
 8005854:	4a04      	ldr	r2, [pc, #16]	; (8005868 <can_sync_set_pr_call_fnc+0x1c>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6013      	str	r3, [r2, #0]
	return (LI_CAN_SLV_ERR_OK);
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	200006e0 	.word	0x200006e0

0800586c <can_sync_set_first_process_request_call_fnc>:
/**
 * @brief can_sync_set_first_process_request_call_fnc
 * @return	#li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_sync_set_first_process_request_call_fnc(void (*pfnc)(void))
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
	can_sync_first_process_request_call = pfnc;
 8005874:	4a04      	ldr	r2, [pc, #16]	; (8005888 <can_sync_set_first_process_request_call_fnc+0x1c>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6013      	str	r3, [r2, #0]
	return (LI_CAN_SLV_ERR_OK);
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	200006f4 	.word	0x200006f4

0800588c <li_can_slv_sync_process_request_rx>:

/**
 * \brief li_can_slv_sync_process_request_rx
 */
void li_can_slv_sync_process_request_rx(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
	uint16_t i;

	if (can_sync_first_process_detect == 0)
 8005892:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <li_can_slv_sync_process_request_rx+0x58>)
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <li_can_slv_sync_process_request_rx+0x22>
	{
		can_sync_first_process_detect = 1;
 800589a:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <li_can_slv_sync_process_request_rx+0x58>)
 800589c:	2201      	movs	r2, #1
 800589e:	801a      	strh	r2, [r3, #0]
		if (can_sync_first_process_request_call != NULL)
 80058a0:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <li_can_slv_sync_process_request_rx+0x5c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <li_can_slv_sync_process_request_rx+0x22>
		{
			can_sync_first_process_request_call();
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <li_can_slv_sync_process_request_rx+0x5c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4798      	blx	r3
		}
	}

	for (i = 0; i < can_config_nr_of_modules; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	80fb      	strh	r3, [r7, #6]
 80058b2:	e00d      	b.n	80058d0 <li_can_slv_sync_process_request_rx+0x44>
	{
		if (can_sync_process_request_rx_cbk_table[i] != NULL)
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	4a0d      	ldr	r2, [pc, #52]	; (80058ec <li_can_slv_sync_process_request_rx+0x60>)
 80058b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <li_can_slv_sync_process_request_rx+0x3e>
		{
			can_sync_process_request_rx_cbk_table[i]();
 80058c0:	88fb      	ldrh	r3, [r7, #6]
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <li_can_slv_sync_process_request_rx+0x60>)
 80058c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c8:	4798      	blx	r3
	for (i = 0; i < can_config_nr_of_modules; i++)
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	3301      	adds	r3, #1
 80058ce:	80fb      	strh	r3, [r7, #6]
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <li_can_slv_sync_process_request_rx+0x64>)
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	88fa      	ldrh	r2, [r7, #6]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d3ec      	bcc.n	80058b4 <li_can_slv_sync_process_request_rx+0x28>
		}
	}
}
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	200006f0 	.word	0x200006f0
 80058e8:	200006f4 	.word	0x200006f4
 80058ec:	200006ec 	.word	0x200006ec
 80058f0:	200005aa 	.word	0x200005aa

080058f4 <li_can_slv_sync_clear_process_image>:
/*--------------------------------------------------------------------------*/
/**
 * @brief clears the data structure to check the synchronous process
 */
static void li_can_slv_sync_clear_process_image(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
	uint16_t i, j;

	can_sync.main_pr_cnt = 0;
 80058fa:	4b22      	ldr	r3, [pc, #136]	; (8005984 <li_can_slv_sync_clear_process_image+0x90>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	809a      	strh	r2, [r3, #4]
	can_sync.main_pr_flag = 0;
 8005900:	4b20      	ldr	r3, [pc, #128]	; (8005984 <li_can_slv_sync_clear_process_image+0x90>)
 8005902:	2200      	movs	r2, #0
 8005904:	831a      	strh	r2, [r3, #24]
#ifdef LI_CAN_SLV_MON
	can_sync.mon_pr_cnt = 0;
	can_sync.mon_pr_flag = 0;
#endif // #ifdef LI_CAN_SLV_MON

	for (i = 0; i < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES; i++)
 8005906:	2300      	movs	r3, #0
 8005908:	80fb      	strh	r3, [r7, #6]
 800590a:	e031      	b.n	8005970 <li_can_slv_sync_clear_process_image+0x7c>
	{
		for (j = 0; j < can_config_module_tab[i].rx_obj_sync; j++)
 800590c:	2300      	movs	r3, #0
 800590e:	80bb      	strh	r3, [r7, #4]
 8005910:	e00b      	b.n	800592a <li_can_slv_sync_clear_process_image+0x36>
		{
			can_sync.main_rx_cnt[i][j] = 0;
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	88bb      	ldrh	r3, [r7, #4]
 8005916:	491b      	ldr	r1, [pc, #108]	; (8005984 <li_can_slv_sync_clear_process_image+0x90>)
 8005918:	0092      	lsls	r2, r2, #2
 800591a:	4413      	add	r3, r2
 800591c:	3304      	adds	r3, #4
 800591e:	2200      	movs	r2, #0
 8005920:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (j = 0; j < can_config_module_tab[i].rx_obj_sync; j++)
 8005924:	88bb      	ldrh	r3, [r7, #4]
 8005926:	3301      	adds	r3, #1
 8005928:	80bb      	strh	r3, [r7, #4]
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	4916      	ldr	r1, [pc, #88]	; (8005988 <li_can_slv_sync_clear_process_image+0x94>)
 800592e:	4613      	mov	r3, r2
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	4413      	add	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	440b      	add	r3, r1
 8005938:	335c      	adds	r3, #92	; 0x5c
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	88ba      	ldrh	r2, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d3e6      	bcc.n	8005912 <li_can_slv_sync_clear_process_image+0x1e>
#ifdef LI_CAN_SLV_MON
			can_sync.mon_rx_cnt[i][j] = 0;
#endif // #ifdef LI_CAN_SLV_MON
		}
		for (j = 0; j < can_config_module_tab[i].tx_obj_sync; j++)
 8005944:	2300      	movs	r3, #0
 8005946:	80bb      	strh	r3, [r7, #4]
 8005948:	e002      	b.n	8005950 <li_can_slv_sync_clear_process_image+0x5c>
 800594a:	88bb      	ldrh	r3, [r7, #4]
 800594c:	3301      	adds	r3, #1
 800594e:	80bb      	strh	r3, [r7, #4]
 8005950:	88fa      	ldrh	r2, [r7, #6]
 8005952:	490d      	ldr	r1, [pc, #52]	; (8005988 <li_can_slv_sync_clear_process_image+0x94>)
 8005954:	4613      	mov	r3, r2
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	4413      	add	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	440b      	add	r3, r1
 800595e:	335d      	adds	r3, #93	; 0x5d
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	88ba      	ldrh	r2, [r7, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	d3ef      	bcc.n	800594a <li_can_slv_sync_clear_process_image+0x56>
	for (i = 0; i < LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES; i++)
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	3301      	adds	r3, #1
 800596e:	80fb      	strh	r3, [r7, #6]
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0ca      	beq.n	800590c <li_can_slv_sync_clear_process_image+0x18>
#ifdef LI_CAN_SLV_MON
			can_sync.mon_tx_cnt[i][j] = 0;
#endif // #ifdef LI_CAN_SLV_MON
		}
	}
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	200006ac 	.word	0x200006ac
 8005988:	2000000c 	.word	0x2000000c

0800598c <li_can_slv_sync_check_process_image_module>:
 * @param table_pos is the position in the CAN configuration module table (maximum  defined
 * logical modules are #LI_CAN_SLV_MAX_NR_OF_LOGICAL_MODULES)
 * @return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
static li_can_slv_errorcode_t li_can_slv_sync_check_process_image_module(uint16_t table_pos)
{
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	// check the transmit data objects
	for (i = 0; i < can_config_module_tab[table_pos].tx_obj_sync; i++)
 8005996:	2300      	movs	r3, #0
 8005998:	81fb      	strh	r3, [r7, #14]
 800599a:	e002      	b.n	80059a2 <li_can_slv_sync_check_process_image_module+0x16>
 800599c:	89fb      	ldrh	r3, [r7, #14]
 800599e:	3301      	adds	r3, #1
 80059a0:	81fb      	strh	r3, [r7, #14]
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	4924      	ldr	r1, [pc, #144]	; (8005a38 <li_can_slv_sync_check_process_image_module+0xac>)
 80059a6:	4613      	mov	r3, r2
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	4413      	add	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	440b      	add	r3, r1
 80059b0:	335d      	adds	r3, #93	; 0x5d
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	89fa      	ldrh	r2, [r7, #14]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3ef      	bcc.n	800599c <li_can_slv_sync_check_process_image_module+0x10>
		}
#endif // #ifdef LI_CAN_SLV_MON
	}

	// check the receive data objects
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj_sync; i++)
 80059bc:	2300      	movs	r3, #0
 80059be:	81fb      	strh	r3, [r7, #14]
 80059c0:	e01f      	b.n	8005a02 <li_can_slv_sync_check_process_image_module+0x76>
	{
		if (can_sync.main_rx_cnt[table_pos][i] != CAN_SYNC_VALID_NR_OF_RX_DATA)
 80059c2:	88fa      	ldrh	r2, [r7, #6]
 80059c4:	89fb      	ldrh	r3, [r7, #14]
 80059c6:	491d      	ldr	r1, [pc, #116]	; (8005a3c <li_can_slv_sync_check_process_image_module+0xb0>)
 80059c8:	0092      	lsls	r2, r2, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	3304      	adds	r3, #4
 80059ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d012      	beq.n	80059fc <li_can_slv_sync_check_process_image_module+0x70>
		{
			can_sync.err.main_rx_cnt[table_pos]++;
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	4918      	ldr	r1, [pc, #96]	; (8005a3c <li_can_slv_sync_check_process_image_module+0xb0>)
 80059da:	f102 0314 	add.w	r3, r2, #20
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	440b      	add	r3, r1
 80059e2:	889b      	ldrh	r3, [r3, #4]
 80059e4:	3301      	adds	r3, #1
 80059e6:	b298      	uxth	r0, r3
 80059e8:	4914      	ldr	r1, [pc, #80]	; (8005a3c <li_can_slv_sync_check_process_image_module+0xb0>)
 80059ea:	f102 0314 	add.w	r3, r2, #20
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	440b      	add	r3, r1
 80059f2:	4602      	mov	r2, r0
 80059f4:	809a      	strh	r2, [r3, #4]
			return (ERR_MSG_CAN_MAIN_NR_OF_RX_DATA);
 80059f6:	f245 0315 	movw	r3, #20501	; 0x5015
 80059fa:	e019      	b.n	8005a30 <li_can_slv_sync_check_process_image_module+0xa4>
	for (i = 0; i < can_config_module_tab[table_pos].rx_obj_sync; i++)
 80059fc:	89fb      	ldrh	r3, [r7, #14]
 80059fe:	3301      	adds	r3, #1
 8005a00:	81fb      	strh	r3, [r7, #14]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	490c      	ldr	r1, [pc, #48]	; (8005a38 <li_can_slv_sync_check_process_image_module+0xac>)
 8005a06:	4613      	mov	r3, r2
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	440b      	add	r3, r1
 8005a10:	335c      	adds	r3, #92	; 0x5c
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	89fa      	ldrh	r2, [r7, #14]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d3d2      	bcc.n	80059c2 <li_can_slv_sync_check_process_image_module+0x36>
			return (ERR_MSG_CAN_MAIN_MON_DATA_RX);
		}
#endif // #ifdef LI_CAN_SLV_MON
	}

	can_sync.pr_time_valid_module[table_pos] = can_port_get_system_ticks();
 8005a1c:	88fc      	ldrh	r4, [r7, #6]
 8005a1e:	f7fa fe0d 	bl	800063c <HAL_GetTick>
 8005a22:	4601      	mov	r1, r0
 8005a24:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <li_can_slv_sync_check_process_image_module+0xb0>)
 8005a26:	f104 0308 	add.w	r3, r4, #8
 8005a2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (LI_CAN_SLV_ERR_OK);
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}
 8005a38:	2000000c 	.word	0x2000000c
 8005a3c:	200006ac 	.word	0x200006ac

08005a40 <can_main_synchron_rx>:
 * \param[out] msg_obj message object number of the searched slot
 * \param[out] table_pos table position of the searched slot
 * \return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
CAN_PORT_STATIC_INLINE li_can_slv_errorcode_t can_main_synchron_rx(uint32_t rxi, uint16_t *msg_obj, uint16_t *table_pos)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
	uint16_t i;

	for (i = 0; i < li_can_slv_sync_main_rx_msg_obj_used; i++)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	82fb      	strh	r3, [r7, #22]
 8005a50:	e01c      	b.n	8005a8c <can_main_synchron_rx+0x4c>
	{
		if ((rxi & li_can_slv_sync_main_rx_msg_obj[i].msg_obj_mask) != 0)
 8005a52:	8afb      	ldrh	r3, [r7, #22]
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <can_main_synchron_rx+0x74>)
 8005a56:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d011      	beq.n	8005a86 <can_main_synchron_rx+0x46>
		{
			*table_pos = li_can_slv_sync_main_rx_msg_obj[i].table_pos;
 8005a62:	8afb      	ldrh	r3, [r7, #22]
 8005a64:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <can_main_synchron_rx+0x74>)
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	88db      	ldrh	r3, [r3, #6]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	801a      	strh	r2, [r3, #0]
			*msg_obj = li_can_slv_sync_main_rx_msg_obj[i].msg_obj;
 8005a72:	8afb      	ldrh	r3, [r7, #22]
 8005a74:	4a0f      	ldr	r2, [pc, #60]	; (8005ab4 <can_main_synchron_rx+0x74>)
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	889b      	ldrh	r3, [r3, #4]
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	801a      	strh	r2, [r3, #0]
			return (LI_CAN_SLV_ERR_OK);
 8005a82:	2300      	movs	r3, #0
 8005a84:	e010      	b.n	8005aa8 <can_main_synchron_rx+0x68>
	for (i = 0; i < li_can_slv_sync_main_rx_msg_obj_used; i++)
 8005a86:	8afb      	ldrh	r3, [r7, #22]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	82fb      	strh	r3, [r7, #22]
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <can_main_synchron_rx+0x78>)
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	8afa      	ldrh	r2, [r7, #22]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d3dc      	bcc.n	8005a52 <can_main_synchron_rx+0x12>
		}
	}
	*table_pos = 0;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	801a      	strh	r2, [r3, #0]
	*msg_obj = 0;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	801a      	strh	r2, [r3, #0]
	return (ERR_MSG_CAN_MAIN_RX_WRONG_SLOT);
 8005aa4:	f245 0324 	movw	r3, #20516	; 0x5024
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	200005d4 	.word	0x200005d4
 8005ab8:	200005d0 	.word	0x200005d0

08005abc <can_main_synchron_tx>:
 * \param[out] msg_obj message object number of the searched slot
 * \param[out] table_pos table position of the searched slot
 * \return #li_can_slv_errorcode_t or #LI_CAN_SLV_ERR_OK if successful
 */
CAN_PORT_STATIC_INLINE li_can_slv_errorcode_t can_main_synchron_tx(uint32_t txi, uint16_t *msg_obj, uint16_t *table_pos)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
	uint16_t i;
#ifdef LI_CAN_SLV_DEBUG_MAIN_SYNCHRON_TX_FNC
	LI_CAN_SLV_DEBUG_PRINT("\n\nc_m_s_t txi=%d ", txi);
#endif // #ifdef LI_CAN_SLV_DEBUG_MAIN_SYNCHRON_TX_FNC

	for (i = 0; i < li_can_slv_sync_main_tx_msg_obj_used; i++)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	82fb      	strh	r3, [r7, #22]
 8005acc:	e01c      	b.n	8005b08 <can_main_synchron_tx+0x4c>
	{
		if ((txi & li_can_slv_sync_main_tx_msg_obj[i].msg_obj_mask) != 0)
 8005ace:	8afb      	ldrh	r3, [r7, #22]
 8005ad0:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <can_main_synchron_tx+0x74>)
 8005ad2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d011      	beq.n	8005b02 <can_main_synchron_tx+0x46>
		{
			*table_pos = li_can_slv_sync_main_tx_msg_obj[i].table_pos;
 8005ade:	8afb      	ldrh	r3, [r7, #22]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <can_main_synchron_tx+0x74>)
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	88db      	ldrh	r3, [r3, #6]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	801a      	strh	r2, [r3, #0]
			*msg_obj = li_can_slv_sync_main_tx_msg_obj[i].msg_obj;
 8005aee:	8afb      	ldrh	r3, [r7, #22]
 8005af0:	4a0f      	ldr	r2, [pc, #60]	; (8005b30 <can_main_synchron_tx+0x74>)
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	889b      	ldrh	r3, [r3, #4]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	801a      	strh	r2, [r3, #0]
#ifdef LI_CAN_SLV_DEBUG_MAIN_SYNCHRON_TX_FNC
			LI_CAN_SLV_DEBUG_PRINT("t=%d, mo=%d\n", *table_pos, *msg_obj);
#endif // #ifdef LI_CAN_SLV_DEBUG_MAIN_SYNCHRON_TX_FNC
			return (LI_CAN_SLV_ERR_OK);
 8005afe:	2300      	movs	r3, #0
 8005b00:	e010      	b.n	8005b24 <can_main_synchron_tx+0x68>
	for (i = 0; i < li_can_slv_sync_main_tx_msg_obj_used; i++)
 8005b02:	8afb      	ldrh	r3, [r7, #22]
 8005b04:	3301      	adds	r3, #1
 8005b06:	82fb      	strh	r3, [r7, #22]
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <can_main_synchron_tx+0x78>)
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	8afa      	ldrh	r2, [r7, #22]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3dc      	bcc.n	8005ace <can_main_synchron_tx+0x12>
		}
	}
	*table_pos = 0;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	801a      	strh	r2, [r3, #0]
	*msg_obj = 0;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	801a      	strh	r2, [r3, #0]
#ifdef LI_CAN_SLV_DEBUG_MAIN_SYNCHRON_TX_FNC
	LI_CAN_SLV_DEBUG_PRINT("ERR_MSG_CAN_MAIN_TX_WRONG_SLOT");
#endif // #ifdef LI_CAN_SLV_DEBUG_MAIN_SYNCHRON_TX_FNC
	return (ERR_MSG_CAN_MAIN_TX_WRONG_SLOT);
 8005b20:	f245 0325 	movw	r3, #20517	; 0x5025
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000674 	.word	0x20000674
 8005b34:	200005d2 	.word	0x200005d2

08005b38 <can_sync_handler_rx>:
/*--------------------------------------------------------------------------*/
/* function definition (public/exported)                                    */
/*--------------------------------------------------------------------------*/
#if defined (LI_CAN_SLV_SYNC) || defined (LI_CAN_SLV_BOOT)
uint8_t can_sync_handler_rx(uint16_t msg_obj, uint8_t dlc, uint16_t canid, uint8_t *data)
{
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b08d      	sub	sp, #52	; 0x34
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	4603      	mov	r3, r0
 8005b42:	81fb      	strh	r3, [r7, #14]
 8005b44:	460b      	mov	r3, r1
 8005b46:	737b      	strb	r3, [r7, #13]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	817b      	strh	r3, [r7, #10]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif // #if defined(OUTER) || defined(OUTER_APP)
#ifdef LI_CAN_SLV_DEBUG_SYNC_RX_DATA
	uint16_t i;
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_RX_DATA

	rxi = msg_obj;
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	623b      	str	r3, [r7, #32]
#if defined(CAN_MAIN_SYSTEM_MSG_TX_QUEUE)
	txi = rxi;
#endif // #if defined(CAN_MAIN_SYSTEM_MSG_TX_QUEUE)
#endif // #ifndef LI_CAN_SLV_BOOT

	module_nr = ((canid >> 2) & 0x007F) + 1;
 8005b54:	897b      	ldrh	r3, [r7, #10]
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3301      	adds	r3, #1
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	83fb      	strh	r3, [r7, #30]

	//	if ((((1L << rxi) | (1L << txi)) & can_main_objs_mask) != 0)
	//	{
#if defined(OUTER) || defined(OUTER_APP)
	// synchrony data received
	if ((1L << rxi) & can_main_isr_inp_mask_rx)
 8005b66:	2201      	movs	r2, #1
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <can_sync_handler_rx+0x11c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d017      	beq.n	8005baa <can_sync_handler_rx+0x72>
	{
		err = can_main_synchron_rx((1L << rxi), &msg_obj, &table_pos);
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	4618      	mov	r0, r3
 8005b84:	f107 021c 	add.w	r2, r7, #28
 8005b88:	f107 030e 	add.w	r3, r7, #14
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	f7ff ff57 	bl	8005a40 <can_main_synchron_rx>
 8005b92:	4603      	mov	r3, r0
 8005b94:	84fb      	strh	r3, [r7, #38]	; 0x26

#ifdef LI_CAN_SLV_DEBUG_SYNC_RX_EXTENDED
		LI_CAN_SLV_DEBUG_PRINT(" msg_obj: %d, table_pos: %d,", msg_obj, table_pos);
		LI_CAN_SLV_DEBUG_PRINT(" err: %04x", err);
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_RX_EXTENDED
		if (err == LI_CAN_SLV_ERR_OK)
 8005b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <can_sync_handler_rx+0x72>
#ifdef LI_CAN_SLV_DEBUG_SYNC_RX_EXTENDED
			LI_CAN_SLV_DEBUG_PRINT(" id: %x", canid);
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_RX_EXTENDED

			// call synchrony receive routine of main CAN controller
			can_sync_rx_data_main(table_pos, canid, dlc, data);
 8005b9c:	8bb8      	ldrh	r0, [r7, #28]
 8005b9e:	7b7b      	ldrb	r3, [r7, #13]
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	8979      	ldrh	r1, [r7, #10]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f7ff fd23 	bl	80055f0 <can_sync_rx_data_main>
	}
#endif // #if defined(OUTER) || defined(OUTER_APP)

#if defined(OUTER) || defined(OUTER_APP)
	// process request received
	if (rxi == CAN_CONFIG_MSG_MAIN_OBJ_RX_PROCESS)
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d130      	bne.n	8005c12 <can_sync_handler_rx+0xda>
	{
#ifdef LI_CAN_SLV_DEBUG_MAIN_PROCESS_HANDLER
		LI_CAN_SLV_DEBUG_PRINT("\nnode a process rx start");
#endif // #ifdef LI_CAN_SLV_DEBUG_MAIN_PROCESS_HANDLER

		msg_obj = CAN_CONFIG_MSG_MAIN_OBJ_RX_PROCESS;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	81fb      	strh	r3, [r7, #14]
#ifdef CAN_SMP
		can_main_canid = CAN_HW_GET_ID(msg_obj);
		CALL(smp_process)(HNDLPOS_CAN_MAIN_CANID);
#endif // #ifdef CAN_SMP

		li_can_slv_sync_process_request_rx();
 8005bb4:	f7ff fe6a 	bl	800588c <li_can_slv_sync_process_request_rx>
#ifdef LI_CAN_SLV_MAIN_MON
		if (can_mainmon_type == CAN_MAINMON_TYPE_MAIN)
		{
#endif // #ifdef LI_CAN_SLV_MAIN_MON
			// send transmit data as fast as possible
			can_main_process_data_tx_set();
 8005bb8:	f7ff faa6 	bl	8005108 <can_main_process_data_tx_set>
#ifdef LI_CAN_SLV_MAIN_MON
		}
#endif // #ifdef LI_CAN_SLV_MAIN_MON

		li_can_slv_sync_check_process_image();
 8005bbc:	f7ff fdcc 	bl	8005758 <li_can_slv_sync_check_process_image>
		can_sync_rx_process_main(dlc, data);
 8005bc0:	7b7b      	ldrb	r3, [r7, #13]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fcea 	bl	80055a0 <can_sync_rx_process_main>

#ifdef LI_CAN_SLV_SYS_MODULE_ERROR
		// send system error if valid, one error per process, (sending only one error -> hold synchrony process)
		if (error_syserr_num() > 0)
 8005bcc:	f7ff fcac 	bl	8005528 <error_syserr_num>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01d      	beq.n	8005c12 <can_sync_handler_rx+0xda>
		{
			err = error_syserr_get_full(&errnum, &add_info, &priority, &group_subgroup, &module_nr);
 8005bd6:	f107 0415 	add.w	r4, r7, #21
 8005bda:	f107 0217 	add.w	r2, r7, #23
 8005bde:	f107 0116 	add.w	r1, r7, #22
 8005be2:	f107 0018 	add.w	r0, r7, #24
 8005be6:	f107 031e 	add.w	r3, r7, #30
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	4623      	mov	r3, r4
 8005bee:	f7ff fc69 	bl	80054c4 <error_syserr_get_full>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (err == LI_CAN_SLV_ERR_OK)
 8005bf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <can_sync_handler_rx+0xda>
			{
				err = can_sys_send_error_full(module_nr, errnum, add_info, priority, group_subgroup);
 8005bfc:	8bf8      	ldrh	r0, [r7, #30]
 8005bfe:	69b9      	ldr	r1, [r7, #24]
 8005c00:	7dba      	ldrb	r2, [r7, #22]
 8005c02:	7dfc      	ldrb	r4, [r7, #23]
 8005c04:	7d7b      	ldrb	r3, [r7, #21]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	4623      	mov	r3, r4
 8005c0a:	f000 f9f1 	bl	8005ff0 <can_sys_send_error_full>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	84fb      	strh	r3, [r7, #38]	; 0x26
	// system message received
#ifdef LI_CAN_SLV_BOOT
	if (rxi == CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS1)
#endif //#ifdef LI_CAN_SLV_BOOT
#if defined(OUTER) || defined(OUTER_APP)
		if ((rxi == CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS1) || (rxi == CAN_CONFIG_MSG_MAIN_OBJ_RX_SYS2))
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d002      	beq.n	8005c1e <can_sync_handler_rx+0xe6>
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d114      	bne.n	8005c48 <can_sync_handler_rx+0x110>
			// handling of system message
#ifdef LI_CAN_SLV_DEBUG_MAIN_SYS_HANDLER_EXTENDED
			LI_CAN_SLV_DEBUG_PRINT(" , md_nr: %d, dlc: %d\n", module_nr, dlc);
#endif // #if LI_CAN_SLV_DEBUG_MAIN_SYS_HANDLER_EXTENDED

			err = can_sys_msg_rx(module_nr, dlc, data);
 8005c1e:	8bfb      	ldrh	r3, [r7, #30]
 8005c20:	7b7a      	ldrb	r2, [r7, #13]
 8005c22:	b291      	uxth	r1, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f866 	bl	8005cf8 <can_sys_msg_rx>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	84fb      	strh	r3, [r7, #38]	; 0x26

#ifdef LI_CAN_SLV_SYS_MODULE_ERROR
			if (err != LI_CAN_SLV_ERR_OK)
 8005c30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <can_sync_handler_rx+0x110>
			{
#ifdef LI_CAN_SLV_BOOT
				error_syserr_send(err, ERR_LVL_INFO, can_config_get_module_nr(), ERR_LVL_INFO);
#endif // #ifdef LI_CAN_SLV_BOOT
#if defined(OUTER) || defined(OUTER_APP)
				error_syserr_send(err, ERR_LVL_INFO, can_config_get_module_nr_main(), ERR_LVL_INFO);
 8005c36:	f7fe fda5 	bl	8004784 <can_config_get_module_nr_main>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8005c40:	2304      	movs	r3, #4
 8005c42:	2104      	movs	r1, #4
 8005c44:	f7ff fbca 	bl	80053dc <error_syserr_send>
	// process partly filled async tx data objects for a timed sending
	can_async_tunnel_process_tx_data();
#endif // #if defined(LI_CAN_SLV_ASYNC_TUNNEL)
#endif // #ifdef LI_CAN_SLV_ASYNC
#endif // #if defined(OUTER) || defined(OUTER_APP)
	return 0;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	372c      	adds	r7, #44	; 0x2c
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd90      	pop	{r4, r7, pc}
 8005c52:	bf00      	nop
 8005c54:	200005bc 	.word	0x200005bc

08005c58 <can_sync_handler_tx>:
#endif // #if defined (LI_CAN_SLV_SYNC) || defined (LI_CAN_SLV_BOOT)

#if defined (LI_CAN_SLV_SYNC)
uint8_t can_sync_handler_tx(uint16_t msg_obj, uint8_t dlc, uint16_t canid)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	80fb      	strh	r3, [r7, #6]
 8005c62:	460b      	mov	r3, r1
 8005c64:	717b      	strb	r3, [r7, #5]
 8005c66:	4613      	mov	r3, r2
 8005c68:	807b      	strh	r3, [r7, #2]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	82fb      	strh	r3, [r7, #22]
	uint16_t table_pos;
	uint16_t obj;
#endif // #if defined(OUTER) || defined(OUTER_APP)

	(void)dlc;
	rxi = msg_obj;
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	613b      	str	r3, [r7, #16]
#ifndef LI_CAN_SLV_BOOT
	txi = rxi;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	60fb      	str	r3, [r7, #12]

	//	if ((((1L << rxi) | (1L << txi)) & can_main_objs_mask) != 0)
	//	{
#if defined(OUTER) || defined(OUTER_APP)
	// sync tx objects
	if ((1L << txi) & can_main_isr_inp_mask_tx)
 8005c76:	2201      	movs	r2, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <can_sync_handler_tx+0x78>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01c      	beq.n	8005cc4 <can_sync_handler_tx+0x6c>
	{
		err = can_main_synchron_tx((1L << txi), &msg_obj, &table_pos);
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	4618      	mov	r0, r3
 8005c94:	f107 0208 	add.w	r2, r7, #8
 8005c98:	1dbb      	adds	r3, r7, #6
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f7ff ff0e 	bl	8005abc <can_main_synchron_tx>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	82fb      	strh	r3, [r7, #22]

#ifdef LI_CAN_SLV_DEBUG_SYNC_TX_EXTENDED
		LI_CAN_SLV_DEBUG_PRINT(" msg_obj: %d, table_pos: %d,", msg_obj, table_pos);
		LI_CAN_SLV_DEBUG_PRINT(" err: %04x,", err);
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_TX_EXTENDED
		if (err == LI_CAN_SLV_ERR_OK)
 8005ca4:	8afb      	ldrh	r3, [r7, #22]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <can_sync_handler_tx+0x66>
		{
#ifdef CAN_SMP
			can_main_canid = canid;
#endif // #ifdef CAN_SMP
			// calculate obj number from transmitted CAN ID
			obj = canid & CAN_SYNC_OBJ_MASK;
 8005caa:	887b      	ldrh	r3, [r7, #2]
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	817b      	strh	r3, [r7, #10]
#ifdef LI_CAN_SLV_DEBUG_SYNC_TX_EXTENDED
			LI_CAN_SLV_DEBUG_PRINT(" id: %x, obj: %d", canid, obj);
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_TX_EXTENDED
			can_sync_tx_data_main_ok(table_pos, obj);
 8005cb2:	893b      	ldrh	r3, [r7, #8]
 8005cb4:	897a      	ldrh	r2, [r7, #10]
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff fd3d 	bl	8005738 <can_sync_tx_data_main_ok>
		}
#endif // #ifdef LI_CAN_SLV_DEBUG_SYNC_TX_EXTENDED

#if defined(OUTER) || defined(OUTER_APP) || defined(CAN_MAIN_SYSTEM_MSG_TX_QUEUE) || defined(CAN_ASYNC_CTRL_TX_QUEUE)
		// request to the CAN tx task
		can_main_handler_tx(197);
 8005cbe:	20c5      	movs	r0, #197	; 0xc5
 8005cc0:	f7ff fb6e 	bl	80053a0 <can_main_handler_tx>
#endif // #if defined(OUTER) || defined(OUTER_APP) || defined(CAN_MAIN_SYSTEM_MSG_TX_QUEUE) || defined(CAN_ASYNC_CTRL_TX_QUEUE)
	}
#endif // #if defined(OUTER) || defined(OUTER_APP)
	//	}
	return 0;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200005c0 	.word	0x200005c0

08005cd4 <can_sys_init>:
/**
 * @brief: io_can_sys_init initialize function
 * @return
 */
li_can_slv_errorcode_t can_sys_init(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
	can_sys_first_status_detect = 0;
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <can_sys_init+0x1c>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	801a      	strh	r2, [r3, #0]
	li_can_slv_sys_first_status_request_cbk = NULL;
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <can_sys_init+0x20>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
	return (LI_CAN_SLV_ERR_OK);
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	200006f8 	.word	0x200006f8
 8005cf4:	200006fc 	.word	0x200006fc

08005cf8 <can_sys_msg_rx>:
 * \param dlc data length code of the system message (dlc must be 8)
 * \param[in] src source pointer of the data registers
 * \return li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
li_can_slv_errorcode_t can_sys_msg_rx(li_can_slv_module_nr_t module_nr, uint16_t dlc, byte_t const *src)
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b08d      	sub	sp, #52	; 0x34
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	4603      	mov	r3, r0
 8005d00:	603a      	str	r2, [r7, #0]
 8005d02:	80fb      	strh	r3, [r7, #6]
 8005d04:	460b      	mov	r3, r1
 8005d06:	80bb      	strh	r3, [r7, #4]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	84fb      	strh	r3, [r7, #38]	; 0x26
	can_config_bdr_t baudrate;
#ifndef LI_CAN_SLV_BOOT
	uint16_t table_pos;
#endif // #ifndef LI_CAN_SLV_BOOT
	uint8_t message_is_broadcast = FALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t module_found = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	837b      	strh	r3, [r7, #26]
	uint32_t serial_nr;
	li_can_slv_module_nr_t new_module_nr;
#endif // #ifdef LI_CAN_SLV_SYS_CHANGE_MODULE_NR
	can_config_module_silent_t module_silent_awake;
#ifndef LI_CAN_SLV_BOOT
	uint16_t nr_of_modules = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	82fb      	strh	r3, [r7, #22]

#ifdef LI_CAN_SLV_DEBUG_MAIN_SYS_HANDLER_EXTENDED
	LI_CAN_SLV_DEBUG_PRINT("\n\ncan_sys_msg_rx");
#endif // #ifdef LI_CAN_SLV_DEBUG_MAIN_SYS_HANDLER_EXTENDED

	if (dlc != CAN_CONFIG_SYS_MSG_DLC)
 8005d1a:	88bb      	ldrh	r3, [r7, #4]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d002      	beq.n	8005d26 <can_sys_msg_rx+0x2e>
	{
		return (ERR_MSG_CAN_INVALID_SYS_MSG_DLC);
 8005d20:	f245 033b 	movw	r3, #20539	; 0x503b
 8005d24:	e15b      	b.n	8005fde <can_sys_msg_rx+0x2e6>
	else
	{
		message_is_broadcast = TRUE;
	}
#else // #ifdef LI_CAN_SLV_BOOT
	if (module_nr != CAN_CONFIG_MODULE_NR_BROADCAST)
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d012      	beq.n	8005d52 <can_sys_msg_rx+0x5a>
	{
		message_is_broadcast = FALSE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		/* find module position in configuration table */
		err = can_config_module_nr_valid(module_nr, &table_pos, &module_silent_awake, &module_found);
 8005d32:	88f8      	ldrh	r0, [r7, #6]
 8005d34:	f107 031a 	add.w	r3, r7, #26
 8005d38:	f107 0219 	add.w	r2, r7, #25
 8005d3c:	f107 011c 	add.w	r1, r7, #28
 8005d40:	f7fe fc9a 	bl	8004678 <can_config_module_nr_valid>
 8005d44:	4603      	mov	r3, r0
 8005d46:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (!module_found)
 8005d48:	8b7b      	ldrh	r3, [r7, #26]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10f      	bne.n	8005d6e <can_sys_msg_rx+0x76>
		{
			/**
			 * @todo check for next version if we should report an error here
			 */
			/* if the module is not found we ignore this message */
			return LI_CAN_SLV_ERR_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e145      	b.n	8005fde <can_sys_msg_rx+0x2e6>
		}
	}
	else
	{
		message_is_broadcast = TRUE;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		can_config_get_nr_of_modules(&nr_of_modules);
 8005d58:	f107 0316 	add.w	r3, r7, #22
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe fd1d 	bl	800479c <can_config_get_nr_of_modules>
		if (nr_of_modules == 0)
 8005d62:	8afb      	ldrh	r3, [r7, #22]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <can_sys_msg_rx+0x76>
		{
			return (ERR_MSG_CAN_CONFIG_MODULE_NOT_FOUND);
 8005d68:	f245 035b 	movw	r3, #20571	; 0x505b
 8005d6c:	e137      	b.n	8005fde <can_sys_msg_rx+0x2e6>
		}
	}
#endif // #ifdef LI_CAN_SLV_BOOT
	switch (src[0])
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	2b2f      	cmp	r3, #47	; 0x2f
 8005d76:	f200 812d 	bhi.w	8005fd4 <can_sys_msg_rx+0x2dc>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <can_sys_msg_rx+0x88>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005e41 	.word	0x08005e41
 8005d84:	08005ee7 	.word	0x08005ee7
 8005d88:	08005f35 	.word	0x08005f35
 8005d8c:	08005fd5 	.word	0x08005fd5
 8005d90:	08005f39 	.word	0x08005f39
 8005d94:	08005fd5 	.word	0x08005fd5
 8005d98:	08005f7d 	.word	0x08005f7d
 8005d9c:	08005f81 	.word	0x08005f81
 8005da0:	08005fd5 	.word	0x08005fd5
 8005da4:	08005f85 	.word	0x08005f85
 8005da8:	08005f89 	.word	0x08005f89
 8005dac:	08005fd5 	.word	0x08005fd5
 8005db0:	08005fd5 	.word	0x08005fd5
 8005db4:	08005fd5 	.word	0x08005fd5
 8005db8:	08005fd5 	.word	0x08005fd5
 8005dbc:	08005fd5 	.word	0x08005fd5
 8005dc0:	08005fd5 	.word	0x08005fd5
 8005dc4:	08005fd5 	.word	0x08005fd5
 8005dc8:	08005fd5 	.word	0x08005fd5
 8005dcc:	08005fd5 	.word	0x08005fd5
 8005dd0:	08005fd5 	.word	0x08005fd5
 8005dd4:	08005fd5 	.word	0x08005fd5
 8005dd8:	08005fd5 	.word	0x08005fd5
 8005ddc:	08005fd5 	.word	0x08005fd5
 8005de0:	08005fd5 	.word	0x08005fd5
 8005de4:	08005fd5 	.word	0x08005fd5
 8005de8:	08005fd5 	.word	0x08005fd5
 8005dec:	08005fd5 	.word	0x08005fd5
 8005df0:	08005fd5 	.word	0x08005fd5
 8005df4:	08005fd5 	.word	0x08005fd5
 8005df8:	08005fd5 	.word	0x08005fd5
 8005dfc:	08005fd5 	.word	0x08005fd5
 8005e00:	08005f8d 	.word	0x08005f8d
 8005e04:	08005fad 	.word	0x08005fad
 8005e08:	08005fd1 	.word	0x08005fd1
 8005e0c:	08005fd5 	.word	0x08005fd5
 8005e10:	08005fd5 	.word	0x08005fd5
 8005e14:	08005fd5 	.word	0x08005fd5
 8005e18:	08005fd5 	.word	0x08005fd5
 8005e1c:	08005fd5 	.word	0x08005fd5
 8005e20:	08005fd5 	.word	0x08005fd5
 8005e24:	08005fd5 	.word	0x08005fd5
 8005e28:	08005fd5 	.word	0x08005fd5
 8005e2c:	08005fd5 	.word	0x08005fd5
 8005e30:	08005fd5 	.word	0x08005fd5
 8005e34:	08005fd5 	.word	0x08005fd5
 8005e38:	08005fd5 	.word	0x08005fd5
 8005e3c:	08005fcd 	.word	0x08005fcd
	{
		case CAN_SYS_M2S_STATUS_REQUEST:
			if (can_sys_first_status_detect == 0)
 8005e40:	4b69      	ldr	r3, [pc, #420]	; (8005fe8 <can_sys_msg_rx+0x2f0>)
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d109      	bne.n	8005e5c <can_sys_msg_rx+0x164>
			{
				can_sys_first_status_detect = 1;
 8005e48:	4b67      	ldr	r3, [pc, #412]	; (8005fe8 <can_sys_msg_rx+0x2f0>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	801a      	strh	r2, [r3, #0]
				if (NULL != li_can_slv_sys_first_status_request_cbk)
 8005e4e:	4b67      	ldr	r3, [pc, #412]	; (8005fec <can_sys_msg_rx+0x2f4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <can_sys_msg_rx+0x164>
				{
					li_can_slv_sys_first_status_request_cbk();
 8005e56:	4b65      	ldr	r3, [pc, #404]	; (8005fec <can_sys_msg_rx+0x2f4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4798      	blx	r3
			for (i = 0; i < modhw_info.status_ackn_delay_nops; i++)
			{
				NOP();
			}
#endif // #ifdef CAN_RANDOM_STATUS_ACKNOWLEDGE
			if (message_is_broadcast)
 8005e5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d016      	beq.n	8005e92 <can_sys_msg_rx+0x19a>
			{
				for (table_pos = 0; table_pos < nr_of_modules; table_pos++)
 8005e64:	2300      	movs	r3, #0
 8005e66:	83bb      	strh	r3, [r7, #28]
 8005e68:	e00e      	b.n	8005e88 <can_sys_msg_rx+0x190>
				{
					err = can_sys_status_ackn(table_pos);
 8005e6a:	8bbb      	ldrh	r3, [r7, #28]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f8f9 	bl	8006064 <can_sys_status_ackn>
 8005e72:	4603      	mov	r3, r0
 8005e74:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (err != LI_CAN_SLV_ERR_OK)
 8005e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <can_sys_msg_rx+0x188>
					{
						return (err);
 8005e7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e7e:	e0ae      	b.n	8005fde <can_sys_msg_rx+0x2e6>
				for (table_pos = 0; table_pos < nr_of_modules; table_pos++)
 8005e80:	8bbb      	ldrh	r3, [r7, #28]
 8005e82:	3301      	adds	r3, #1
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	83bb      	strh	r3, [r7, #28]
 8005e88:	8bba      	ldrh	r2, [r7, #28]
 8005e8a:	8afb      	ldrh	r3, [r7, #22]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d3ec      	bcc.n	8005e6a <can_sys_msg_rx+0x172>
 8005e90:	e023      	b.n	8005eda <can_sys_msg_rx+0x1e2>
					}
				}
			}
			else
			{
				err = can_sys_status_ackn(table_pos);
 8005e92:	8bbb      	ldrh	r3, [r7, #28]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f8e5 	bl	8006064 <can_sys_status_ackn>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
#ifdef LI_CAN_SLV_SYS_MODULE_ERROR
			/*--------------------------------------------------------------*/
			/* send system errors if valid                                  */
			/*--------------------------------------------------------------*/
			while (error_syserr_num() != 0)
 8005e9e:	e01c      	b.n	8005eda <can_sys_msg_rx+0x1e2>
			{
				err = error_syserr_get_full(&errnum, &add_info, &priority, &group_subgroup, &module_nr);
 8005ea0:	f107 040d 	add.w	r4, r7, #13
 8005ea4:	f107 020f 	add.w	r2, r7, #15
 8005ea8:	f107 010e 	add.w	r1, r7, #14
 8005eac:	f107 0010 	add.w	r0, r7, #16
 8005eb0:	1dbb      	adds	r3, r7, #6
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4623      	mov	r3, r4
 8005eb6:	f7ff fb05 	bl	80054c4 <error_syserr_get_full>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (err == LI_CAN_SLV_ERR_OK)
 8005ebe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <can_sys_msg_rx+0x1e2>
				{
					err = can_sys_send_error_full(module_nr, errnum, add_info, priority, group_subgroup);
 8005ec4:	88f8      	ldrh	r0, [r7, #6]
 8005ec6:	6939      	ldr	r1, [r7, #16]
 8005ec8:	7bba      	ldrb	r2, [r7, #14]
 8005eca:	7bfc      	ldrb	r4, [r7, #15]
 8005ecc:	7b7b      	ldrb	r3, [r7, #13]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4623      	mov	r3, r4
 8005ed2:	f000 f88d 	bl	8005ff0 <can_sys_send_error_full>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
			while (error_syserr_num() != 0)
 8005eda:	f7ff fb25 	bl	8005528 <error_syserr_num>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1dd      	bne.n	8005ea0 <can_sys_msg_rx+0x1a8>
				}
			}
#endif // #ifdef LI_CAN_SLV_SYS_MODULE_ERROR
#endif // #ifdef LI_CAN_SLV_BOOT
			break;
 8005ee4:	e07a      	b.n	8005fdc <can_sys_msg_rx+0x2e4>

		case CAN_SYS_M2S_CHANGE_CAN_BAUDRATE:
			if (message_is_broadcast == FALSE)
 8005ee6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <can_sys_msg_rx+0x1fc>
			{
				return ERR_MSG_CAN_SYSTEM_MSG_NOT_ALLOWED_DIRECT;
 8005eee:	f245 0375 	movw	r3, #20597	; 0x5075
 8005ef2:	e074      	b.n	8005fde <can_sys_msg_rx+0x2e6>
			}
			baudrate = (src[1] << 8) + src[2];
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	3302      	adds	r3, #2
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	4413      	add	r3, r2
 8005f0a:	83fb      	strh	r3, [r7, #30]
#endif // #ifdef LI_CAN_SLV_DEBUG_SYS_CHANGE_CAN_BAUDRATE

			/**
			 * @todo remove that or add a define, this is used for STM32
			 */
			for (i = 0; i <= 100; i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	e006      	b.n	8005f20 <can_sys_msg_rx+0x228>
			{
				can_port_nop();
 8005f12:	bf00      	nop
				can_port_nop();
 8005f14:	bf00      	nop
				can_port_nop();
 8005f16:	bf00      	nop
				can_port_nop();
 8005f18:	bf00      	nop
			for (i = 0; i <= 100; i++)
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	623b      	str	r3, [r7, #32]
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b64      	cmp	r3, #100	; 0x64
 8005f24:	d9f5      	bls.n	8005f12 <can_sys_msg_rx+0x21a>
			}
			err = can_config_set_baudrate(baudrate);
 8005f26:	8bfb      	ldrh	r3, [r7, #30]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe f92f 	bl	800418c <can_config_set_baudrate>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8005f32:	e053      	b.n	8005fdc <can_sys_msg_rx+0x2e4>
		case CAN_SYS_M2S_SYSTEM_ERROR_RX:
			/**
			 * @todo check if implementation is needed and
			 * if ERR_MSG_CAN_SYSTEM_MSG_NOT_IMPLEMENTED could be used
			 */
			return LI_CAN_SLV_ERR_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e052      	b.n	8005fde <can_sys_msg_rx+0x2e6>

		case CAN_SYS_M2S_VERSION_REQUEST:
#ifdef LI_CAN_SLV_BOOT
			err = can_sys_version_ackn();
#else // #ifdef LI_CAN_SLV_BOOT
			if (message_is_broadcast)
 8005f38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d016      	beq.n	8005f6e <can_sys_msg_rx+0x276>
			{
				/* broadcast message */
				for (table_pos = 0; table_pos < nr_of_modules; table_pos++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	83bb      	strh	r3, [r7, #28]
 8005f44:	e00e      	b.n	8005f64 <can_sys_msg_rx+0x26c>
				{
					err = can_sys_version_ackn(table_pos);
 8005f46:	8bbb      	ldrh	r3, [r7, #28]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f8ef 	bl	800612c <can_sys_version_ackn>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (err != LI_CAN_SLV_ERR_OK)
 8005f52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <can_sys_msg_rx+0x264>
					{
						return (err);
 8005f58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f5a:	e040      	b.n	8005fde <can_sys_msg_rx+0x2e6>
				for (table_pos = 0; table_pos < nr_of_modules; table_pos++)
 8005f5c:	8bbb      	ldrh	r3, [r7, #28]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	83bb      	strh	r3, [r7, #28]
 8005f64:	8bba      	ldrh	r2, [r7, #28]
 8005f66:	8afb      	ldrh	r3, [r7, #22]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3ec      	bcc.n	8005f46 <can_sys_msg_rx+0x24e>
			else
			{
				err = can_sys_version_ackn(table_pos);
			}
#endif // #ifdef LI_CAN_SLV_BOOT
			break;
 8005f6c:	e036      	b.n	8005fdc <can_sys_msg_rx+0x2e4>
				err = can_sys_version_ackn(table_pos);
 8005f6e:	8bbb      	ldrh	r3, [r7, #28]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f8db 	bl	800612c <can_sys_version_ackn>
 8005f76:	4603      	mov	r3, r0
 8005f78:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8005f7a:	e02f      	b.n	8005fdc <can_sys_msg_rx+0x2e4>
		case CAN_SYS_M2S_CURRENT_SYSTEM_TIME:
			/**
			 * @todo check if implementation is needed and
			 * if ERR_MSG_CAN_SYSTEM_MSG_NOT_IMPLEMENTED could be used
			 */
			return LI_CAN_SLV_ERR_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e02e      	b.n	8005fde <can_sys_msg_rx+0x2e6>
		case CAN_SYS_M2S_PROCESS_CONFIGURATION:
			/**
			 * @todo check if implementation is needed and
			 * if ERR_MSG_CAN_SYSTEM_MSG_NOT_IMPLEMENTED could be used
			 */
			return LI_CAN_SLV_ERR_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e02c      	b.n	8005fde <can_sys_msg_rx+0x2e6>
		case CAN_SYS_M2S_HARDWARE_VERSION_REQUEST:
			/**
			 * @todo check if implementation is needed and
			 * if ERR_MSG_CAN_SYSTEM_MSG_NOT_IMPLEMENTED could be used
			 */
			return LI_CAN_SLV_ERR_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e02a      	b.n	8005fde <can_sys_msg_rx+0x2e6>
		case CAN_SYS_M2S_RX_RATE:
			/**
			 * @todo check if implementation is needed and
			 * if ERR_MSG_CAN_SYSTEM_MSG_NOT_IMPLEMENTED could be used
			 */
			return LI_CAN_SLV_ERR_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e028      	b.n	8005fde <can_sys_msg_rx+0x2e6>
#endif // #ifdef LI_CAN_SLV_BOOT
			}
			break;
#endif // #ifdef LI_CAN_SLV_SYS_CHANGE_MODULE_NR
		case CAN_SYS_M2S_STAY_SILENT:
			if (message_is_broadcast)
 8005f8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <can_sys_msg_rx+0x2a2>
			{
				return ERR_MSG_CAN_SYSTEM_MSG_NOT_ALLOWED_BROADCAST;
 8005f94:	f245 036c 	movw	r3, #20588	; 0x506c
 8005f98:	e021      	b.n	8005fde <can_sys_msg_rx+0x2e6>
			}
			err = can_sys_set_silent_awake(src, module_nr, LI_CAN_SLV_CONFIG_MODULE_STATE_SILENT);
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6838      	ldr	r0, [r7, #0]
 8005fa2:	f000 f96b 	bl	800627c <can_sys_set_silent_awake>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8005faa:	e017      	b.n	8005fdc <can_sys_msg_rx+0x2e4>

		case CAN_SYS_M2S_AWAKE:
			if (message_is_broadcast)
 8005fac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <can_sys_msg_rx+0x2c2>
			{
				return ERR_MSG_CAN_SYSTEM_MSG_NOT_ALLOWED_BROADCAST;
 8005fb4:	f245 036c 	movw	r3, #20588	; 0x506c
 8005fb8:	e011      	b.n	8005fde <can_sys_msg_rx+0x2e6>
			}
			err = can_sys_set_silent_awake(src, module_nr, LI_CAN_SLV_CONFIG_MODULE_STATE_AWAKE);
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6838      	ldr	r0, [r7, #0]
 8005fc2:	f000 f95b 	bl	800627c <can_sys_set_silent_awake>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8005fca:	e007      	b.n	8005fdc <can_sys_msg_rx+0x2e4>
			if (NULL != li_can_slv_factory_reset_cbk)
			{
				li_can_slv_factory_reset_cbk(src[1]);
			}
#else
			return LI_CAN_SLV_ERR_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e006      	b.n	8005fde <can_sys_msg_rx+0x2e6>
		case CAN_SYS_M2S_SHOW_MODULE_IDENTIFICATION:
			/**
			 * @todo check if implementation is needed and
			 * if ERR_MSG_CAN_SYSTEM_MSG_NOT_IMPLEMENTED could be used
			 */
			return LI_CAN_SLV_ERR_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e004      	b.n	8005fde <can_sys_msg_rx+0x2e6>

		default:
			/*--------------------------------------------------------------*/
			/* unknown system command										*/
			/*--------------------------------------------------------------*/
			err = ERR_MSG_CAN_SYS_UNKNOWN_COMMAND;
 8005fd4:	f245 0365 	movw	r3, #20581	; 0x5065
 8005fd8:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8005fda:	bf00      	nop
	}
	return (err);
 8005fdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	372c      	adds	r7, #44	; 0x2c
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200006f8 	.word	0x200006f8
 8005fec:	200006fc 	.word	0x200006fc

08005ff0 <can_sys_send_error_full>:

#ifdef LI_CAN_SLV_SYS_MODULE_ERROR
li_can_slv_errorcode_t can_sys_send_error_full(li_can_slv_module_nr_t module_nr, msg_code_t errnum, byte_t add_info, err_prio_t priority, byte_t group_subgroup)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6039      	str	r1, [r7, #0]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	80fb      	strh	r3, [r7, #6]
 8006000:	460b      	mov	r3, r1
 8006002:	717b      	strb	r3, [r7, #5]
 8006004:	4613      	mov	r3, r2
 8006006:	713b      	strb	r3, [r7, #4]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	82fb      	strh	r3, [r7, #22]

#ifdef LI_CAN_SLV_MAIN_MON
	if (can_mainmon_type == CAN_MAINMON_TYPE_MAIN)
	{
#endif // #ifdef LI_CAN_SLV_MAIN_MON
		data[0] = CAN_SYS_S2M_MODULE_ERROR;
 800600c:	2303      	movs	r3, #3
 800600e:	733b      	strb	r3, [r7, #12]
		// adopt error code to match global (external) error code system
		// errnum = MSG_SG_EXPAND(errnum) | (group_subgroup >> 4);
		data[1] = (byte_t)(errnum >> 24);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	0e1b      	lsrs	r3, r3, #24
 8006014:	b2db      	uxtb	r3, r3
 8006016:	737b      	strb	r3, [r7, #13]
		data[2] = (byte_t)(errnum >> 16);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	0c1b      	lsrs	r3, r3, #16
 800601c:	b2db      	uxtb	r3, r3
 800601e:	73bb      	strb	r3, [r7, #14]
		data[3] = (byte_t)(errnum >> 8);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	b2db      	uxtb	r3, r3
 8006026:	73fb      	strb	r3, [r7, #15]
		data[4] = (byte_t)(errnum);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	743b      	strb	r3, [r7, #16]
		data[5] = add_info;
 800602e:	797b      	ldrb	r3, [r7, #5]
 8006030:	747b      	strb	r3, [r7, #17]
		/* priority */
		data[6] = (byte_t)(priority);
 8006032:	793b      	ldrb	r3, [r7, #4]
 8006034:	74bb      	strb	r3, [r7, #18]
		/* group/subgroup information */
		data[7] = (byte_t)(group_subgroup);
 8006036:	f897 3020 	ldrb.w	r3, [r7, #32]
 800603a:	74fb      	strb	r3, [r7, #19]

		err = can_main_send_queue_system_tx(module_nr, &data[0]);
 800603c:	f107 020c 	add.w	r2, r7, #12
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff f847 	bl	80050d8 <can_main_send_queue_system_tx>
 800604a:	4603      	mov	r3, r0
 800604c:	82fb      	strh	r3, [r7, #22]
		if (err != LI_CAN_SLV_ERR_OK)
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <can_sys_send_error_full+0x68>
		{
			return (err);
 8006054:	8afb      	ldrh	r3, [r7, #22]
 8006056:	e000      	b.n	800605a <can_sys_send_error_full+0x6a>
		}
#ifdef LI_CAN_SLV_MAIN_MON
	}
#endif // #ifdef LI_CAN_SLV_MAIN_MON
	return (LI_CAN_SLV_ERR_OK);
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <can_sys_status_ackn>:
 * @brief send system message status acknowledge
 * @param table_pos	position of module in the config_module table
 * @return li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
static li_can_slv_errorcode_t can_sys_status_ackn(uint16_t table_pos)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	80fb      	strh	r3, [r7, #6]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	83fb      	strh	r3, [r7, #30]
	char_t module_type[CAN_CONFIG_TYPE_STRING_LENGTH];
	li_can_slv_module_nr_t module_nr;
	uint32_t serial_number;
	li_can_slv_mode_t mode;

	mode = li_can_slv_get_mode();
 8006072:	f7fe fef1 	bl	8004e58 <li_can_slv_get_mode>
 8006076:	4603      	mov	r3, r0
 8006078:	777b      	strb	r3, [r7, #29]
	if (LI_CAN_SLV_MODE_LISTEN_ONLY == mode)
 800607a:	7f7b      	ldrb	r3, [r7, #29]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d101      	bne.n	8006084 <can_sys_status_ackn+0x20>
	{
		return LI_CAN_SLV_ERR_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e025      	b.n	80060d0 <can_sys_status_ackn+0x6c>
	{
		return (LI_CAN_SLV_ERR_OK);
	}
#endif // #ifdef LI_CAN_SLV_MAIN_MON

	err = can_config_get_module_type(table_pos, module_type);
 8006084:	f107 0210 	add.w	r2, r7, #16
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fb39 	bl	8004704 <can_config_get_module_type>
 8006092:	4603      	mov	r3, r0
 8006094:	83fb      	strh	r3, [r7, #30]
	if (err != LI_CAN_SLV_ERR_OK)
 8006096:	8bfb      	ldrh	r3, [r7, #30]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <can_sys_status_ackn+0x3c>
	{
		return (err);
 800609c:	8bfb      	ldrh	r3, [r7, #30]
 800609e:	e017      	b.n	80060d0 <can_sys_status_ackn+0x6c>
	}

	err = can_config_get_module_nr(table_pos, &module_nr);
 80060a0:	f107 020e 	add.w	r2, r7, #14
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	4611      	mov	r1, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe fb4b 	bl	8004744 <can_config_get_module_nr>
 80060ae:	4603      	mov	r3, r0
 80060b0:	83fb      	strh	r3, [r7, #30]
	if (err != LI_CAN_SLV_ERR_OK)
 80060b2:	8bfb      	ldrh	r3, [r7, #30]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <can_sys_status_ackn+0x58>
	{
		return (err);
 80060b8:	8bfb      	ldrh	r3, [r7, #30]
 80060ba:	e009      	b.n	80060d0 <can_sys_status_ackn+0x6c>
	}

	serial_number = can_port_get_serialnumber();
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <can_sys_status_ackn+0x74>)
 80060be:	61bb      	str	r3, [r7, #24]

	return (can_sys_status_ackn_send(module_nr, module_type, serial_number));
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	f107 0110 	add.w	r1, r7, #16
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f807 	bl	80060dc <can_sys_status_ackn_send>
 80060ce:	4603      	mov	r3, r0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	0098967f 	.word	0x0098967f

080060dc <can_sys_status_ackn_send>:
#endif // #ifdef LI_CAN_SLV_BOOT

CAN_PORT_STATIC_INLINE li_can_slv_errorcode_t can_sys_status_ackn_send(li_can_slv_module_nr_t module_nr, char_t *module_type, uint32_t serial_number)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	81fb      	strh	r3, [r7, #14]
	byte_t data[CAN_CONFIG_SYS_MSG_DLC];

	data[0] = CAN_SYS_S2M_STATUS_AKNOWLEDGE;
 80060ea:	2304      	movs	r3, #4
 80060ec:	743b      	strb	r3, [r7, #16]
	can_port_string_n_cpy((char_t *)&data[1], module_type, (CAN_CONFIG_TYPE_STRING_LENGTH - 1)); // module type
 80060ee:	f107 0310 	add.w	r3, r7, #16
 80060f2:	3301      	adds	r3, #1
 80060f4:	2204      	movs	r2, #4
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 f983 	bl	8006404 <strncpy>
	data[5] = (byte_t)(serial_number >> 16); // mmsb serial number
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	b2db      	uxtb	r3, r3
 8006104:	757b      	strb	r3, [r7, #21]
	data[6] = (byte_t)(serial_number >> 8); // msb serial number
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	b2db      	uxtb	r3, r3
 800610c:	75bb      	strb	r3, [r7, #22]
	data[7] = (byte_t)(serial_number); // lsb serial number
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	75fb      	strb	r3, [r7, #23]

	return (can_main_send_queue_system_tx(module_nr, data));
 8006114:	f107 0210 	add.w	r2, r7, #16
 8006118:	89fb      	ldrh	r3, [r7, #14]
 800611a:	4611      	mov	r1, r2
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe ffdb 	bl	80050d8 <can_main_send_queue_system_tx>
 8006122:	4603      	mov	r3, r0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <can_sys_version_ackn>:
 * \brief send system message version acknowledge
 * \param table_pos table position of the module number
 * \return li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
static li_can_slv_errorcode_t can_sys_version_ackn(uint16_t table_pos)
{
 800612c:	b590      	push	{r4, r7, lr}
 800612e:	b089      	sub	sp, #36	; 0x24
 8006130:	af02      	add	r7, sp, #8
 8006132:	4603      	mov	r3, r0
 8006134:	80fb      	strh	r3, [r7, #6]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	82fb      	strh	r3, [r7, #22]
	uint16_t bootkernel_version_minor;
	uint8_t modulsoftware_version_major;
	uint16_t modulsoftware_version_minor;
	li_can_slv_mode_t mode;

	mode = li_can_slv_get_mode();
 800613a:	f7fe fe8d 	bl	8004e58 <li_can_slv_get_mode>
 800613e:	4603      	mov	r3, r0
 8006140:	757b      	strb	r3, [r7, #21]
	if (LI_CAN_SLV_MODE_LISTEN_ONLY == mode)
 8006142:	7d7b      	ldrb	r3, [r7, #21]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d101      	bne.n	800614c <can_sys_version_ackn+0x20>
	{
		return LI_CAN_SLV_ERR_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e02c      	b.n	80061a6 <can_sys_version_ackn+0x7a>
	if (can_mainmon_type == CAN_MAINMON_TYPE_MON)
	{
		return (LI_CAN_SLV_ERR_OK);
	}
#endif // #ifdef LI_CAN_SLV_MAIN_MON
	err = can_config_get_module_nr(table_pos, &module_nr);
 800614c:	f107 020c 	add.w	r2, r7, #12
 8006150:	88fb      	ldrh	r3, [r7, #6]
 8006152:	4611      	mov	r1, r2
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe faf5 	bl	8004744 <can_config_get_module_nr>
 800615a:	4603      	mov	r3, r0
 800615c:	82fb      	strh	r3, [r7, #22]
	if (err != LI_CAN_SLV_ERR_OK)
 800615e:	8afb      	ldrh	r3, [r7, #22]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <can_sys_version_ackn+0x3c>
	{
		return (err);
 8006164:	8afb      	ldrh	r3, [r7, #22]
 8006166:	e01e      	b.n	80061a6 <can_sys_version_ackn+0x7a>
	}

	// version answer 1
	bootkernel_version_major = (uint8_t) can_port_get_boot_kernel_version_major();
 8006168:	2309      	movs	r3, #9
 800616a:	753b      	strb	r3, [r7, #20]
	bootkernel_version_minor = (uint16_t) can_port_get_boot_kernel_version_minor();
 800616c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8006170:	827b      	strh	r3, [r7, #18]
	modulsoftware_version_major = (uint8_t) can_port_get_modul_software_version_major();
 8006172:	2309      	movs	r3, #9
 8006174:	747b      	strb	r3, [r7, #17]
	modulsoftware_version_minor = (uint16_t) can_port_get_modul_software_version_minor();
 8006176:	f240 33e7 	movw	r3, #999	; 0x3e7
 800617a:	81fb      	strh	r3, [r7, #14]

	err = can_sys_version_ackn_send_version1(module_nr, bootkernel_version_major, bootkernel_version_minor, modulsoftware_version_major, modulsoftware_version_minor);
 800617c:	89b8      	ldrh	r0, [r7, #12]
 800617e:	7c7c      	ldrb	r4, [r7, #17]
 8006180:	8a7a      	ldrh	r2, [r7, #18]
 8006182:	7d39      	ldrb	r1, [r7, #20]
 8006184:	89fb      	ldrh	r3, [r7, #14]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	4623      	mov	r3, r4
 800618a:	f000 f810 	bl	80061ae <can_sys_version_ackn_send_version1>
 800618e:	4603      	mov	r3, r0
 8006190:	82fb      	strh	r3, [r7, #22]
	if (err != LI_CAN_SLV_ERR_OK)
 8006192:	8afb      	ldrh	r3, [r7, #22]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <can_sys_version_ackn+0x70>
	{
		return (err);
 8006198:	8afb      	ldrh	r3, [r7, #22]
 800619a:	e004      	b.n	80061a6 <can_sys_version_ackn+0x7a>
	}

	// version answer 2
	return (can_sys_version_ackn_send_version2(module_nr));
 800619c:	89bb      	ldrh	r3, [r7, #12]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f838 	bl	8006214 <can_sys_version_ackn_send_version2>
 80061a4:	4603      	mov	r3, r0

}
 80061a6:	4618      	mov	r0, r3
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd90      	pop	{r4, r7, pc}

080061ae <can_sys_version_ackn_send_version1>:
#endif // #ifdef LI_CAN_SLV_BOOT

CAN_PORT_STATIC_INLINE li_can_slv_errorcode_t can_sys_version_ackn_send_version1(li_can_slv_module_nr_t module_nr, uint8_t bootkernel_version_major, uint16_t bootkernel_version_minor, uint8_t modulsoftware_version_major, uint16_t modulsoftware_version_minor)
{
 80061ae:	b590      	push	{r4, r7, lr}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	4604      	mov	r4, r0
 80061b6:	4608      	mov	r0, r1
 80061b8:	4611      	mov	r1, r2
 80061ba:	461a      	mov	r2, r3
 80061bc:	4623      	mov	r3, r4
 80061be:	80fb      	strh	r3, [r7, #6]
 80061c0:	4603      	mov	r3, r0
 80061c2:	717b      	strb	r3, [r7, #5]
 80061c4:	460b      	mov	r3, r1
 80061c6:	807b      	strh	r3, [r7, #2]
 80061c8:	4613      	mov	r3, r2
 80061ca:	713b      	strb	r3, [r7, #4]
	byte_t data[CAN_CONFIG_SYS_MSG_DLC];

	data[0] = CAN_SYS_S2M_VERSION_ACKNOWLEDGE_1;
 80061cc:	2305      	movs	r3, #5
 80061ce:	723b      	strb	r3, [r7, #8]
	data[1] = bootkernel_version_major; // boot kernel major
 80061d0:	797b      	ldrb	r3, [r7, #5]
 80061d2:	727b      	strb	r3, [r7, #9]
	data[2] = (byte_t)((0xFF00 & bootkernel_version_minor) >> 8);  // boot kernel minor MSB
 80061d4:	887b      	ldrh	r3, [r7, #2]
 80061d6:	0a1b      	lsrs	r3, r3, #8
 80061d8:	b29b      	uxth	r3, r3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	72bb      	strb	r3, [r7, #10]
	data[3] = (byte_t)(bootkernel_version_minor);  // boot kernel minor LSB
 80061de:	887b      	ldrh	r3, [r7, #2]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x00; // always zero
 80061e4:	2300      	movs	r3, #0
 80061e6:	733b      	strb	r3, [r7, #12]
	data[5] = modulsoftware_version_major; // module software major
 80061e8:	793b      	ldrb	r3, [r7, #4]
 80061ea:	737b      	strb	r3, [r7, #13]
	data[6] = (byte_t)((0xFF00 & modulsoftware_version_minor) >> 8);  // module software major MSB
 80061ec:	8c3b      	ldrh	r3, [r7, #32]
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	73bb      	strb	r3, [r7, #14]
	data[7] = (byte_t)(modulsoftware_version_minor);  // module software major LSB
 80061f6:	8c3b      	ldrh	r3, [r7, #32]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	73fb      	strb	r3, [r7, #15]

	return (can_main_send_queue_system_tx(module_nr, &data[0]));
 80061fc:	f107 0208 	add.w	r2, r7, #8
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe ff67 	bl	80050d8 <can_main_send_queue_system_tx>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bd90      	pop	{r4, r7, pc}

08006214 <can_sys_version_ackn_send_version2>:

CAN_PORT_STATIC_INLINE li_can_slv_errorcode_t can_sys_version_ackn_send_version2(li_can_slv_module_nr_t module_nr)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	80fb      	strh	r3, [r7, #6]
	byte_t data[CAN_CONFIG_SYS_MSG_DLC];
	uint32_t ident_number;
	uint32_t change_index;

	ident_number = (uint32_t) can_port_get_identnumber();
 800621e:	4b16      	ldr	r3, [pc, #88]	; (8006278 <can_sys_version_ackn_send_version2+0x64>)
 8006220:	617b      	str	r3, [r7, #20]
	change_index = (uint32_t) can_port_get_changeindex();
 8006222:	2309      	movs	r3, #9
 8006224:	613b      	str	r3, [r7, #16]

	data[0] = CAN_SYS_S2M_VERSION_ACKNOWLEDGE_2;
 8006226:	2306      	movs	r3, #6
 8006228:	723b      	strb	r3, [r7, #8]
	data[1] = (byte_t)((ident_number) >> 24U);  // MMSB
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	0e1b      	lsrs	r3, r3, #24
 800622e:	b2db      	uxtb	r3, r3
 8006230:	727b      	strb	r3, [r7, #9]
	data[2] = (byte_t)((ident_number) >> 16U);  // MSB
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	0c1b      	lsrs	r3, r3, #16
 8006236:	b2db      	uxtb	r3, r3
 8006238:	72bb      	strb	r3, [r7, #10]
	data[3] = (byte_t)((ident_number) >> 8U);  // LSB
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	b2db      	uxtb	r3, r3
 8006240:	72fb      	strb	r3, [r7, #11]
	data[4] = (byte_t)(ident_number);  // LLSB
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	733b      	strb	r3, [r7, #12]
	data[5] = (byte_t)((change_index) >> 16);  // MMSB
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	0c1b      	lsrs	r3, r3, #16
 800624c:	b2db      	uxtb	r3, r3
 800624e:	737b      	strb	r3, [r7, #13]
	data[6] = (byte_t)((change_index) >> 8);  // MSB
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	b2db      	uxtb	r3, r3
 8006256:	73bb      	strb	r3, [r7, #14]
	data[7] = (byte_t)(change_index);  // LSB
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	73fb      	strb	r3, [r7, #15]

	return (can_main_send_queue_system_tx(module_nr, &data[0]));
 800625e:	f107 0208 	add.w	r2, r7, #8
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	4611      	mov	r1, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe ff36 	bl	80050d8 <can_main_send_queue_system_tx>
 800626c:	4603      	mov	r3, r0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	05f5e0ff 	.word	0x05f5e0ff

0800627c <can_sys_set_silent_awake>:
 * @param module_nr module number of the module to set silent awake
 * @param silent_awake silent or awake
 * @return li_can_slv_errorcode_t or LI_CAN_SLV_ERR_OK if successful
 */
static li_can_slv_errorcode_t can_sys_set_silent_awake(const byte_t *src, li_can_slv_module_nr_t module_nr, can_config_module_silent_t silent_awake)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	807b      	strh	r3, [r7, #2]
 8006288:	4613      	mov	r3, r2
 800628a:	707b      	strb	r3, [r7, #1]
	li_can_slv_errorcode_t err = LI_CAN_SLV_ERR_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	83fb      	strh	r3, [r7, #30]
	uint32_t serial_nr;
#ifndef LI_CAN_SLV_BOOT
	uint16_t module_found = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	82fb      	strh	r3, [r7, #22]
	can_config_module_silent_t module_silent;
	char_t module_type[CAN_CONFIG_TYPE_STRING_LENGTH];
#else // #ifndef LI_CAN_SLV_BOOT
	module_nr = module_nr; // dummy assignment
#endif // #ifndef LI_CAN_SLV_BOOT
	serial_nr = ((0x00FF0000 & (uint32_t) src[5] << 16) | (0x0000FF00 & (uint32_t) src[6] << 8) | (0x000000FF & (uint32_t) src[7]));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3305      	adds	r3, #5
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	041b      	lsls	r3, r3, #16
 800629c:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3306      	adds	r3, #6
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	4313      	orrs	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	3207      	adds	r2, #7
 80062b0:	7812      	ldrb	r2, [r2, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]

	// check serial number
	if ((can_port_get_serialnumber()) == serial_nr)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	4a1d      	ldr	r2, [pc, #116]	; (8006330 <can_sys_set_silent_awake+0xb4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d133      	bne.n	8006326 <can_sys_set_silent_awake+0xaa>
	{
#ifdef LI_CAN_SLV_BOOT
		err = can_config_set_module_silent_awake(silent_awake);
#else // #ifdef LI_CAN_SLV_BOOT
		// check module number
		err = can_config_module_nr_valid(module_nr, &table_pos, &module_silent, &module_found);
 80062be:	f107 0316 	add.w	r3, r7, #22
 80062c2:	f107 0213 	add.w	r2, r7, #19
 80062c6:	f107 0114 	add.w	r1, r7, #20
 80062ca:	8878      	ldrh	r0, [r7, #2]
 80062cc:	f7fe f9d4 	bl	8004678 <can_config_module_nr_valid>
 80062d0:	4603      	mov	r3, r0
 80062d2:	83fb      	strh	r3, [r7, #30]
		if (err != LI_CAN_SLV_ERR_OK)
 80062d4:	8bfb      	ldrh	r3, [r7, #30]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <can_sys_set_silent_awake+0x62>
		{
			return err;
 80062da:	8bfb      	ldrh	r3, [r7, #30]
 80062dc:	e024      	b.n	8006328 <can_sys_set_silent_awake+0xac>
		}
		if (module_found)
 80062de:	8afb      	ldrh	r3, [r7, #22]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <can_sys_set_silent_awake+0xaa>
		{
			// check module_type
			err = can_config_get_module_type(table_pos, &module_type[0]);
 80062e4:	8abb      	ldrh	r3, [r7, #20]
 80062e6:	f107 020c 	add.w	r2, r7, #12
 80062ea:	4611      	mov	r1, r2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe fa09 	bl	8004704 <can_config_get_module_type>
 80062f2:	4603      	mov	r3, r0
 80062f4:	83fb      	strh	r3, [r7, #30]
			if (err != LI_CAN_SLV_ERR_OK)
 80062f6:	8bfb      	ldrh	r3, [r7, #30]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <can_sys_set_silent_awake+0x84>
			{
				return err;
 80062fc:	8bfb      	ldrh	r3, [r7, #30]
 80062fe:	e013      	b.n	8006328 <can_sys_set_silent_awake+0xac>
			}
			if (can_port_string_n_cmp(module_type, (char_t *)&src[1], 4) == 0)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	1c59      	adds	r1, r3, #1
 8006304:	f107 030c 	add.w	r3, r7, #12
 8006308:	2204      	movs	r2, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f868 	bl	80063e0 <strncmp>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d107      	bne.n	8006326 <can_sys_set_silent_awake+0xaa>
			{
				err = can_config_set_module_silent_awake(table_pos, silent_awake);
 8006316:	8abb      	ldrh	r3, [r7, #20]
 8006318:	787a      	ldrb	r2, [r7, #1]
 800631a:	4611      	mov	r1, r2
 800631c:	4618      	mov	r0, r3
 800631e:	f7fe fa4d 	bl	80047bc <can_config_set_module_silent_awake>
 8006322:	4603      	mov	r3, r0
 8006324:	83fb      	strh	r3, [r7, #30]
			}
		}
#endif // #ifdef LI_CAN_SLV_BOOT
	}
	return (err);
 8006326:	8bfb      	ldrh	r3, [r7, #30]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	0098967f 	.word	0x0098967f

08006334 <__errno>:
 8006334:	4b01      	ldr	r3, [pc, #4]	; (800633c <__errno+0x8>)
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000144 	.word	0x20000144

08006340 <__libc_init_array>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4e0d      	ldr	r6, [pc, #52]	; (8006378 <__libc_init_array+0x38>)
 8006344:	4c0d      	ldr	r4, [pc, #52]	; (800637c <__libc_init_array+0x3c>)
 8006346:	1ba4      	subs	r4, r4, r6
 8006348:	10a4      	asrs	r4, r4, #2
 800634a:	2500      	movs	r5, #0
 800634c:	42a5      	cmp	r5, r4
 800634e:	d109      	bne.n	8006364 <__libc_init_array+0x24>
 8006350:	4e0b      	ldr	r6, [pc, #44]	; (8006380 <__libc_init_array+0x40>)
 8006352:	4c0c      	ldr	r4, [pc, #48]	; (8006384 <__libc_init_array+0x44>)
 8006354:	f000 ff38 	bl	80071c8 <_init>
 8006358:	1ba4      	subs	r4, r4, r6
 800635a:	10a4      	asrs	r4, r4, #2
 800635c:	2500      	movs	r5, #0
 800635e:	42a5      	cmp	r5, r4
 8006360:	d105      	bne.n	800636e <__libc_init_array+0x2e>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006368:	4798      	blx	r3
 800636a:	3501      	adds	r5, #1
 800636c:	e7ee      	b.n	800634c <__libc_init_array+0xc>
 800636e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006372:	4798      	blx	r3
 8006374:	3501      	adds	r5, #1
 8006376:	e7f2      	b.n	800635e <__libc_init_array+0x1e>
 8006378:	080075a0 	.word	0x080075a0
 800637c:	080075a0 	.word	0x080075a0
 8006380:	080075a0 	.word	0x080075a0
 8006384:	080075a4 	.word	0x080075a4

08006388 <memcpy>:
 8006388:	b510      	push	{r4, lr}
 800638a:	1e43      	subs	r3, r0, #1
 800638c:	440a      	add	r2, r1
 800638e:	4291      	cmp	r1, r2
 8006390:	d100      	bne.n	8006394 <memcpy+0xc>
 8006392:	bd10      	pop	{r4, pc}
 8006394:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800639c:	e7f7      	b.n	800638e <memcpy+0x6>

0800639e <memset>:
 800639e:	4402      	add	r2, r0
 80063a0:	4603      	mov	r3, r0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d100      	bne.n	80063a8 <memset+0xa>
 80063a6:	4770      	bx	lr
 80063a8:	f803 1b01 	strb.w	r1, [r3], #1
 80063ac:	e7f9      	b.n	80063a2 <memset+0x4>
	...

080063b0 <iprintf>:
 80063b0:	b40f      	push	{r0, r1, r2, r3}
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <iprintf+0x2c>)
 80063b4:	b513      	push	{r0, r1, r4, lr}
 80063b6:	681c      	ldr	r4, [r3, #0]
 80063b8:	b124      	cbz	r4, 80063c4 <iprintf+0x14>
 80063ba:	69a3      	ldr	r3, [r4, #24]
 80063bc:	b913      	cbnz	r3, 80063c4 <iprintf+0x14>
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 f876 	bl	80064b0 <__sinit>
 80063c4:	ab05      	add	r3, sp, #20
 80063c6:	9a04      	ldr	r2, [sp, #16]
 80063c8:	68a1      	ldr	r1, [r4, #8]
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 f97d 	bl	80066cc <_vfiprintf_r>
 80063d2:	b002      	add	sp, #8
 80063d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d8:	b004      	add	sp, #16
 80063da:	4770      	bx	lr
 80063dc:	20000144 	.word	0x20000144

080063e0 <strncmp>:
 80063e0:	b510      	push	{r4, lr}
 80063e2:	b16a      	cbz	r2, 8006400 <strncmp+0x20>
 80063e4:	3901      	subs	r1, #1
 80063e6:	1884      	adds	r4, r0, r2
 80063e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80063ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d103      	bne.n	80063fc <strncmp+0x1c>
 80063f4:	42a0      	cmp	r0, r4
 80063f6:	d001      	beq.n	80063fc <strncmp+0x1c>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f5      	bne.n	80063e8 <strncmp+0x8>
 80063fc:	1a98      	subs	r0, r3, r2
 80063fe:	bd10      	pop	{r4, pc}
 8006400:	4610      	mov	r0, r2
 8006402:	e7fc      	b.n	80063fe <strncmp+0x1e>

08006404 <strncpy>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	3901      	subs	r1, #1
 8006408:	4604      	mov	r4, r0
 800640a:	b902      	cbnz	r2, 800640e <strncpy+0xa>
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	4623      	mov	r3, r4
 8006410:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006414:	f803 5b01 	strb.w	r5, [r3], #1
 8006418:	1e56      	subs	r6, r2, #1
 800641a:	b92d      	cbnz	r5, 8006428 <strncpy+0x24>
 800641c:	4414      	add	r4, r2
 800641e:	42a3      	cmp	r3, r4
 8006420:	d0f4      	beq.n	800640c <strncpy+0x8>
 8006422:	f803 5b01 	strb.w	r5, [r3], #1
 8006426:	e7fa      	b.n	800641e <strncpy+0x1a>
 8006428:	461c      	mov	r4, r3
 800642a:	4632      	mov	r2, r6
 800642c:	e7ed      	b.n	800640a <strncpy+0x6>
	...

08006430 <std>:
 8006430:	2300      	movs	r3, #0
 8006432:	b510      	push	{r4, lr}
 8006434:	4604      	mov	r4, r0
 8006436:	e9c0 3300 	strd	r3, r3, [r0]
 800643a:	6083      	str	r3, [r0, #8]
 800643c:	8181      	strh	r1, [r0, #12]
 800643e:	6643      	str	r3, [r0, #100]	; 0x64
 8006440:	81c2      	strh	r2, [r0, #14]
 8006442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006446:	6183      	str	r3, [r0, #24]
 8006448:	4619      	mov	r1, r3
 800644a:	2208      	movs	r2, #8
 800644c:	305c      	adds	r0, #92	; 0x5c
 800644e:	f7ff ffa6 	bl	800639e <memset>
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <std+0x38>)
 8006454:	6263      	str	r3, [r4, #36]	; 0x24
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <std+0x3c>)
 8006458:	62a3      	str	r3, [r4, #40]	; 0x28
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <std+0x40>)
 800645c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <std+0x44>)
 8006460:	6224      	str	r4, [r4, #32]
 8006462:	6323      	str	r3, [r4, #48]	; 0x30
 8006464:	bd10      	pop	{r4, pc}
 8006466:	bf00      	nop
 8006468:	08006c29 	.word	0x08006c29
 800646c:	08006c4b 	.word	0x08006c4b
 8006470:	08006c83 	.word	0x08006c83
 8006474:	08006ca7 	.word	0x08006ca7

08006478 <_cleanup_r>:
 8006478:	4901      	ldr	r1, [pc, #4]	; (8006480 <_cleanup_r+0x8>)
 800647a:	f000 b885 	b.w	8006588 <_fwalk_reent>
 800647e:	bf00      	nop
 8006480:	08006f81 	.word	0x08006f81

08006484 <__sfmoreglue>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	1e4a      	subs	r2, r1, #1
 8006488:	2568      	movs	r5, #104	; 0x68
 800648a:	4355      	muls	r5, r2
 800648c:	460e      	mov	r6, r1
 800648e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006492:	f000 f897 	bl	80065c4 <_malloc_r>
 8006496:	4604      	mov	r4, r0
 8006498:	b140      	cbz	r0, 80064ac <__sfmoreglue+0x28>
 800649a:	2100      	movs	r1, #0
 800649c:	e9c0 1600 	strd	r1, r6, [r0]
 80064a0:	300c      	adds	r0, #12
 80064a2:	60a0      	str	r0, [r4, #8]
 80064a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064a8:	f7ff ff79 	bl	800639e <memset>
 80064ac:	4620      	mov	r0, r4
 80064ae:	bd70      	pop	{r4, r5, r6, pc}

080064b0 <__sinit>:
 80064b0:	6983      	ldr	r3, [r0, #24]
 80064b2:	b510      	push	{r4, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	bb33      	cbnz	r3, 8006506 <__sinit+0x56>
 80064b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80064bc:	6503      	str	r3, [r0, #80]	; 0x50
 80064be:	4b12      	ldr	r3, [pc, #72]	; (8006508 <__sinit+0x58>)
 80064c0:	4a12      	ldr	r2, [pc, #72]	; (800650c <__sinit+0x5c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6282      	str	r2, [r0, #40]	; 0x28
 80064c6:	4298      	cmp	r0, r3
 80064c8:	bf04      	itt	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	6183      	streq	r3, [r0, #24]
 80064ce:	f000 f81f 	bl	8006510 <__sfp>
 80064d2:	6060      	str	r0, [r4, #4]
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 f81b 	bl	8006510 <__sfp>
 80064da:	60a0      	str	r0, [r4, #8]
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 f817 	bl	8006510 <__sfp>
 80064e2:	2200      	movs	r2, #0
 80064e4:	60e0      	str	r0, [r4, #12]
 80064e6:	2104      	movs	r1, #4
 80064e8:	6860      	ldr	r0, [r4, #4]
 80064ea:	f7ff ffa1 	bl	8006430 <std>
 80064ee:	2201      	movs	r2, #1
 80064f0:	2109      	movs	r1, #9
 80064f2:	68a0      	ldr	r0, [r4, #8]
 80064f4:	f7ff ff9c 	bl	8006430 <std>
 80064f8:	2202      	movs	r2, #2
 80064fa:	2112      	movs	r1, #18
 80064fc:	68e0      	ldr	r0, [r4, #12]
 80064fe:	f7ff ff97 	bl	8006430 <std>
 8006502:	2301      	movs	r3, #1
 8006504:	61a3      	str	r3, [r4, #24]
 8006506:	bd10      	pop	{r4, pc}
 8006508:	08007500 	.word	0x08007500
 800650c:	08006479 	.word	0x08006479

08006510 <__sfp>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <__sfp+0x70>)
 8006514:	681e      	ldr	r6, [r3, #0]
 8006516:	69b3      	ldr	r3, [r6, #24]
 8006518:	4607      	mov	r7, r0
 800651a:	b913      	cbnz	r3, 8006522 <__sfp+0x12>
 800651c:	4630      	mov	r0, r6
 800651e:	f7ff ffc7 	bl	80064b0 <__sinit>
 8006522:	3648      	adds	r6, #72	; 0x48
 8006524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006528:	3b01      	subs	r3, #1
 800652a:	d503      	bpl.n	8006534 <__sfp+0x24>
 800652c:	6833      	ldr	r3, [r6, #0]
 800652e:	b133      	cbz	r3, 800653e <__sfp+0x2e>
 8006530:	6836      	ldr	r6, [r6, #0]
 8006532:	e7f7      	b.n	8006524 <__sfp+0x14>
 8006534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006538:	b16d      	cbz	r5, 8006556 <__sfp+0x46>
 800653a:	3468      	adds	r4, #104	; 0x68
 800653c:	e7f4      	b.n	8006528 <__sfp+0x18>
 800653e:	2104      	movs	r1, #4
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ff9f 	bl	8006484 <__sfmoreglue>
 8006546:	6030      	str	r0, [r6, #0]
 8006548:	2800      	cmp	r0, #0
 800654a:	d1f1      	bne.n	8006530 <__sfp+0x20>
 800654c:	230c      	movs	r3, #12
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	4604      	mov	r4, r0
 8006552:	4620      	mov	r0, r4
 8006554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <__sfp+0x74>)
 8006558:	6665      	str	r5, [r4, #100]	; 0x64
 800655a:	e9c4 5500 	strd	r5, r5, [r4]
 800655e:	60a5      	str	r5, [r4, #8]
 8006560:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006564:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006568:	2208      	movs	r2, #8
 800656a:	4629      	mov	r1, r5
 800656c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006570:	f7ff ff15 	bl	800639e <memset>
 8006574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800657c:	e7e9      	b.n	8006552 <__sfp+0x42>
 800657e:	bf00      	nop
 8006580:	08007500 	.word	0x08007500
 8006584:	ffff0001 	.word	0xffff0001

08006588 <_fwalk_reent>:
 8006588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800658c:	4680      	mov	r8, r0
 800658e:	4689      	mov	r9, r1
 8006590:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006594:	2600      	movs	r6, #0
 8006596:	b914      	cbnz	r4, 800659e <_fwalk_reent+0x16>
 8006598:	4630      	mov	r0, r6
 800659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80065a2:	3f01      	subs	r7, #1
 80065a4:	d501      	bpl.n	80065aa <_fwalk_reent+0x22>
 80065a6:	6824      	ldr	r4, [r4, #0]
 80065a8:	e7f5      	b.n	8006596 <_fwalk_reent+0xe>
 80065aa:	89ab      	ldrh	r3, [r5, #12]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d907      	bls.n	80065c0 <_fwalk_reent+0x38>
 80065b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065b4:	3301      	adds	r3, #1
 80065b6:	d003      	beq.n	80065c0 <_fwalk_reent+0x38>
 80065b8:	4629      	mov	r1, r5
 80065ba:	4640      	mov	r0, r8
 80065bc:	47c8      	blx	r9
 80065be:	4306      	orrs	r6, r0
 80065c0:	3568      	adds	r5, #104	; 0x68
 80065c2:	e7ee      	b.n	80065a2 <_fwalk_reent+0x1a>

080065c4 <_malloc_r>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	1ccd      	adds	r5, r1, #3
 80065c8:	f025 0503 	bic.w	r5, r5, #3
 80065cc:	3508      	adds	r5, #8
 80065ce:	2d0c      	cmp	r5, #12
 80065d0:	bf38      	it	cc
 80065d2:	250c      	movcc	r5, #12
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	4606      	mov	r6, r0
 80065d8:	db01      	blt.n	80065de <_malloc_r+0x1a>
 80065da:	42a9      	cmp	r1, r5
 80065dc:	d903      	bls.n	80065e6 <_malloc_r+0x22>
 80065de:	230c      	movs	r3, #12
 80065e0:	6033      	str	r3, [r6, #0]
 80065e2:	2000      	movs	r0, #0
 80065e4:	bd70      	pop	{r4, r5, r6, pc}
 80065e6:	f000 fd6b 	bl	80070c0 <__malloc_lock>
 80065ea:	4a21      	ldr	r2, [pc, #132]	; (8006670 <_malloc_r+0xac>)
 80065ec:	6814      	ldr	r4, [r2, #0]
 80065ee:	4621      	mov	r1, r4
 80065f0:	b991      	cbnz	r1, 8006618 <_malloc_r+0x54>
 80065f2:	4c20      	ldr	r4, [pc, #128]	; (8006674 <_malloc_r+0xb0>)
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	b91b      	cbnz	r3, 8006600 <_malloc_r+0x3c>
 80065f8:	4630      	mov	r0, r6
 80065fa:	f000 fb05 	bl	8006c08 <_sbrk_r>
 80065fe:	6020      	str	r0, [r4, #0]
 8006600:	4629      	mov	r1, r5
 8006602:	4630      	mov	r0, r6
 8006604:	f000 fb00 	bl	8006c08 <_sbrk_r>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d124      	bne.n	8006656 <_malloc_r+0x92>
 800660c:	230c      	movs	r3, #12
 800660e:	6033      	str	r3, [r6, #0]
 8006610:	4630      	mov	r0, r6
 8006612:	f000 fd56 	bl	80070c2 <__malloc_unlock>
 8006616:	e7e4      	b.n	80065e2 <_malloc_r+0x1e>
 8006618:	680b      	ldr	r3, [r1, #0]
 800661a:	1b5b      	subs	r3, r3, r5
 800661c:	d418      	bmi.n	8006650 <_malloc_r+0x8c>
 800661e:	2b0b      	cmp	r3, #11
 8006620:	d90f      	bls.n	8006642 <_malloc_r+0x7e>
 8006622:	600b      	str	r3, [r1, #0]
 8006624:	50cd      	str	r5, [r1, r3]
 8006626:	18cc      	adds	r4, r1, r3
 8006628:	4630      	mov	r0, r6
 800662a:	f000 fd4a 	bl	80070c2 <__malloc_unlock>
 800662e:	f104 000b 	add.w	r0, r4, #11
 8006632:	1d23      	adds	r3, r4, #4
 8006634:	f020 0007 	bic.w	r0, r0, #7
 8006638:	1ac3      	subs	r3, r0, r3
 800663a:	d0d3      	beq.n	80065e4 <_malloc_r+0x20>
 800663c:	425a      	negs	r2, r3
 800663e:	50e2      	str	r2, [r4, r3]
 8006640:	e7d0      	b.n	80065e4 <_malloc_r+0x20>
 8006642:	428c      	cmp	r4, r1
 8006644:	684b      	ldr	r3, [r1, #4]
 8006646:	bf16      	itet	ne
 8006648:	6063      	strne	r3, [r4, #4]
 800664a:	6013      	streq	r3, [r2, #0]
 800664c:	460c      	movne	r4, r1
 800664e:	e7eb      	b.n	8006628 <_malloc_r+0x64>
 8006650:	460c      	mov	r4, r1
 8006652:	6849      	ldr	r1, [r1, #4]
 8006654:	e7cc      	b.n	80065f0 <_malloc_r+0x2c>
 8006656:	1cc4      	adds	r4, r0, #3
 8006658:	f024 0403 	bic.w	r4, r4, #3
 800665c:	42a0      	cmp	r0, r4
 800665e:	d005      	beq.n	800666c <_malloc_r+0xa8>
 8006660:	1a21      	subs	r1, r4, r0
 8006662:	4630      	mov	r0, r6
 8006664:	f000 fad0 	bl	8006c08 <_sbrk_r>
 8006668:	3001      	adds	r0, #1
 800666a:	d0cf      	beq.n	800660c <_malloc_r+0x48>
 800666c:	6025      	str	r5, [r4, #0]
 800666e:	e7db      	b.n	8006628 <_malloc_r+0x64>
 8006670:	20000700 	.word	0x20000700
 8006674:	20000704 	.word	0x20000704

08006678 <__sfputc_r>:
 8006678:	6893      	ldr	r3, [r2, #8]
 800667a:	3b01      	subs	r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	b410      	push	{r4}
 8006680:	6093      	str	r3, [r2, #8]
 8006682:	da08      	bge.n	8006696 <__sfputc_r+0x1e>
 8006684:	6994      	ldr	r4, [r2, #24]
 8006686:	42a3      	cmp	r3, r4
 8006688:	db01      	blt.n	800668e <__sfputc_r+0x16>
 800668a:	290a      	cmp	r1, #10
 800668c:	d103      	bne.n	8006696 <__sfputc_r+0x1e>
 800668e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006692:	f000 bb0d 	b.w	8006cb0 <__swbuf_r>
 8006696:	6813      	ldr	r3, [r2, #0]
 8006698:	1c58      	adds	r0, r3, #1
 800669a:	6010      	str	r0, [r2, #0]
 800669c:	7019      	strb	r1, [r3, #0]
 800669e:	4608      	mov	r0, r1
 80066a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <__sfputs_r>:
 80066a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a8:	4606      	mov	r6, r0
 80066aa:	460f      	mov	r7, r1
 80066ac:	4614      	mov	r4, r2
 80066ae:	18d5      	adds	r5, r2, r3
 80066b0:	42ac      	cmp	r4, r5
 80066b2:	d101      	bne.n	80066b8 <__sfputs_r+0x12>
 80066b4:	2000      	movs	r0, #0
 80066b6:	e007      	b.n	80066c8 <__sfputs_r+0x22>
 80066b8:	463a      	mov	r2, r7
 80066ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066be:	4630      	mov	r0, r6
 80066c0:	f7ff ffda 	bl	8006678 <__sfputc_r>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d1f3      	bne.n	80066b0 <__sfputs_r+0xa>
 80066c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066cc <_vfiprintf_r>:
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	460c      	mov	r4, r1
 80066d2:	b09d      	sub	sp, #116	; 0x74
 80066d4:	4617      	mov	r7, r2
 80066d6:	461d      	mov	r5, r3
 80066d8:	4606      	mov	r6, r0
 80066da:	b118      	cbz	r0, 80066e4 <_vfiprintf_r+0x18>
 80066dc:	6983      	ldr	r3, [r0, #24]
 80066de:	b90b      	cbnz	r3, 80066e4 <_vfiprintf_r+0x18>
 80066e0:	f7ff fee6 	bl	80064b0 <__sinit>
 80066e4:	4b7c      	ldr	r3, [pc, #496]	; (80068d8 <_vfiprintf_r+0x20c>)
 80066e6:	429c      	cmp	r4, r3
 80066e8:	d158      	bne.n	800679c <_vfiprintf_r+0xd0>
 80066ea:	6874      	ldr	r4, [r6, #4]
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	0718      	lsls	r0, r3, #28
 80066f0:	d55e      	bpl.n	80067b0 <_vfiprintf_r+0xe4>
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d05b      	beq.n	80067b0 <_vfiprintf_r+0xe4>
 80066f8:	2300      	movs	r3, #0
 80066fa:	9309      	str	r3, [sp, #36]	; 0x24
 80066fc:	2320      	movs	r3, #32
 80066fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006702:	2330      	movs	r3, #48	; 0x30
 8006704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006708:	9503      	str	r5, [sp, #12]
 800670a:	f04f 0b01 	mov.w	fp, #1
 800670e:	46b8      	mov	r8, r7
 8006710:	4645      	mov	r5, r8
 8006712:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006716:	b10b      	cbz	r3, 800671c <_vfiprintf_r+0x50>
 8006718:	2b25      	cmp	r3, #37	; 0x25
 800671a:	d154      	bne.n	80067c6 <_vfiprintf_r+0xfa>
 800671c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006720:	d00b      	beq.n	800673a <_vfiprintf_r+0x6e>
 8006722:	4653      	mov	r3, sl
 8006724:	463a      	mov	r2, r7
 8006726:	4621      	mov	r1, r4
 8006728:	4630      	mov	r0, r6
 800672a:	f7ff ffbc 	bl	80066a6 <__sfputs_r>
 800672e:	3001      	adds	r0, #1
 8006730:	f000 80c2 	beq.w	80068b8 <_vfiprintf_r+0x1ec>
 8006734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006736:	4453      	add	r3, sl
 8006738:	9309      	str	r3, [sp, #36]	; 0x24
 800673a:	f898 3000 	ldrb.w	r3, [r8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80ba 	beq.w	80068b8 <_vfiprintf_r+0x1ec>
 8006744:	2300      	movs	r3, #0
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	9307      	str	r3, [sp, #28]
 8006752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006756:	931a      	str	r3, [sp, #104]	; 0x68
 8006758:	46a8      	mov	r8, r5
 800675a:	2205      	movs	r2, #5
 800675c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006760:	485e      	ldr	r0, [pc, #376]	; (80068dc <_vfiprintf_r+0x210>)
 8006762:	f7f9 fd35 	bl	80001d0 <memchr>
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	bb78      	cbnz	r0, 80067ca <_vfiprintf_r+0xfe>
 800676a:	06d9      	lsls	r1, r3, #27
 800676c:	bf44      	itt	mi
 800676e:	2220      	movmi	r2, #32
 8006770:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006774:	071a      	lsls	r2, r3, #28
 8006776:	bf44      	itt	mi
 8006778:	222b      	movmi	r2, #43	; 0x2b
 800677a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800677e:	782a      	ldrb	r2, [r5, #0]
 8006780:	2a2a      	cmp	r2, #42	; 0x2a
 8006782:	d02a      	beq.n	80067da <_vfiprintf_r+0x10e>
 8006784:	9a07      	ldr	r2, [sp, #28]
 8006786:	46a8      	mov	r8, r5
 8006788:	2000      	movs	r0, #0
 800678a:	250a      	movs	r5, #10
 800678c:	4641      	mov	r1, r8
 800678e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006792:	3b30      	subs	r3, #48	; 0x30
 8006794:	2b09      	cmp	r3, #9
 8006796:	d969      	bls.n	800686c <_vfiprintf_r+0x1a0>
 8006798:	b360      	cbz	r0, 80067f4 <_vfiprintf_r+0x128>
 800679a:	e024      	b.n	80067e6 <_vfiprintf_r+0x11a>
 800679c:	4b50      	ldr	r3, [pc, #320]	; (80068e0 <_vfiprintf_r+0x214>)
 800679e:	429c      	cmp	r4, r3
 80067a0:	d101      	bne.n	80067a6 <_vfiprintf_r+0xda>
 80067a2:	68b4      	ldr	r4, [r6, #8]
 80067a4:	e7a2      	b.n	80066ec <_vfiprintf_r+0x20>
 80067a6:	4b4f      	ldr	r3, [pc, #316]	; (80068e4 <_vfiprintf_r+0x218>)
 80067a8:	429c      	cmp	r4, r3
 80067aa:	bf08      	it	eq
 80067ac:	68f4      	ldreq	r4, [r6, #12]
 80067ae:	e79d      	b.n	80066ec <_vfiprintf_r+0x20>
 80067b0:	4621      	mov	r1, r4
 80067b2:	4630      	mov	r0, r6
 80067b4:	f000 fae0 	bl	8006d78 <__swsetup_r>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d09d      	beq.n	80066f8 <_vfiprintf_r+0x2c>
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	b01d      	add	sp, #116	; 0x74
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	46a8      	mov	r8, r5
 80067c8:	e7a2      	b.n	8006710 <_vfiprintf_r+0x44>
 80067ca:	4a44      	ldr	r2, [pc, #272]	; (80068dc <_vfiprintf_r+0x210>)
 80067cc:	1a80      	subs	r0, r0, r2
 80067ce:	fa0b f000 	lsl.w	r0, fp, r0
 80067d2:	4318      	orrs	r0, r3
 80067d4:	9004      	str	r0, [sp, #16]
 80067d6:	4645      	mov	r5, r8
 80067d8:	e7be      	b.n	8006758 <_vfiprintf_r+0x8c>
 80067da:	9a03      	ldr	r2, [sp, #12]
 80067dc:	1d11      	adds	r1, r2, #4
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	9103      	str	r1, [sp, #12]
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	db01      	blt.n	80067ea <_vfiprintf_r+0x11e>
 80067e6:	9207      	str	r2, [sp, #28]
 80067e8:	e004      	b.n	80067f4 <_vfiprintf_r+0x128>
 80067ea:	4252      	negs	r2, r2
 80067ec:	f043 0302 	orr.w	r3, r3, #2
 80067f0:	9207      	str	r2, [sp, #28]
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	f898 3000 	ldrb.w	r3, [r8]
 80067f8:	2b2e      	cmp	r3, #46	; 0x2e
 80067fa:	d10e      	bne.n	800681a <_vfiprintf_r+0x14e>
 80067fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006800:	2b2a      	cmp	r3, #42	; 0x2a
 8006802:	d138      	bne.n	8006876 <_vfiprintf_r+0x1aa>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	9203      	str	r2, [sp, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	bfb8      	it	lt
 8006810:	f04f 33ff 	movlt.w	r3, #4294967295
 8006814:	f108 0802 	add.w	r8, r8, #2
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	4d33      	ldr	r5, [pc, #204]	; (80068e8 <_vfiprintf_r+0x21c>)
 800681c:	f898 1000 	ldrb.w	r1, [r8]
 8006820:	2203      	movs	r2, #3
 8006822:	4628      	mov	r0, r5
 8006824:	f7f9 fcd4 	bl	80001d0 <memchr>
 8006828:	b140      	cbz	r0, 800683c <_vfiprintf_r+0x170>
 800682a:	2340      	movs	r3, #64	; 0x40
 800682c:	1b40      	subs	r0, r0, r5
 800682e:	fa03 f000 	lsl.w	r0, r3, r0
 8006832:	9b04      	ldr	r3, [sp, #16]
 8006834:	4303      	orrs	r3, r0
 8006836:	f108 0801 	add.w	r8, r8, #1
 800683a:	9304      	str	r3, [sp, #16]
 800683c:	f898 1000 	ldrb.w	r1, [r8]
 8006840:	482a      	ldr	r0, [pc, #168]	; (80068ec <_vfiprintf_r+0x220>)
 8006842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006846:	2206      	movs	r2, #6
 8006848:	f108 0701 	add.w	r7, r8, #1
 800684c:	f7f9 fcc0 	bl	80001d0 <memchr>
 8006850:	2800      	cmp	r0, #0
 8006852:	d037      	beq.n	80068c4 <_vfiprintf_r+0x1f8>
 8006854:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <_vfiprintf_r+0x224>)
 8006856:	bb1b      	cbnz	r3, 80068a0 <_vfiprintf_r+0x1d4>
 8006858:	9b03      	ldr	r3, [sp, #12]
 800685a:	3307      	adds	r3, #7
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	3308      	adds	r3, #8
 8006862:	9303      	str	r3, [sp, #12]
 8006864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006866:	444b      	add	r3, r9
 8006868:	9309      	str	r3, [sp, #36]	; 0x24
 800686a:	e750      	b.n	800670e <_vfiprintf_r+0x42>
 800686c:	fb05 3202 	mla	r2, r5, r2, r3
 8006870:	2001      	movs	r0, #1
 8006872:	4688      	mov	r8, r1
 8006874:	e78a      	b.n	800678c <_vfiprintf_r+0xc0>
 8006876:	2300      	movs	r3, #0
 8006878:	f108 0801 	add.w	r8, r8, #1
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	4619      	mov	r1, r3
 8006880:	250a      	movs	r5, #10
 8006882:	4640      	mov	r0, r8
 8006884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006888:	3a30      	subs	r2, #48	; 0x30
 800688a:	2a09      	cmp	r2, #9
 800688c:	d903      	bls.n	8006896 <_vfiprintf_r+0x1ca>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0c3      	beq.n	800681a <_vfiprintf_r+0x14e>
 8006892:	9105      	str	r1, [sp, #20]
 8006894:	e7c1      	b.n	800681a <_vfiprintf_r+0x14e>
 8006896:	fb05 2101 	mla	r1, r5, r1, r2
 800689a:	2301      	movs	r3, #1
 800689c:	4680      	mov	r8, r0
 800689e:	e7f0      	b.n	8006882 <_vfiprintf_r+0x1b6>
 80068a0:	ab03      	add	r3, sp, #12
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	4622      	mov	r2, r4
 80068a6:	4b13      	ldr	r3, [pc, #76]	; (80068f4 <_vfiprintf_r+0x228>)
 80068a8:	a904      	add	r1, sp, #16
 80068aa:	4630      	mov	r0, r6
 80068ac:	f3af 8000 	nop.w
 80068b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068b4:	4681      	mov	r9, r0
 80068b6:	d1d5      	bne.n	8006864 <_vfiprintf_r+0x198>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	065b      	lsls	r3, r3, #25
 80068bc:	f53f af7e 	bmi.w	80067bc <_vfiprintf_r+0xf0>
 80068c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068c2:	e77d      	b.n	80067c0 <_vfiprintf_r+0xf4>
 80068c4:	ab03      	add	r3, sp, #12
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	4622      	mov	r2, r4
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <_vfiprintf_r+0x228>)
 80068cc:	a904      	add	r1, sp, #16
 80068ce:	4630      	mov	r0, r6
 80068d0:	f000 f888 	bl	80069e4 <_printf_i>
 80068d4:	e7ec      	b.n	80068b0 <_vfiprintf_r+0x1e4>
 80068d6:	bf00      	nop
 80068d8:	08007524 	.word	0x08007524
 80068dc:	08007564 	.word	0x08007564
 80068e0:	08007544 	.word	0x08007544
 80068e4:	08007504 	.word	0x08007504
 80068e8:	0800756a 	.word	0x0800756a
 80068ec:	0800756e 	.word	0x0800756e
 80068f0:	00000000 	.word	0x00000000
 80068f4:	080066a7 	.word	0x080066a7

080068f8 <_printf_common>:
 80068f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068fc:	4691      	mov	r9, r2
 80068fe:	461f      	mov	r7, r3
 8006900:	688a      	ldr	r2, [r1, #8]
 8006902:	690b      	ldr	r3, [r1, #16]
 8006904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006908:	4293      	cmp	r3, r2
 800690a:	bfb8      	it	lt
 800690c:	4613      	movlt	r3, r2
 800690e:	f8c9 3000 	str.w	r3, [r9]
 8006912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006916:	4606      	mov	r6, r0
 8006918:	460c      	mov	r4, r1
 800691a:	b112      	cbz	r2, 8006922 <_printf_common+0x2a>
 800691c:	3301      	adds	r3, #1
 800691e:	f8c9 3000 	str.w	r3, [r9]
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	0699      	lsls	r1, r3, #26
 8006926:	bf42      	ittt	mi
 8006928:	f8d9 3000 	ldrmi.w	r3, [r9]
 800692c:	3302      	addmi	r3, #2
 800692e:	f8c9 3000 	strmi.w	r3, [r9]
 8006932:	6825      	ldr	r5, [r4, #0]
 8006934:	f015 0506 	ands.w	r5, r5, #6
 8006938:	d107      	bne.n	800694a <_printf_common+0x52>
 800693a:	f104 0a19 	add.w	sl, r4, #25
 800693e:	68e3      	ldr	r3, [r4, #12]
 8006940:	f8d9 2000 	ldr.w	r2, [r9]
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	42ab      	cmp	r3, r5
 8006948:	dc28      	bgt.n	800699c <_printf_common+0xa4>
 800694a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	3300      	adds	r3, #0
 8006952:	bf18      	it	ne
 8006954:	2301      	movne	r3, #1
 8006956:	0692      	lsls	r2, r2, #26
 8006958:	d42d      	bmi.n	80069b6 <_printf_common+0xbe>
 800695a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800695e:	4639      	mov	r1, r7
 8006960:	4630      	mov	r0, r6
 8006962:	47c0      	blx	r8
 8006964:	3001      	adds	r0, #1
 8006966:	d020      	beq.n	80069aa <_printf_common+0xb2>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	68e5      	ldr	r5, [r4, #12]
 800696c:	f8d9 2000 	ldr.w	r2, [r9]
 8006970:	f003 0306 	and.w	r3, r3, #6
 8006974:	2b04      	cmp	r3, #4
 8006976:	bf08      	it	eq
 8006978:	1aad      	subeq	r5, r5, r2
 800697a:	68a3      	ldr	r3, [r4, #8]
 800697c:	6922      	ldr	r2, [r4, #16]
 800697e:	bf0c      	ite	eq
 8006980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006984:	2500      	movne	r5, #0
 8006986:	4293      	cmp	r3, r2
 8006988:	bfc4      	itt	gt
 800698a:	1a9b      	subgt	r3, r3, r2
 800698c:	18ed      	addgt	r5, r5, r3
 800698e:	f04f 0900 	mov.w	r9, #0
 8006992:	341a      	adds	r4, #26
 8006994:	454d      	cmp	r5, r9
 8006996:	d11a      	bne.n	80069ce <_printf_common+0xd6>
 8006998:	2000      	movs	r0, #0
 800699a:	e008      	b.n	80069ae <_printf_common+0xb6>
 800699c:	2301      	movs	r3, #1
 800699e:	4652      	mov	r2, sl
 80069a0:	4639      	mov	r1, r7
 80069a2:	4630      	mov	r0, r6
 80069a4:	47c0      	blx	r8
 80069a6:	3001      	adds	r0, #1
 80069a8:	d103      	bne.n	80069b2 <_printf_common+0xba>
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295
 80069ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b2:	3501      	adds	r5, #1
 80069b4:	e7c3      	b.n	800693e <_printf_common+0x46>
 80069b6:	18e1      	adds	r1, r4, r3
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	2030      	movs	r0, #48	; 0x30
 80069bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069c0:	4422      	add	r2, r4
 80069c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069ca:	3302      	adds	r3, #2
 80069cc:	e7c5      	b.n	800695a <_printf_common+0x62>
 80069ce:	2301      	movs	r3, #1
 80069d0:	4622      	mov	r2, r4
 80069d2:	4639      	mov	r1, r7
 80069d4:	4630      	mov	r0, r6
 80069d6:	47c0      	blx	r8
 80069d8:	3001      	adds	r0, #1
 80069da:	d0e6      	beq.n	80069aa <_printf_common+0xb2>
 80069dc:	f109 0901 	add.w	r9, r9, #1
 80069e0:	e7d8      	b.n	8006994 <_printf_common+0x9c>
	...

080069e4 <_printf_i>:
 80069e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80069ec:	460c      	mov	r4, r1
 80069ee:	7e09      	ldrb	r1, [r1, #24]
 80069f0:	b085      	sub	sp, #20
 80069f2:	296e      	cmp	r1, #110	; 0x6e
 80069f4:	4617      	mov	r7, r2
 80069f6:	4606      	mov	r6, r0
 80069f8:	4698      	mov	r8, r3
 80069fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069fc:	f000 80b3 	beq.w	8006b66 <_printf_i+0x182>
 8006a00:	d822      	bhi.n	8006a48 <_printf_i+0x64>
 8006a02:	2963      	cmp	r1, #99	; 0x63
 8006a04:	d036      	beq.n	8006a74 <_printf_i+0x90>
 8006a06:	d80a      	bhi.n	8006a1e <_printf_i+0x3a>
 8006a08:	2900      	cmp	r1, #0
 8006a0a:	f000 80b9 	beq.w	8006b80 <_printf_i+0x19c>
 8006a0e:	2958      	cmp	r1, #88	; 0x58
 8006a10:	f000 8083 	beq.w	8006b1a <_printf_i+0x136>
 8006a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006a1c:	e032      	b.n	8006a84 <_printf_i+0xa0>
 8006a1e:	2964      	cmp	r1, #100	; 0x64
 8006a20:	d001      	beq.n	8006a26 <_printf_i+0x42>
 8006a22:	2969      	cmp	r1, #105	; 0x69
 8006a24:	d1f6      	bne.n	8006a14 <_printf_i+0x30>
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	6813      	ldr	r3, [r2, #0]
 8006a2a:	0605      	lsls	r5, r0, #24
 8006a2c:	f103 0104 	add.w	r1, r3, #4
 8006a30:	d52a      	bpl.n	8006a88 <_printf_i+0xa4>
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6011      	str	r1, [r2, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da03      	bge.n	8006a42 <_printf_i+0x5e>
 8006a3a:	222d      	movs	r2, #45	; 0x2d
 8006a3c:	425b      	negs	r3, r3
 8006a3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a42:	486f      	ldr	r0, [pc, #444]	; (8006c00 <_printf_i+0x21c>)
 8006a44:	220a      	movs	r2, #10
 8006a46:	e039      	b.n	8006abc <_printf_i+0xd8>
 8006a48:	2973      	cmp	r1, #115	; 0x73
 8006a4a:	f000 809d 	beq.w	8006b88 <_printf_i+0x1a4>
 8006a4e:	d808      	bhi.n	8006a62 <_printf_i+0x7e>
 8006a50:	296f      	cmp	r1, #111	; 0x6f
 8006a52:	d020      	beq.n	8006a96 <_printf_i+0xb2>
 8006a54:	2970      	cmp	r1, #112	; 0x70
 8006a56:	d1dd      	bne.n	8006a14 <_printf_i+0x30>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	f043 0320 	orr.w	r3, r3, #32
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	e003      	b.n	8006a6a <_printf_i+0x86>
 8006a62:	2975      	cmp	r1, #117	; 0x75
 8006a64:	d017      	beq.n	8006a96 <_printf_i+0xb2>
 8006a66:	2978      	cmp	r1, #120	; 0x78
 8006a68:	d1d4      	bne.n	8006a14 <_printf_i+0x30>
 8006a6a:	2378      	movs	r3, #120	; 0x78
 8006a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a70:	4864      	ldr	r0, [pc, #400]	; (8006c04 <_printf_i+0x220>)
 8006a72:	e055      	b.n	8006b20 <_printf_i+0x13c>
 8006a74:	6813      	ldr	r3, [r2, #0]
 8006a76:	1d19      	adds	r1, r3, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6011      	str	r1, [r2, #0]
 8006a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a84:	2301      	movs	r3, #1
 8006a86:	e08c      	b.n	8006ba2 <_printf_i+0x1be>
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6011      	str	r1, [r2, #0]
 8006a8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a90:	bf18      	it	ne
 8006a92:	b21b      	sxthne	r3, r3
 8006a94:	e7cf      	b.n	8006a36 <_printf_i+0x52>
 8006a96:	6813      	ldr	r3, [r2, #0]
 8006a98:	6825      	ldr	r5, [r4, #0]
 8006a9a:	1d18      	adds	r0, r3, #4
 8006a9c:	6010      	str	r0, [r2, #0]
 8006a9e:	0628      	lsls	r0, r5, #24
 8006aa0:	d501      	bpl.n	8006aa6 <_printf_i+0xc2>
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	e002      	b.n	8006aac <_printf_i+0xc8>
 8006aa6:	0668      	lsls	r0, r5, #25
 8006aa8:	d5fb      	bpl.n	8006aa2 <_printf_i+0xbe>
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	4854      	ldr	r0, [pc, #336]	; (8006c00 <_printf_i+0x21c>)
 8006aae:	296f      	cmp	r1, #111	; 0x6f
 8006ab0:	bf14      	ite	ne
 8006ab2:	220a      	movne	r2, #10
 8006ab4:	2208      	moveq	r2, #8
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006abc:	6865      	ldr	r5, [r4, #4]
 8006abe:	60a5      	str	r5, [r4, #8]
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	f2c0 8095 	blt.w	8006bf0 <_printf_i+0x20c>
 8006ac6:	6821      	ldr	r1, [r4, #0]
 8006ac8:	f021 0104 	bic.w	r1, r1, #4
 8006acc:	6021      	str	r1, [r4, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d13d      	bne.n	8006b4e <_printf_i+0x16a>
 8006ad2:	2d00      	cmp	r5, #0
 8006ad4:	f040 808e 	bne.w	8006bf4 <_printf_i+0x210>
 8006ad8:	4665      	mov	r5, ip
 8006ada:	2a08      	cmp	r2, #8
 8006adc:	d10b      	bne.n	8006af6 <_printf_i+0x112>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	07db      	lsls	r3, r3, #31
 8006ae2:	d508      	bpl.n	8006af6 <_printf_i+0x112>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	6862      	ldr	r2, [r4, #4]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	bfde      	ittt	le
 8006aec:	2330      	movle	r3, #48	; 0x30
 8006aee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006af2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006af6:	ebac 0305 	sub.w	r3, ip, r5
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	f8cd 8000 	str.w	r8, [sp]
 8006b00:	463b      	mov	r3, r7
 8006b02:	aa03      	add	r2, sp, #12
 8006b04:	4621      	mov	r1, r4
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff fef6 	bl	80068f8 <_printf_common>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d14d      	bne.n	8006bac <_printf_i+0x1c8>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	b005      	add	sp, #20
 8006b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b1a:	4839      	ldr	r0, [pc, #228]	; (8006c00 <_printf_i+0x21c>)
 8006b1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006b20:	6813      	ldr	r3, [r2, #0]
 8006b22:	6821      	ldr	r1, [r4, #0]
 8006b24:	1d1d      	adds	r5, r3, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6015      	str	r5, [r2, #0]
 8006b2a:	060a      	lsls	r2, r1, #24
 8006b2c:	d50b      	bpl.n	8006b46 <_printf_i+0x162>
 8006b2e:	07ca      	lsls	r2, r1, #31
 8006b30:	bf44      	itt	mi
 8006b32:	f041 0120 	orrmi.w	r1, r1, #32
 8006b36:	6021      	strmi	r1, [r4, #0]
 8006b38:	b91b      	cbnz	r3, 8006b42 <_printf_i+0x15e>
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	f022 0220 	bic.w	r2, r2, #32
 8006b40:	6022      	str	r2, [r4, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	e7b7      	b.n	8006ab6 <_printf_i+0xd2>
 8006b46:	064d      	lsls	r5, r1, #25
 8006b48:	bf48      	it	mi
 8006b4a:	b29b      	uxthmi	r3, r3
 8006b4c:	e7ef      	b.n	8006b2e <_printf_i+0x14a>
 8006b4e:	4665      	mov	r5, ip
 8006b50:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b54:	fb02 3311 	mls	r3, r2, r1, r3
 8006b58:	5cc3      	ldrb	r3, [r0, r3]
 8006b5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b5e:	460b      	mov	r3, r1
 8006b60:	2900      	cmp	r1, #0
 8006b62:	d1f5      	bne.n	8006b50 <_printf_i+0x16c>
 8006b64:	e7b9      	b.n	8006ada <_printf_i+0xf6>
 8006b66:	6813      	ldr	r3, [r2, #0]
 8006b68:	6825      	ldr	r5, [r4, #0]
 8006b6a:	6961      	ldr	r1, [r4, #20]
 8006b6c:	1d18      	adds	r0, r3, #4
 8006b6e:	6010      	str	r0, [r2, #0]
 8006b70:	0628      	lsls	r0, r5, #24
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	d501      	bpl.n	8006b7a <_printf_i+0x196>
 8006b76:	6019      	str	r1, [r3, #0]
 8006b78:	e002      	b.n	8006b80 <_printf_i+0x19c>
 8006b7a:	066a      	lsls	r2, r5, #25
 8006b7c:	d5fb      	bpl.n	8006b76 <_printf_i+0x192>
 8006b7e:	8019      	strh	r1, [r3, #0]
 8006b80:	2300      	movs	r3, #0
 8006b82:	6123      	str	r3, [r4, #16]
 8006b84:	4665      	mov	r5, ip
 8006b86:	e7b9      	b.n	8006afc <_printf_i+0x118>
 8006b88:	6813      	ldr	r3, [r2, #0]
 8006b8a:	1d19      	adds	r1, r3, #4
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	681d      	ldr	r5, [r3, #0]
 8006b90:	6862      	ldr	r2, [r4, #4]
 8006b92:	2100      	movs	r1, #0
 8006b94:	4628      	mov	r0, r5
 8006b96:	f7f9 fb1b 	bl	80001d0 <memchr>
 8006b9a:	b108      	cbz	r0, 8006ba0 <_printf_i+0x1bc>
 8006b9c:	1b40      	subs	r0, r0, r5
 8006b9e:	6060      	str	r0, [r4, #4]
 8006ba0:	6863      	ldr	r3, [r4, #4]
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006baa:	e7a7      	b.n	8006afc <_printf_i+0x118>
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	462a      	mov	r2, r5
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	47c0      	blx	r8
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d0aa      	beq.n	8006b10 <_printf_i+0x12c>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	079b      	lsls	r3, r3, #30
 8006bbe:	d413      	bmi.n	8006be8 <_printf_i+0x204>
 8006bc0:	68e0      	ldr	r0, [r4, #12]
 8006bc2:	9b03      	ldr	r3, [sp, #12]
 8006bc4:	4298      	cmp	r0, r3
 8006bc6:	bfb8      	it	lt
 8006bc8:	4618      	movlt	r0, r3
 8006bca:	e7a3      	b.n	8006b14 <_printf_i+0x130>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	464a      	mov	r2, r9
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	47c0      	blx	r8
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	d09a      	beq.n	8006b10 <_printf_i+0x12c>
 8006bda:	3501      	adds	r5, #1
 8006bdc:	68e3      	ldr	r3, [r4, #12]
 8006bde:	9a03      	ldr	r2, [sp, #12]
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	42ab      	cmp	r3, r5
 8006be4:	dcf2      	bgt.n	8006bcc <_printf_i+0x1e8>
 8006be6:	e7eb      	b.n	8006bc0 <_printf_i+0x1dc>
 8006be8:	2500      	movs	r5, #0
 8006bea:	f104 0919 	add.w	r9, r4, #25
 8006bee:	e7f5      	b.n	8006bdc <_printf_i+0x1f8>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1ac      	bne.n	8006b4e <_printf_i+0x16a>
 8006bf4:	7803      	ldrb	r3, [r0, #0]
 8006bf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bfe:	e76c      	b.n	8006ada <_printf_i+0xf6>
 8006c00:	08007575 	.word	0x08007575
 8006c04:	08007586 	.word	0x08007586

08006c08 <_sbrk_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4c06      	ldr	r4, [pc, #24]	; (8006c24 <_sbrk_r+0x1c>)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4605      	mov	r5, r0
 8006c10:	4608      	mov	r0, r1
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	f7fb ffbe 	bl	8002b94 <_sbrk>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_sbrk_r+0x1a>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_sbrk_r+0x1a>
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20000760 	.word	0x20000760

08006c28 <__sread>:
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c30:	f000 fa96 	bl	8007160 <_read_r>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	bfab      	itete	ge
 8006c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c3c:	181b      	addge	r3, r3, r0
 8006c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c42:	bfac      	ite	ge
 8006c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c46:	81a3      	strhlt	r3, [r4, #12]
 8006c48:	bd10      	pop	{r4, pc}

08006c4a <__swrite>:
 8006c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4e:	461f      	mov	r7, r3
 8006c50:	898b      	ldrh	r3, [r1, #12]
 8006c52:	05db      	lsls	r3, r3, #23
 8006c54:	4605      	mov	r5, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	4616      	mov	r6, r2
 8006c5a:	d505      	bpl.n	8006c68 <__swrite+0x1e>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c64:	f000 f9b6 	bl	8006fd4 <_lseek_r>
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c72:	81a3      	strh	r3, [r4, #12]
 8006c74:	4632      	mov	r2, r6
 8006c76:	463b      	mov	r3, r7
 8006c78:	4628      	mov	r0, r5
 8006c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7e:	f000 b869 	b.w	8006d54 <_write_r>

08006c82 <__sseek>:
 8006c82:	b510      	push	{r4, lr}
 8006c84:	460c      	mov	r4, r1
 8006c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8a:	f000 f9a3 	bl	8006fd4 <_lseek_r>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	bf15      	itete	ne
 8006c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c9e:	81a3      	strheq	r3, [r4, #12]
 8006ca0:	bf18      	it	ne
 8006ca2:	81a3      	strhne	r3, [r4, #12]
 8006ca4:	bd10      	pop	{r4, pc}

08006ca6 <__sclose>:
 8006ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006caa:	f000 b8d3 	b.w	8006e54 <_close_r>
	...

08006cb0 <__swbuf_r>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	460e      	mov	r6, r1
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	b118      	cbz	r0, 8006cc2 <__swbuf_r+0x12>
 8006cba:	6983      	ldr	r3, [r0, #24]
 8006cbc:	b90b      	cbnz	r3, 8006cc2 <__swbuf_r+0x12>
 8006cbe:	f7ff fbf7 	bl	80064b0 <__sinit>
 8006cc2:	4b21      	ldr	r3, [pc, #132]	; (8006d48 <__swbuf_r+0x98>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	d12a      	bne.n	8006d1e <__swbuf_r+0x6e>
 8006cc8:	686c      	ldr	r4, [r5, #4]
 8006cca:	69a3      	ldr	r3, [r4, #24]
 8006ccc:	60a3      	str	r3, [r4, #8]
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	071a      	lsls	r2, r3, #28
 8006cd2:	d52e      	bpl.n	8006d32 <__swbuf_r+0x82>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	b363      	cbz	r3, 8006d32 <__swbuf_r+0x82>
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	6820      	ldr	r0, [r4, #0]
 8006cdc:	1ac0      	subs	r0, r0, r3
 8006cde:	6963      	ldr	r3, [r4, #20]
 8006ce0:	b2f6      	uxtb	r6, r6
 8006ce2:	4283      	cmp	r3, r0
 8006ce4:	4637      	mov	r7, r6
 8006ce6:	dc04      	bgt.n	8006cf2 <__swbuf_r+0x42>
 8006ce8:	4621      	mov	r1, r4
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 f948 	bl	8006f80 <_fflush_r>
 8006cf0:	bb28      	cbnz	r0, 8006d3e <__swbuf_r+0x8e>
 8006cf2:	68a3      	ldr	r3, [r4, #8]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	60a3      	str	r3, [r4, #8]
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	6022      	str	r2, [r4, #0]
 8006cfe:	701e      	strb	r6, [r3, #0]
 8006d00:	6963      	ldr	r3, [r4, #20]
 8006d02:	3001      	adds	r0, #1
 8006d04:	4283      	cmp	r3, r0
 8006d06:	d004      	beq.n	8006d12 <__swbuf_r+0x62>
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	07db      	lsls	r3, r3, #31
 8006d0c:	d519      	bpl.n	8006d42 <__swbuf_r+0x92>
 8006d0e:	2e0a      	cmp	r6, #10
 8006d10:	d117      	bne.n	8006d42 <__swbuf_r+0x92>
 8006d12:	4621      	mov	r1, r4
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 f933 	bl	8006f80 <_fflush_r>
 8006d1a:	b190      	cbz	r0, 8006d42 <__swbuf_r+0x92>
 8006d1c:	e00f      	b.n	8006d3e <__swbuf_r+0x8e>
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <__swbuf_r+0x9c>)
 8006d20:	429c      	cmp	r4, r3
 8006d22:	d101      	bne.n	8006d28 <__swbuf_r+0x78>
 8006d24:	68ac      	ldr	r4, [r5, #8]
 8006d26:	e7d0      	b.n	8006cca <__swbuf_r+0x1a>
 8006d28:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <__swbuf_r+0xa0>)
 8006d2a:	429c      	cmp	r4, r3
 8006d2c:	bf08      	it	eq
 8006d2e:	68ec      	ldreq	r4, [r5, #12]
 8006d30:	e7cb      	b.n	8006cca <__swbuf_r+0x1a>
 8006d32:	4621      	mov	r1, r4
 8006d34:	4628      	mov	r0, r5
 8006d36:	f000 f81f 	bl	8006d78 <__swsetup_r>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0cc      	beq.n	8006cd8 <__swbuf_r+0x28>
 8006d3e:	f04f 37ff 	mov.w	r7, #4294967295
 8006d42:	4638      	mov	r0, r7
 8006d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d46:	bf00      	nop
 8006d48:	08007524 	.word	0x08007524
 8006d4c:	08007544 	.word	0x08007544
 8006d50:	08007504 	.word	0x08007504

08006d54 <_write_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4c07      	ldr	r4, [pc, #28]	; (8006d74 <_write_r+0x20>)
 8006d58:	4605      	mov	r5, r0
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	6022      	str	r2, [r4, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7fb fec5 	bl	8002af2 <_write>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_write_r+0x1e>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_write_r+0x1e>
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20000760 	.word	0x20000760

08006d78 <__swsetup_r>:
 8006d78:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <__swsetup_r+0xcc>)
 8006d7a:	b570      	push	{r4, r5, r6, lr}
 8006d7c:	681d      	ldr	r5, [r3, #0]
 8006d7e:	4606      	mov	r6, r0
 8006d80:	460c      	mov	r4, r1
 8006d82:	b125      	cbz	r5, 8006d8e <__swsetup_r+0x16>
 8006d84:	69ab      	ldr	r3, [r5, #24]
 8006d86:	b913      	cbnz	r3, 8006d8e <__swsetup_r+0x16>
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f7ff fb91 	bl	80064b0 <__sinit>
 8006d8e:	4b2e      	ldr	r3, [pc, #184]	; (8006e48 <__swsetup_r+0xd0>)
 8006d90:	429c      	cmp	r4, r3
 8006d92:	d10f      	bne.n	8006db4 <__swsetup_r+0x3c>
 8006d94:	686c      	ldr	r4, [r5, #4]
 8006d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	0715      	lsls	r5, r2, #28
 8006d9e:	d42c      	bmi.n	8006dfa <__swsetup_r+0x82>
 8006da0:	06d0      	lsls	r0, r2, #27
 8006da2:	d411      	bmi.n	8006dc8 <__swsetup_r+0x50>
 8006da4:	2209      	movs	r2, #9
 8006da6:	6032      	str	r2, [r6, #0]
 8006da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	f04f 30ff 	mov.w	r0, #4294967295
 8006db2:	e03e      	b.n	8006e32 <__swsetup_r+0xba>
 8006db4:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <__swsetup_r+0xd4>)
 8006db6:	429c      	cmp	r4, r3
 8006db8:	d101      	bne.n	8006dbe <__swsetup_r+0x46>
 8006dba:	68ac      	ldr	r4, [r5, #8]
 8006dbc:	e7eb      	b.n	8006d96 <__swsetup_r+0x1e>
 8006dbe:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <__swsetup_r+0xd8>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	bf08      	it	eq
 8006dc4:	68ec      	ldreq	r4, [r5, #12]
 8006dc6:	e7e6      	b.n	8006d96 <__swsetup_r+0x1e>
 8006dc8:	0751      	lsls	r1, r2, #29
 8006dca:	d512      	bpl.n	8006df2 <__swsetup_r+0x7a>
 8006dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dce:	b141      	cbz	r1, 8006de2 <__swsetup_r+0x6a>
 8006dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dd4:	4299      	cmp	r1, r3
 8006dd6:	d002      	beq.n	8006dde <__swsetup_r+0x66>
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f000 f973 	bl	80070c4 <_free_r>
 8006dde:	2300      	movs	r3, #0
 8006de0:	6363      	str	r3, [r4, #52]	; 0x34
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006de8:	81a3      	strh	r3, [r4, #12]
 8006dea:	2300      	movs	r3, #0
 8006dec:	6063      	str	r3, [r4, #4]
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	f043 0308 	orr.w	r3, r3, #8
 8006df8:	81a3      	strh	r3, [r4, #12]
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	b94b      	cbnz	r3, 8006e12 <__swsetup_r+0x9a>
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e08:	d003      	beq.n	8006e12 <__swsetup_r+0x9a>
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f000 f917 	bl	8007040 <__smakebuf_r>
 8006e12:	89a2      	ldrh	r2, [r4, #12]
 8006e14:	f012 0301 	ands.w	r3, r2, #1
 8006e18:	d00c      	beq.n	8006e34 <__swsetup_r+0xbc>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60a3      	str	r3, [r4, #8]
 8006e1e:	6963      	ldr	r3, [r4, #20]
 8006e20:	425b      	negs	r3, r3
 8006e22:	61a3      	str	r3, [r4, #24]
 8006e24:	6923      	ldr	r3, [r4, #16]
 8006e26:	b953      	cbnz	r3, 8006e3e <__swsetup_r+0xc6>
 8006e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006e30:	d1ba      	bne.n	8006da8 <__swsetup_r+0x30>
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	0792      	lsls	r2, r2, #30
 8006e36:	bf58      	it	pl
 8006e38:	6963      	ldrpl	r3, [r4, #20]
 8006e3a:	60a3      	str	r3, [r4, #8]
 8006e3c:	e7f2      	b.n	8006e24 <__swsetup_r+0xac>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e7f7      	b.n	8006e32 <__swsetup_r+0xba>
 8006e42:	bf00      	nop
 8006e44:	20000144 	.word	0x20000144
 8006e48:	08007524 	.word	0x08007524
 8006e4c:	08007544 	.word	0x08007544
 8006e50:	08007504 	.word	0x08007504

08006e54 <_close_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4c06      	ldr	r4, [pc, #24]	; (8006e70 <_close_r+0x1c>)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	f7fb fe63 	bl	8002b2a <_close>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_close_r+0x1a>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_close_r+0x1a>
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20000760 	.word	0x20000760

08006e74 <__sflush_r>:
 8006e74:	898a      	ldrh	r2, [r1, #12]
 8006e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	0710      	lsls	r0, r2, #28
 8006e7e:	460c      	mov	r4, r1
 8006e80:	d458      	bmi.n	8006f34 <__sflush_r+0xc0>
 8006e82:	684b      	ldr	r3, [r1, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dc05      	bgt.n	8006e94 <__sflush_r+0x20>
 8006e88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dc02      	bgt.n	8006e94 <__sflush_r+0x20>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	d0f9      	beq.n	8006e8e <__sflush_r+0x1a>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ea0:	682f      	ldr	r7, [r5, #0]
 8006ea2:	6a21      	ldr	r1, [r4, #32]
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	d032      	beq.n	8006f0e <__sflush_r+0x9a>
 8006ea8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	075a      	lsls	r2, r3, #29
 8006eae:	d505      	bpl.n	8006ebc <__sflush_r+0x48>
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	1ac0      	subs	r0, r0, r3
 8006eb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006eb6:	b10b      	cbz	r3, 8006ebc <__sflush_r+0x48>
 8006eb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eba:	1ac0      	subs	r0, r0, r3
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ec2:	6a21      	ldr	r1, [r4, #32]
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b0      	blx	r6
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	d106      	bne.n	8006edc <__sflush_r+0x68>
 8006ece:	6829      	ldr	r1, [r5, #0]
 8006ed0:	291d      	cmp	r1, #29
 8006ed2:	d848      	bhi.n	8006f66 <__sflush_r+0xf2>
 8006ed4:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <__sflush_r+0x108>)
 8006ed6:	40ca      	lsrs	r2, r1
 8006ed8:	07d6      	lsls	r6, r2, #31
 8006eda:	d544      	bpl.n	8006f66 <__sflush_r+0xf2>
 8006edc:	2200      	movs	r2, #0
 8006ede:	6062      	str	r2, [r4, #4]
 8006ee0:	04d9      	lsls	r1, r3, #19
 8006ee2:	6922      	ldr	r2, [r4, #16]
 8006ee4:	6022      	str	r2, [r4, #0]
 8006ee6:	d504      	bpl.n	8006ef2 <__sflush_r+0x7e>
 8006ee8:	1c42      	adds	r2, r0, #1
 8006eea:	d101      	bne.n	8006ef0 <__sflush_r+0x7c>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b903      	cbnz	r3, 8006ef2 <__sflush_r+0x7e>
 8006ef0:	6560      	str	r0, [r4, #84]	; 0x54
 8006ef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ef4:	602f      	str	r7, [r5, #0]
 8006ef6:	2900      	cmp	r1, #0
 8006ef8:	d0c9      	beq.n	8006e8e <__sflush_r+0x1a>
 8006efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006efe:	4299      	cmp	r1, r3
 8006f00:	d002      	beq.n	8006f08 <__sflush_r+0x94>
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 f8de 	bl	80070c4 <_free_r>
 8006f08:	2000      	movs	r0, #0
 8006f0a:	6360      	str	r0, [r4, #52]	; 0x34
 8006f0c:	e7c0      	b.n	8006e90 <__sflush_r+0x1c>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b0      	blx	r6
 8006f14:	1c41      	adds	r1, r0, #1
 8006f16:	d1c8      	bne.n	8006eaa <__sflush_r+0x36>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0c5      	beq.n	8006eaa <__sflush_r+0x36>
 8006f1e:	2b1d      	cmp	r3, #29
 8006f20:	d001      	beq.n	8006f26 <__sflush_r+0xb2>
 8006f22:	2b16      	cmp	r3, #22
 8006f24:	d101      	bne.n	8006f2a <__sflush_r+0xb6>
 8006f26:	602f      	str	r7, [r5, #0]
 8006f28:	e7b1      	b.n	8006e8e <__sflush_r+0x1a>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f30:	81a3      	strh	r3, [r4, #12]
 8006f32:	e7ad      	b.n	8006e90 <__sflush_r+0x1c>
 8006f34:	690f      	ldr	r7, [r1, #16]
 8006f36:	2f00      	cmp	r7, #0
 8006f38:	d0a9      	beq.n	8006e8e <__sflush_r+0x1a>
 8006f3a:	0793      	lsls	r3, r2, #30
 8006f3c:	680e      	ldr	r6, [r1, #0]
 8006f3e:	bf08      	it	eq
 8006f40:	694b      	ldreq	r3, [r1, #20]
 8006f42:	600f      	str	r7, [r1, #0]
 8006f44:	bf18      	it	ne
 8006f46:	2300      	movne	r3, #0
 8006f48:	eba6 0807 	sub.w	r8, r6, r7
 8006f4c:	608b      	str	r3, [r1, #8]
 8006f4e:	f1b8 0f00 	cmp.w	r8, #0
 8006f52:	dd9c      	ble.n	8006e8e <__sflush_r+0x1a>
 8006f54:	4643      	mov	r3, r8
 8006f56:	463a      	mov	r2, r7
 8006f58:	6a21      	ldr	r1, [r4, #32]
 8006f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b0      	blx	r6
 8006f60:	2800      	cmp	r0, #0
 8006f62:	dc06      	bgt.n	8006f72 <__sflush_r+0xfe>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	e78e      	b.n	8006e90 <__sflush_r+0x1c>
 8006f72:	4407      	add	r7, r0
 8006f74:	eba8 0800 	sub.w	r8, r8, r0
 8006f78:	e7e9      	b.n	8006f4e <__sflush_r+0xda>
 8006f7a:	bf00      	nop
 8006f7c:	20400001 	.word	0x20400001

08006f80 <_fflush_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	690b      	ldr	r3, [r1, #16]
 8006f84:	4605      	mov	r5, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	b1db      	cbz	r3, 8006fc2 <_fflush_r+0x42>
 8006f8a:	b118      	cbz	r0, 8006f94 <_fflush_r+0x14>
 8006f8c:	6983      	ldr	r3, [r0, #24]
 8006f8e:	b90b      	cbnz	r3, 8006f94 <_fflush_r+0x14>
 8006f90:	f7ff fa8e 	bl	80064b0 <__sinit>
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <_fflush_r+0x48>)
 8006f96:	429c      	cmp	r4, r3
 8006f98:	d109      	bne.n	8006fae <_fflush_r+0x2e>
 8006f9a:	686c      	ldr	r4, [r5, #4]
 8006f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa0:	b17b      	cbz	r3, 8006fc2 <_fflush_r+0x42>
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006faa:	f7ff bf63 	b.w	8006e74 <__sflush_r>
 8006fae:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <_fflush_r+0x4c>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	d101      	bne.n	8006fb8 <_fflush_r+0x38>
 8006fb4:	68ac      	ldr	r4, [r5, #8]
 8006fb6:	e7f1      	b.n	8006f9c <_fflush_r+0x1c>
 8006fb8:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <_fflush_r+0x50>)
 8006fba:	429c      	cmp	r4, r3
 8006fbc:	bf08      	it	eq
 8006fbe:	68ec      	ldreq	r4, [r5, #12]
 8006fc0:	e7ec      	b.n	8006f9c <_fflush_r+0x1c>
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	bd38      	pop	{r3, r4, r5, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08007524 	.word	0x08007524
 8006fcc:	08007544 	.word	0x08007544
 8006fd0:	08007504 	.word	0x08007504

08006fd4 <_lseek_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4c07      	ldr	r4, [pc, #28]	; (8006ff4 <_lseek_r+0x20>)
 8006fd8:	4605      	mov	r5, r0
 8006fda:	4608      	mov	r0, r1
 8006fdc:	4611      	mov	r1, r2
 8006fde:	2200      	movs	r2, #0
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f7fb fdc8 	bl	8002b78 <_lseek>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_lseek_r+0x1e>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_lseek_r+0x1e>
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20000760 	.word	0x20000760

08006ff8 <__swhatbuf_r>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	460e      	mov	r6, r1
 8006ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007000:	2900      	cmp	r1, #0
 8007002:	b096      	sub	sp, #88	; 0x58
 8007004:	4614      	mov	r4, r2
 8007006:	461d      	mov	r5, r3
 8007008:	da07      	bge.n	800701a <__swhatbuf_r+0x22>
 800700a:	2300      	movs	r3, #0
 800700c:	602b      	str	r3, [r5, #0]
 800700e:	89b3      	ldrh	r3, [r6, #12]
 8007010:	061a      	lsls	r2, r3, #24
 8007012:	d410      	bmi.n	8007036 <__swhatbuf_r+0x3e>
 8007014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007018:	e00e      	b.n	8007038 <__swhatbuf_r+0x40>
 800701a:	466a      	mov	r2, sp
 800701c:	f000 f8b2 	bl	8007184 <_fstat_r>
 8007020:	2800      	cmp	r0, #0
 8007022:	dbf2      	blt.n	800700a <__swhatbuf_r+0x12>
 8007024:	9a01      	ldr	r2, [sp, #4]
 8007026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800702a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800702e:	425a      	negs	r2, r3
 8007030:	415a      	adcs	r2, r3
 8007032:	602a      	str	r2, [r5, #0]
 8007034:	e7ee      	b.n	8007014 <__swhatbuf_r+0x1c>
 8007036:	2340      	movs	r3, #64	; 0x40
 8007038:	2000      	movs	r0, #0
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	b016      	add	sp, #88	; 0x58
 800703e:	bd70      	pop	{r4, r5, r6, pc}

08007040 <__smakebuf_r>:
 8007040:	898b      	ldrh	r3, [r1, #12]
 8007042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007044:	079d      	lsls	r5, r3, #30
 8007046:	4606      	mov	r6, r0
 8007048:	460c      	mov	r4, r1
 800704a:	d507      	bpl.n	800705c <__smakebuf_r+0x1c>
 800704c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	2301      	movs	r3, #1
 8007056:	6163      	str	r3, [r4, #20]
 8007058:	b002      	add	sp, #8
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	ab01      	add	r3, sp, #4
 800705e:	466a      	mov	r2, sp
 8007060:	f7ff ffca 	bl	8006ff8 <__swhatbuf_r>
 8007064:	9900      	ldr	r1, [sp, #0]
 8007066:	4605      	mov	r5, r0
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff faab 	bl	80065c4 <_malloc_r>
 800706e:	b948      	cbnz	r0, 8007084 <__smakebuf_r+0x44>
 8007070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007074:	059a      	lsls	r2, r3, #22
 8007076:	d4ef      	bmi.n	8007058 <__smakebuf_r+0x18>
 8007078:	f023 0303 	bic.w	r3, r3, #3
 800707c:	f043 0302 	orr.w	r3, r3, #2
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	e7e3      	b.n	800704c <__smakebuf_r+0xc>
 8007084:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <__smakebuf_r+0x7c>)
 8007086:	62b3      	str	r3, [r6, #40]	; 0x28
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	6020      	str	r0, [r4, #0]
 800708c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	9b00      	ldr	r3, [sp, #0]
 8007094:	6163      	str	r3, [r4, #20]
 8007096:	9b01      	ldr	r3, [sp, #4]
 8007098:	6120      	str	r0, [r4, #16]
 800709a:	b15b      	cbz	r3, 80070b4 <__smakebuf_r+0x74>
 800709c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a0:	4630      	mov	r0, r6
 80070a2:	f000 f881 	bl	80071a8 <_isatty_r>
 80070a6:	b128      	cbz	r0, 80070b4 <__smakebuf_r+0x74>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f023 0303 	bic.w	r3, r3, #3
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	431d      	orrs	r5, r3
 80070b8:	81a5      	strh	r5, [r4, #12]
 80070ba:	e7cd      	b.n	8007058 <__smakebuf_r+0x18>
 80070bc:	08006479 	.word	0x08006479

080070c0 <__malloc_lock>:
 80070c0:	4770      	bx	lr

080070c2 <__malloc_unlock>:
 80070c2:	4770      	bx	lr

080070c4 <_free_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4605      	mov	r5, r0
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d045      	beq.n	8007158 <_free_r+0x94>
 80070cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d0:	1f0c      	subs	r4, r1, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bfb8      	it	lt
 80070d6:	18e4      	addlt	r4, r4, r3
 80070d8:	f7ff fff2 	bl	80070c0 <__malloc_lock>
 80070dc:	4a1f      	ldr	r2, [pc, #124]	; (800715c <_free_r+0x98>)
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	4610      	mov	r0, r2
 80070e2:	b933      	cbnz	r3, 80070f2 <_free_r+0x2e>
 80070e4:	6063      	str	r3, [r4, #4]
 80070e6:	6014      	str	r4, [r2, #0]
 80070e8:	4628      	mov	r0, r5
 80070ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ee:	f7ff bfe8 	b.w	80070c2 <__malloc_unlock>
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	d90c      	bls.n	8007110 <_free_r+0x4c>
 80070f6:	6821      	ldr	r1, [r4, #0]
 80070f8:	1862      	adds	r2, r4, r1
 80070fa:	4293      	cmp	r3, r2
 80070fc:	bf04      	itt	eq
 80070fe:	681a      	ldreq	r2, [r3, #0]
 8007100:	685b      	ldreq	r3, [r3, #4]
 8007102:	6063      	str	r3, [r4, #4]
 8007104:	bf04      	itt	eq
 8007106:	1852      	addeq	r2, r2, r1
 8007108:	6022      	streq	r2, [r4, #0]
 800710a:	6004      	str	r4, [r0, #0]
 800710c:	e7ec      	b.n	80070e8 <_free_r+0x24>
 800710e:	4613      	mov	r3, r2
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	b10a      	cbz	r2, 8007118 <_free_r+0x54>
 8007114:	42a2      	cmp	r2, r4
 8007116:	d9fa      	bls.n	800710e <_free_r+0x4a>
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	1858      	adds	r0, r3, r1
 800711c:	42a0      	cmp	r0, r4
 800711e:	d10b      	bne.n	8007138 <_free_r+0x74>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	4401      	add	r1, r0
 8007124:	1858      	adds	r0, r3, r1
 8007126:	4282      	cmp	r2, r0
 8007128:	6019      	str	r1, [r3, #0]
 800712a:	d1dd      	bne.n	80070e8 <_free_r+0x24>
 800712c:	6810      	ldr	r0, [r2, #0]
 800712e:	6852      	ldr	r2, [r2, #4]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	4401      	add	r1, r0
 8007134:	6019      	str	r1, [r3, #0]
 8007136:	e7d7      	b.n	80070e8 <_free_r+0x24>
 8007138:	d902      	bls.n	8007140 <_free_r+0x7c>
 800713a:	230c      	movs	r3, #12
 800713c:	602b      	str	r3, [r5, #0]
 800713e:	e7d3      	b.n	80070e8 <_free_r+0x24>
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	1821      	adds	r1, r4, r0
 8007144:	428a      	cmp	r2, r1
 8007146:	bf04      	itt	eq
 8007148:	6811      	ldreq	r1, [r2, #0]
 800714a:	6852      	ldreq	r2, [r2, #4]
 800714c:	6062      	str	r2, [r4, #4]
 800714e:	bf04      	itt	eq
 8007150:	1809      	addeq	r1, r1, r0
 8007152:	6021      	streq	r1, [r4, #0]
 8007154:	605c      	str	r4, [r3, #4]
 8007156:	e7c7      	b.n	80070e8 <_free_r+0x24>
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	bf00      	nop
 800715c:	20000700 	.word	0x20000700

08007160 <_read_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4c07      	ldr	r4, [pc, #28]	; (8007180 <_read_r+0x20>)
 8007164:	4605      	mov	r5, r0
 8007166:	4608      	mov	r0, r1
 8007168:	4611      	mov	r1, r2
 800716a:	2200      	movs	r2, #0
 800716c:	6022      	str	r2, [r4, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	f7fb fca2 	bl	8002ab8 <_read>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_read_r+0x1e>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	b103      	cbz	r3, 800717e <_read_r+0x1e>
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	20000760 	.word	0x20000760

08007184 <_fstat_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4c07      	ldr	r4, [pc, #28]	; (80071a4 <_fstat_r+0x20>)
 8007188:	2300      	movs	r3, #0
 800718a:	4605      	mov	r5, r0
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	f7fb fcd6 	bl	8002b42 <_fstat>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d102      	bne.n	80071a0 <_fstat_r+0x1c>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	b103      	cbz	r3, 80071a0 <_fstat_r+0x1c>
 800719e:	602b      	str	r3, [r5, #0]
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	bf00      	nop
 80071a4:	20000760 	.word	0x20000760

080071a8 <_isatty_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4c06      	ldr	r4, [pc, #24]	; (80071c4 <_isatty_r+0x1c>)
 80071ac:	2300      	movs	r3, #0
 80071ae:	4605      	mov	r5, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	f7fb fcd5 	bl	8002b62 <_isatty>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_isatty_r+0x1a>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_isatty_r+0x1a>
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	20000760 	.word	0x20000760

080071c8 <_init>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	bf00      	nop
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr

080071d4 <_fini>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	bf00      	nop
 80071d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071da:	bc08      	pop	{r3}
 80071dc:	469e      	mov	lr, r3
 80071de:	4770      	bx	lr
